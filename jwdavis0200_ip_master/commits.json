{"authorDailyContributionsMap":{"jwdavis0200":[{"date":"2022-08-17","commitResults":[{"hash":"f1c8472a2d4bb3f1244eb5c89258763470521dbe","messageTitle":"Added Level-1 functionality, Greet, Echo, Exit","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":26,"deletions":0}}},{"hash":"187c115f2dd3926d4c1c024b88f4dab7cfd1e449","messageTitle":"Fixed cosmetic bugs and a technical bug where whitespace will result in a new prompt feedback","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":8}}},{"hash":"324e89acca07dbbe5fe6b5c06569b1c7c855c1af","messageTitle":"Added bye method for more general implementation for the end of operation of chatbot to minimise code repetition.","messageBody":"","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":5,"deletions":0}}},{"hash":"9734e6d132115a6fbef92a6f4def885a4d4bbfa6","messageTitle":"Added storeman method for storing of lists of input and outputting them as a list when the string list is passed as an input","messageBody":"","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":29,"deletions":2}}},{"hash":"5fc2e89f5109aa7f325ab6eb9a91add307443a83","messageTitle":"Added Task Class to encapsulate tasks passed as input. Added checklist functionality and modified storeman method to accomodate new function. Added listOut method to generalise listing out of tasks, to minimise code repetition.","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":109,"deletions":16}}},{"hash":"de5b28436783a1fd2709c09916d770aef840463c","messageTitle":"Added three subclasses of Task; Deadline, Event, Todo","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":39,"deletions":0}}},{"hash":"e014ef79f5333dd33a93e7c5bfcdb05017ff46ae","messageTitle":"Removed reduncant, unused checklist method","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":30}}},{"hash":"31322c5c28d76db7a77ae8dc80da1af78c8ecad0","messageTitle":"Edited Todo Class to meet specifications of project","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"f6a01bbe9be650934523de56310f64cc9f2f18a9","messageTitle":"Added support for tracking of three types of classes, Todo, Event and Deadlines","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":22,"deletions":2}}},{"hash":"a0d05fa4b84ac66a4985904c486c658e69c64892","messageTitle":"Replaced contains method with startsWith for program correctness and flexibility","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}},{"hash":"18f224e21576cdc67cb6a5dc424bf5c2af1aa982","messageTitle":"Added three subclasess of Task; Todo, Event, Deadline","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":38,"deletions":0}}},{"hash":"288b3d958323cb514bfe88738db9fb5292b17c91","messageTitle":"removed redundant, not used checklist method(checklist functionality implemented within storeman method). replaced contains with startsWith where appropariate to ensure correctness of program when running.","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":33}}},{"hash":"25b4a838ee0f264a375661dda5ee41c15697294d","messageTitle":"Various bug fix for Level-3","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":7}}},{"hash":"ff240bceab1647a06eb2de78ad555fe4a3159b50","messageTitle":"Change to Guard clause to ensure correctness and better flexibility of program","messageBody":"","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"f86fe546b8303f3a0d1d922d8fa5d6f31431d61d","messageTitle":"Bug Fix for Event TAG attribute","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"0be8c1d874df8d0cc9606926d6add8b2c9c458e7","messageTitle":"Added support for subclasses of Task; for Todo, Event, Deadline tracking","messageBody":"","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":17,"deletions":2}}},{"hash":"71136eca431d32f30eb29e2d1eca0abdbdfa0bc5","messageTitle":"Added DukeException for throwing Duke-caused Exceptions","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":7,"deletions":0}}},{"hash":"e80eff2f0240fe00410120b715e3fc4ea9c9d5f0","messageTitle":"Added feature for storeman method to throw DukeException if input is unknown or in the wrong format, to be caught by main. Main will restart duke upon catching the exception and print the message of the error to console right before.","messageBody":"","tags":["Level-5"],"fileTypesAndContributionMap":{"java":{"insertions":22,"deletions":4}}},{"hash":"e0c1635ac668bf64f4c168a90a54c08449d7e867","messageTitle":"Support for delete added","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":0,"deletions":0},"java":{"insertions":65,"deletions":50},"bat":{"insertions":0,"deletions":21}}},{"hash":"e6d2fb3e26710eabd63e305b594677db9e2611b2","messageTitle":"updated gitignore, added test-ui-test(but to be configured to be ignored)","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":15,"deletions":0},"bat":{"insertions":22,"deletions":0}}},{"hash":"cecaaf15c0459fc4bfc0d2b3e28f5d3db6e44341","messageTitle":"removed debug statement","messageBody":"","tags":["Level-6"],"fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":1}}}]},{"date":"2022-08-18","commitResults":[{"hash":"2a3278fc7f2a0d1dd6225e4ab3371df0b70edb9b","messageTitle":"Updated input, expected and actual as well as runtest.bat to automate the process of testing","messageBody":"","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":2},"bat":{"insertions":0,"deletions":1}}}]},{"date":"2022-08-24","commitResults":[{"hash":"925dbc035d64317d06ea9be894986084410358e6","messageTitle":"Add save and load functionality to Duke and minor changes to String representation of  Task and Deadline","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":84,"deletions":11}}},{"hash":"b00830bf6140e2dcf710d353e7c3c4400bb85033","messageTitle":"Enable Duke to process inputs by users for time-related inputs to be processed as LocalDateTime for Deadline and Event task that has time-related attributes","messageBody":"Duke can only process time-related attributes (due for deadline and duration for event) as String\n\nThis limits the manipulation of these field and makes it difficult for printing the inputs in a different format.\n\nHence, we should add this functionality to improve the versality of Duke such as to enable it to print out inputs in a different format.\n","fileTypesAndContributionMap":{"java":{"insertions":27,"deletions":9}}}]},{"date":"2022-08-25","commitResults":[{"hash":"f30de1d2c0ab5d5f90ef3f842391973f704c3f81","messageTitle":"Modify toString methods of Deadline and Event","messageBody":"toString methods lacks spacing\n\nTo make it nicer, we should add the whitespace for easier readability of output\n\nHence this commit will improve readability for client\n","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}},{"hash":"ce2c78674472b981743168de1db60c4f0c576dae","messageTitle":"Remove wildcard import in favour of specific imports of classes","messageBody":"IDE reccomended wildcard import for Java.io since there were many classes from this package used in the program.\n\nWe should always avoid using wildcard imports in accordance to the Java Code Standard in CS2103T.\n\nWe have to replace the wildcard import with specific import statements for each specific packages.\n","tags":["Level-8"],"fileTypesAndContributionMap":{"java":{"insertions":5,"deletions":1}}},{"hash":"8198c1d20cacc4a139c49bed92eb7cd297690b2e","messageTitle":"Add more OOP principles","messageBody":"Currently Duke program handles all UI and storage and TaskList functionality mostly by itself.\n\nWe should add more OOP principle that makes sense to support the Java OOP paradigm as well as to improve code neatness and reusability via encapsulation and OOP Principles.\n\nHence the addition of Storage, UI and TaskList classes.\n","fileTypesAndContributionMap":{"java":{"insertions":182,"deletions":0}}},{"hash":"d1bdfa7767ad4f9e1ef04cb3fc3b7fb3127d285a","messageTitle":"Add Parser class","messageBody":"Duke class was responsible for processing client inputs and categorising the tasks into the different types for creation.\n\nIt would be better to create a class specific for this purpose, letting the Duke class mostly only call on other classes and to do minimal conditionals.\n\nThe parser class is addded to process user inputs and to categorise the commands for different Duke functionality.\n","fileTypesAndContributionMap":{"java":{"insertions":53,"deletions":0}}},{"hash":"31df34ba8c19a78795b2b997b83a5acd767ed43c","messageTitle":"Modify Duke, Storage, TaskList, Ui class to support OOP principles with the addition of Parser class.","messageBody":"Parser class requires the restructuring of some code in these utility classes as well as Duke. Some bug fixing is also done.\n\nThe modifications allow Duke class to call on these utility classes, including the Parser class to follow better OOP paradigm.\n","fileTypesAndContributionMap":{"java":{"insertions":97,"deletions":228}}},{"hash":"dd3160ce21aa7b3a29c33bd5c09140d958811173","messageTitle":"Remove some import messages.","messageBody":"Some import messages in Duke class is no longer needed.\n\nNeedless to keep these import messages, maybe inefficient and decreases readability.\n\nShould remove these messages since they are no longer needed.\n","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":7}}},{"hash":"f89577516375554f3c2a1b92db3114838a49ef53","messageTitle":"Add folders and package the classes.","messageBody":"The classes are not packaged and organised.\n\nWe need to organise our files better, into duke package, utility package and dukeexception package.\n\nHence we add package statements for each file according to where they are organised and import package statements accordingly.\n","tags":["A-Packages"],"fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":16}}},{"hash":"a69734cb53d3f28466588539c2949b7c8463d006","messageTitle":"Add basic JUnit tests for Event and Todo classes","messageBody":"No JUnit test to test correctness of classes.\n\nWe want to test the toString methods of Event and Todo classes to ensure correctness.\n\nAdded JUnit tests for the toString methods of Event and Todo classes using JUnit.\n","tags":["A-JUnit"],"fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":0}}},{"hash":"b7bf4d6916c0f1234bc6f86a42ce6170da95a008","messageTitle":"Add find functionality to Duke","messageBody":"Currently, Duke does not have functionality to find matching tasks in the TaskList when requested by client\n\nWe want to allow client to find their matching tasks when requested.\n\nAdded conditionals in Parser and methods in TaskList and Ui classes to support this functionality.\n","tags":["Level-9","A-CodingStandard"],"fileTypesAndContributionMap":{"java":{"insertions":28,"deletions":3}}}]},{"date":"2022-08-26","commitResults":[{"hash":"c2f31b8d3d4898057d170a339b3692e6f554cd9d","messageTitle":"Add task to build.gradle file to automate building of fat jar and remove method not used from Ui class.","messageBody":"askForPath is a method from the Ui class which is not used. There is no task to create a fat jar via build.gradle.\n\naskForPath affects readability and adds extra lines of unnecessary codes. We also need a task to create a fat jar via build.gradle.\n\nWe should remove askForPath method sicne it is nto used and add task to build.gradle in order to automate the creation of fat jar file.\n","tags":["A-Jar"],"fileTypesAndContributionMap":{"gradle":{"insertions":28,"deletions":0},"java":{"insertions":1,"deletions":6}}},{"hash":"8e3c4789fcfb05ddaeb452a1e2da633a25e3d4dc","messageTitle":"Remove method add from Storage class, implement add method in TaskList instead. Added Java documentation.","messageBody":"add method is in Storage class but it deals with adding tasks into the task list. There is no Java documentation.\n\nTaskList class should be handling this operaton. Java documentations should also be added for the classes.\n\nTransfer the add method to the TaskList class from the Storage class. Added Java documentation for the classes of the program.\n","tags":["Duke_releaseV0.3"],"fileTypesAndContributionMap":{"java":{"insertions":374,"deletions":40}}}]},{"date":"2022-08-30","commitResults":[{"hash":"fd27527dd6c53e567b873f459f19f9568ac4a9e5","messageTitle":"Fix code to meet Checkstyle.","messageBody":"Previously, Checkstyle was not implemented to check for coding standard violations.\n\nThere are many Checkstyle coding violations upon implementing the Checkstyle Feature via Gradle.\n\nFixed many of such violations to meet the Checkstyle coding standards.\n","tags":["A-CheckStyle"],"fileTypesAndContributionMap":{"gradle":{"insertions":5,"deletions":0},"java":{"insertions":50,"deletions":33}}}]},{"date":"2022-08-31","commitResults":[{"hash":"244af75d933e0b18ae0e3caf63e51b1772eeeeec","messageTitle":"Add incomplete Basic GUI functionality to Duke","messageBody":"Duke was a CLI application.\n\nTo make it more appealing, we should implement a basic GUI.\n\nAdded basic GUI functionality using JavaFx.\n","fileTypesAndContributionMap":{"fxml":{"insertions":35,"deletions":0},"java":{"insertions":209,"deletions":61}}},{"hash":"7587212f75960e29cf50e7180b1110e701ee0349","messageTitle":"Document classes implementing UI.","messageBody":"There was no documentation for the new classes previously.\n\nWe need documentation to explain the new classes to fellow programmers.\n\nDocumented the different classes implementing the GUI.\n","tags":["Level-10"],"fileTypesAndContributionMap":{"java":{"insertions":86,"deletions":5}}}]},{"date":"2022-09-07","commitResults":[{"hash":"14a0ab73d07145dff06cf631d25683be131f68ff","messageTitle":"Change save method into static","messageBody":"save was a non-static method of the Storage class.\n\nThe save() should be static method since it\u0027s associated to Storage class not the instance.\n\nChanged save to be static and modified code to work with this change in implementation.\n","tags":["A-FullCommitMessage"],"fileTypesAndContributionMap":{"java":{"insertions":23,"deletions":11}}},{"hash":"0eeb8322a5f9b07baf206a8102756239d592ca83","messageTitle":"Modify build.gradle","messageBody":"Build.gradle does not point to Launcher class which meant the jar file does not use javaFX.\n\nTo create a Jar file using JavaFX, we need to point to the Launcher class.\n\nModify build.gradle for javaFX implementation.\n","fileTypesAndContributionMap":{"gradle":{"insertions":2,"deletions":2}}},{"hash":"61b464b94493ff2fc48614dc17cbf70893040784","messageTitle":"Add Assert statements.","messageBody":"The program has no way of testing for errors during the runtime.\n\nAssert statements can help with this by forcing the program to terminate on bug.\n\nAdded Assert statements in some classes to check for runtime error that could have been caused by programmer error.\n","tags":["A-Assertions"],"fileTypesAndContributionMap":{"java":{"insertions":6,"deletions":1}}}]},{"date":"2022-09-08","commitResults":[{"hash":"e5945b3941996886f7904dc2e7a362711149b962","messageTitle":"Improve Code Quality","messageBody":"The Java classes have poor coding quality standards.\n\nTo improve readability, it is imperative for us to fix this.\n\nImproved readability by fixing issues such as deep nested conditionals\nand extracting methods into helper methods amongst other tweaks.\n","fileTypesAndContributionMap":{"java":{"insertions":108,"deletions":87}}},{"hash":"ac4d7b7003d2d3d57d38db451317161b06e8336c","messageTitle":"Improve Code Quality","messageBody":"The Java classes have poor coding quality standards.\n\nTo improve readability, it is imperative for us to fix this.\n\nImproved readability by fixing issues such as deep nested conditionals\nand extracting methods into helper methods amongst other tweaks.\n","tags":["A-CodeQuality"],"fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":7}}}]},{"date":"2022-09-13","commitResults":[{"hash":"fd4355d9d14c86e0580e3e383bed99def3a1eb3c","messageTitle":"Add duplicate detection feature to Duke.","messageBody":"Duplicate tasks can be added into the Duke task list.\n\nThis may be a mistake by the user and may cause confusion.\n\nAdded the methods isDuplicate to check for duplicates, modified\nthe add method and added a method into UI class to implement\nthe feature to prevent duplicate tasks when user tries to add duplicates.\n","tags":["BCD-Extension"],"fileTypesAndContributionMap":{"java":{"insertions":32,"deletions":1}}}]},{"date":"2022-09-14","commitResults":[{"hash":"18b975d16a760b355f6a8fa70d70365ef7292190","messageTitle":"Update README.md","messageBody":"","fileTypesAndContributionMap":{"md":{"insertions":21,"deletions":12}}}]}]},"authorFileTypeContributionMap":{"jwdavis0200":{"java":1107,"md":21,"fxml":35,"sh":0,"bat":0,"gradle":34,"txt":14}},"authorContributionVariance":{"jwdavis0200":30998.816},"authorDisplayNameMap":{"jwdavis0200":"CS2103T-W09-4 JOHA..AVIS"}}
