[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaij77"},"content":"/**","lastModifiedDate":"2022-08-18"},{"lineNumber":2,"author":{"gitId":"kaij77"},"content":" * The Deadline class extends the Task class as it is a more specific type of task.","lastModifiedDate":"2022-08-18"},{"lineNumber":3,"author":{"gitId":"kaij77"},"content":" */","lastModifiedDate":"2022-08-18"},{"lineNumber":4,"author":{"gitId":"kaij77"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-08-18"},{"lineNumber":5,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":6,"author":{"gitId":"kaij77"},"content":"    private String deadline;","lastModifiedDate":"2022-08-18"},{"lineNumber":7,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":8,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":9,"author":{"gitId":"kaij77"},"content":"     * Public constructor for a Deadline.","lastModifiedDate":"2022-08-18"},{"lineNumber":10,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":11,"author":{"gitId":"kaij77"},"content":"     * @param name name/description of the task.","lastModifiedDate":"2022-08-18"},{"lineNumber":12,"author":{"gitId":"kaij77"},"content":"     * @param deadline when the task is due.","lastModifiedDate":"2022-08-18"},{"lineNumber":13,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":14,"author":{"gitId":"kaij77"},"content":"    public Deadline(String name, String deadline) {","lastModifiedDate":"2022-08-18"},{"lineNumber":15,"author":{"gitId":"kaij77"},"content":"        super(name.substring(9));","lastModifiedDate":"2022-08-18"},{"lineNumber":16,"author":{"gitId":"kaij77"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2022-08-18"},{"lineNumber":17,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":18,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":19,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":20,"author":{"gitId":"kaij77"},"content":"     * Overrides the toString() method in the Task class, represents a Deadline by adding a \"[D]\" in front of the","lastModifiedDate":"2022-08-18"},{"lineNumber":21,"author":{"gitId":"kaij77"},"content":"     * general Task representation.","lastModifiedDate":"2022-08-18"},{"lineNumber":22,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":23,"author":{"gitId":"kaij77"},"content":"     * @return String representation of a Deadline.","lastModifiedDate":"2022-08-18"},{"lineNumber":24,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":25,"author":{"gitId":"kaij77"},"content":"    @Override","lastModifiedDate":"2022-08-18"},{"lineNumber":26,"author":{"gitId":"kaij77"},"content":"    public String toString() {","lastModifiedDate":"2022-08-18"},{"lineNumber":27,"author":{"gitId":"kaij77"},"content":"        return \"[D]\" + super.toString() + \" (by:\" + this.deadline + \")\";","lastModifiedDate":"2022-08-18"},{"lineNumber":28,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":29,"author":{"gitId":"kaij77"},"content":"}","lastModifiedDate":"2022-08-18"}],"authorContributionMap":{"kaij77":29}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":3,"author":{"gitId":"kaij77"},"content":"    private UI ui;","lastModifiedDate":"2022-08-18"},{"lineNumber":4,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":5,"author":{"gitId":"kaij77"},"content":"   public String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2022-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":11,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":12,"author":{"gitId":"kaij77"},"content":"     * Public constructor of Duke.","lastModifiedDate":"2022-08-18"},{"lineNumber":13,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":14,"author":{"gitId":"kaij77"},"content":"    public Duke() {","lastModifiedDate":"2022-08-18"},{"lineNumber":15,"author":{"gitId":"kaij77"},"content":"        this.ui \u003d new UI();","lastModifiedDate":"2022-08-18"},{"lineNumber":16,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":17,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":18,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":19,"author":{"gitId":"kaij77"},"content":"     * Invoke run for Duke chatbot programme.","lastModifiedDate":"2022-08-18"},{"lineNumber":20,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":21,"author":{"gitId":"kaij77"},"content":"     * @param args argument.","lastModifiedDate":"2022-08-18"},{"lineNumber":22,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-08-18"},{"lineNumber":24,"author":{"gitId":"kaij77"},"content":"        new Duke().run();","lastModifiedDate":"2022-08-18"},{"lineNumber":25,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":26,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":27,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":28,"author":{"gitId":"kaij77"},"content":"     * Run Duke programme depending on the different inputs/commands","lastModifiedDate":"2022-08-18"},{"lineNumber":29,"author":{"gitId":"kaij77"},"content":"     * given by user.","lastModifiedDate":"2022-08-18"},{"lineNumber":30,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":31,"author":{"gitId":"kaij77"},"content":"    public void run() {","lastModifiedDate":"2022-08-18"},{"lineNumber":32,"author":{"gitId":"kaij77"},"content":"        System.out.println(logo + \"\\n\" + ui.greet());","lastModifiedDate":"2022-08-18"},{"lineNumber":33,"author":{"gitId":"kaij77"},"content":"        boolean stillRunning \u003d true;","lastModifiedDate":"2022-08-18"},{"lineNumber":34,"author":{"gitId":"kaij77"},"content":"        while (stillRunning) {","lastModifiedDate":"2022-08-18"},{"lineNumber":35,"author":{"gitId":"kaij77"},"content":"            try {","lastModifiedDate":"2022-08-18"},{"lineNumber":36,"author":{"gitId":"kaij77"},"content":"                String input \u003d ui.getInput();","lastModifiedDate":"2022-08-18"},{"lineNumber":37,"author":{"gitId":"kaij77"},"content":"                if (input.equals(\"bye\")) {","lastModifiedDate":"2022-08-18"},{"lineNumber":38,"author":{"gitId":"kaij77"},"content":"                    System.out.println(ui.bye());","lastModifiedDate":"2022-08-18"},{"lineNumber":39,"author":{"gitId":"kaij77"},"content":"                    stillRunning \u003d false;","lastModifiedDate":"2022-08-18"},{"lineNumber":40,"author":{"gitId":"kaij77"},"content":"                } else if (input.equals(\"list\")) {","lastModifiedDate":"2022-08-18"},{"lineNumber":41,"author":{"gitId":"kaij77"},"content":"                    System.out.println(ui.list());","lastModifiedDate":"2022-08-18"},{"lineNumber":42,"author":{"gitId":"kaij77"},"content":"                } else if (input.startsWith(\"mark\") || input.startsWith(\"unmark\")) {","lastModifiedDate":"2022-08-18"},{"lineNumber":43,"author":{"gitId":"kaij77"},"content":"                    System.out.println(ui.editTask(input));","lastModifiedDate":"2022-08-18"},{"lineNumber":44,"author":{"gitId":"kaij77"},"content":"                } else if (input.startsWith(\"todo \") || input.startsWith(\"event \") || input.startsWith(\"deadline \")){","lastModifiedDate":"2022-08-18"},{"lineNumber":45,"author":{"gitId":"kaij77"},"content":"                    System.out.println(ui.addTask(input));","lastModifiedDate":"2022-08-18"},{"lineNumber":46,"author":{"gitId":"kaij77"},"content":"                } else if (input.startsWith(\"delete\")) {","lastModifiedDate":"2022-08-18"},{"lineNumber":47,"author":{"gitId":"kaij77"},"content":"                    System.out.println(ui.deleteTask(input));","lastModifiedDate":"2022-08-18"},{"lineNumber":48,"author":{"gitId":"kaij77"},"content":"                }else {","lastModifiedDate":"2022-08-18"},{"lineNumber":49,"author":{"gitId":"kaij77"},"content":"                    throw new DukeInvalidInputException();","lastModifiedDate":"2022-08-18"},{"lineNumber":50,"author":{"gitId":"kaij77"},"content":"                }","lastModifiedDate":"2022-08-18"},{"lineNumber":51,"author":{"gitId":"kaij77"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-08-18"},{"lineNumber":52,"author":{"gitId":"kaij77"},"content":"                System.out.println(ui.getDukeErrorMessage(e));","lastModifiedDate":"2022-08-18"},{"lineNumber":53,"author":{"gitId":"kaij77"},"content":"            }","lastModifiedDate":"2022-08-18"},{"lineNumber":54,"author":{"gitId":"kaij77"},"content":"        }","lastModifiedDate":"2022-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"kaij77":48,"-":8}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaij77"},"content":"/**","lastModifiedDate":"2022-08-18"},{"lineNumber":2,"author":{"gitId":"kaij77"},"content":" * A DukeException is thrown if there is any error related to Duke the chatbot.","lastModifiedDate":"2022-08-18"},{"lineNumber":3,"author":{"gitId":"kaij77"},"content":" */","lastModifiedDate":"2022-08-18"},{"lineNumber":4,"author":{"gitId":"kaij77"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-08-18"},{"lineNumber":5,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":6,"author":{"gitId":"kaij77"},"content":"     * Public constructor for a DukeException.","lastModifiedDate":"2022-08-18"},{"lineNumber":7,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":8,"author":{"gitId":"kaij77"},"content":"     * @param message the message to be printed when a DukeException is thrown and caught.","lastModifiedDate":"2022-08-18"},{"lineNumber":9,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":10,"author":{"gitId":"kaij77"},"content":"    public DukeException(String message) {","lastModifiedDate":"2022-08-18"},{"lineNumber":11,"author":{"gitId":"kaij77"},"content":"        super(message);","lastModifiedDate":"2022-08-18"},{"lineNumber":12,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":13,"author":{"gitId":"kaij77"},"content":"}","lastModifiedDate":"2022-08-18"}],"authorContributionMap":{"kaij77":13}},{"path":"src/main/java/DukeInvalidDeletionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaij77"},"content":"/**","lastModifiedDate":"2022-08-18"},{"lineNumber":2,"author":{"gitId":"kaij77"},"content":" * A DukeInvalidDeletionException is thrown if the user tries to delete a task that doesn\u0027t exist, or if the user","lastModifiedDate":"2022-08-18"},{"lineNumber":3,"author":{"gitId":"kaij77"},"content":" * tries to perform a deletion on an empty task list.","lastModifiedDate":"2022-08-18"},{"lineNumber":4,"author":{"gitId":"kaij77"},"content":" */","lastModifiedDate":"2022-08-18"},{"lineNumber":5,"author":{"gitId":"kaij77"},"content":"public class DukeInvalidDeletionException extends DukeException {","lastModifiedDate":"2022-08-18"},{"lineNumber":6,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":7,"author":{"gitId":"kaij77"},"content":"     * Public constructor for a DukeInvalidDeletionException.","lastModifiedDate":"2022-08-18"},{"lineNumber":8,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":9,"author":{"gitId":"kaij77"},"content":"     * @param message the message to be printed when a DukeInvalidDeletionException is thrown and caught.","lastModifiedDate":"2022-08-18"},{"lineNumber":10,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":11,"author":{"gitId":"kaij77"},"content":"    public DukeInvalidDeletionException(String message) {","lastModifiedDate":"2022-08-18"},{"lineNumber":12,"author":{"gitId":"kaij77"},"content":"        super(message);","lastModifiedDate":"2022-08-18"},{"lineNumber":13,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":14,"author":{"gitId":"kaij77"},"content":"}","lastModifiedDate":"2022-08-18"}],"authorContributionMap":{"kaij77":14}},{"path":"src/main/java/DukeInvalidDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaij77"},"content":"/**","lastModifiedDate":"2022-08-19"},{"lineNumber":2,"author":{"gitId":"kaij77"},"content":" * A DukeInvalidDescriptionException is thrown if the user tries to add a task without giving it either a name or","lastModifiedDate":"2022-08-19"},{"lineNumber":3,"author":{"gitId":"kaij77"},"content":" * description, or if no due date or time is given for Events and Deadlines.","lastModifiedDate":"2022-08-19"},{"lineNumber":4,"author":{"gitId":"kaij77"},"content":" */","lastModifiedDate":"2022-08-19"},{"lineNumber":5,"author":{"gitId":"kaij77"},"content":"public class DukeInvalidDescriptionException extends DukeException {","lastModifiedDate":"2022-08-19"},{"lineNumber":6,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-19"},{"lineNumber":7,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-19"},{"lineNumber":8,"author":{"gitId":"kaij77"},"content":"     * Public constructor for a DukeEmptyDescriptionException.","lastModifiedDate":"2022-08-19"},{"lineNumber":9,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-19"},{"lineNumber":10,"author":{"gitId":"kaij77"},"content":"     * @param message the message to be printed when a DukeInvalidDescriptionException is thrown and caught.","lastModifiedDate":"2022-08-19"},{"lineNumber":11,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-19"},{"lineNumber":12,"author":{"gitId":"kaij77"},"content":"    public DukeInvalidDescriptionException(String message) {","lastModifiedDate":"2022-08-19"},{"lineNumber":13,"author":{"gitId":"kaij77"},"content":"        super(message);","lastModifiedDate":"2022-08-19"},{"lineNumber":14,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-19"},{"lineNumber":15,"author":{"gitId":"kaij77"},"content":"}","lastModifiedDate":"2022-08-19"}],"authorContributionMap":{"kaij77":15}},{"path":"src/main/java/DukeInvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaij77"},"content":"/**","lastModifiedDate":"2022-08-18"},{"lineNumber":2,"author":{"gitId":"kaij77"},"content":" * A DukeInvalidInputException is thrown if the user gives an unknown input/command.","lastModifiedDate":"2022-08-18"},{"lineNumber":3,"author":{"gitId":"kaij77"},"content":" */","lastModifiedDate":"2022-08-18"},{"lineNumber":4,"author":{"gitId":"kaij77"},"content":"public class DukeInvalidInputException extends DukeException {","lastModifiedDate":"2022-08-18"},{"lineNumber":5,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":6,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":7,"author":{"gitId":"kaij77"},"content":"     * Public constructor for a DukeInvalidInputException which will print the standardized message when thrown and","lastModifiedDate":"2022-08-18"},{"lineNumber":8,"author":{"gitId":"kaij77"},"content":"     * caught.","lastModifiedDate":"2022-08-18"},{"lineNumber":9,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":10,"author":{"gitId":"kaij77"},"content":"    public DukeInvalidInputException() {","lastModifiedDate":"2022-08-18"},{"lineNumber":11,"author":{"gitId":"kaij77"},"content":"        super(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means D:\");","lastModifiedDate":"2022-08-18"},{"lineNumber":12,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":13,"author":{"gitId":"kaij77"},"content":"}","lastModifiedDate":"2022-08-18"}],"authorContributionMap":{"kaij77":13}},{"path":"src/main/java/DukeMarkException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaij77"},"content":"/**","lastModifiedDate":"2022-08-18"},{"lineNumber":2,"author":{"gitId":"kaij77"},"content":" * A DukeMarkException is thrown if the user tries to mark an already marked task, or if they try to un-mark a task","lastModifiedDate":"2022-08-18"},{"lineNumber":3,"author":{"gitId":"kaij77"},"content":" * that is already un-marked.","lastModifiedDate":"2022-08-18"},{"lineNumber":4,"author":{"gitId":"kaij77"},"content":" */","lastModifiedDate":"2022-08-18"},{"lineNumber":5,"author":{"gitId":"kaij77"},"content":"public class DukeMarkException extends DukeException {","lastModifiedDate":"2022-08-18"},{"lineNumber":6,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":7,"author":{"gitId":"kaij77"},"content":"     * Public constructor for a DukeMarkException.","lastModifiedDate":"2022-08-18"},{"lineNumber":8,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":9,"author":{"gitId":"kaij77"},"content":"     * @param message the message to be printed when a DukeMarkException is thrown and caught.","lastModifiedDate":"2022-08-18"},{"lineNumber":10,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":11,"author":{"gitId":"kaij77"},"content":"    public DukeMarkException(String message) {","lastModifiedDate":"2022-08-18"},{"lineNumber":12,"author":{"gitId":"kaij77"},"content":"        super(message);","lastModifiedDate":"2022-08-18"},{"lineNumber":13,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":14,"author":{"gitId":"kaij77"},"content":"}","lastModifiedDate":"2022-08-18"}],"authorContributionMap":{"kaij77":14}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaij77"},"content":"/**","lastModifiedDate":"2022-08-18"},{"lineNumber":2,"author":{"gitId":"kaij77"},"content":" * The Deadline class extends the Task class as it is a more specific type of task.","lastModifiedDate":"2022-08-18"},{"lineNumber":3,"author":{"gitId":"kaij77"},"content":" */","lastModifiedDate":"2022-08-18"},{"lineNumber":4,"author":{"gitId":"kaij77"},"content":"public class Event extends Task {","lastModifiedDate":"2022-08-18"},{"lineNumber":5,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":6,"author":{"gitId":"kaij77"},"content":"    private String dateTime;","lastModifiedDate":"2022-08-18"},{"lineNumber":7,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":8,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":9,"author":{"gitId":"kaij77"},"content":"     * Public constructor for an Event.","lastModifiedDate":"2022-08-18"},{"lineNumber":10,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":11,"author":{"gitId":"kaij77"},"content":"     * @param name name/description of the task.","lastModifiedDate":"2022-08-18"},{"lineNumber":12,"author":{"gitId":"kaij77"},"content":"     * @param dateTime when the Event is occurring.","lastModifiedDate":"2022-08-18"},{"lineNumber":13,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":14,"author":{"gitId":"kaij77"},"content":"    public Event(String name, String dateTime) {","lastModifiedDate":"2022-08-18"},{"lineNumber":15,"author":{"gitId":"kaij77"},"content":"        super(name.substring(6));","lastModifiedDate":"2022-08-18"},{"lineNumber":16,"author":{"gitId":"kaij77"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2022-08-18"},{"lineNumber":17,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":18,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":19,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":20,"author":{"gitId":"kaij77"},"content":"     * Overrides the toString() method in the Task class, represents an Event by adding a \"[E]\" in front of the","lastModifiedDate":"2022-08-18"},{"lineNumber":21,"author":{"gitId":"kaij77"},"content":"     * general Task representation.","lastModifiedDate":"2022-08-18"},{"lineNumber":22,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":23,"author":{"gitId":"kaij77"},"content":"     * @return String representation of an Event.","lastModifiedDate":"2022-08-18"},{"lineNumber":24,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":25,"author":{"gitId":"kaij77"},"content":"    @Override","lastModifiedDate":"2022-08-18"},{"lineNumber":26,"author":{"gitId":"kaij77"},"content":"    public String toString() {","lastModifiedDate":"2022-08-18"},{"lineNumber":27,"author":{"gitId":"kaij77"},"content":"        return \"[E]\" + super.toString() + \" (at:\" + this.dateTime + \")\";","lastModifiedDate":"2022-08-18"},{"lineNumber":28,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":29,"author":{"gitId":"kaij77"},"content":"}","lastModifiedDate":"2022-08-18"}],"authorContributionMap":{"kaij77":29}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaij77"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-18"},{"lineNumber":2,"author":{"gitId":"kaij77"},"content":"import java.util.List;","lastModifiedDate":"2022-08-18"},{"lineNumber":3,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":4,"author":{"gitId":"kaij77"},"content":"public class Task {","lastModifiedDate":"2022-08-18"},{"lineNumber":5,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":6,"author":{"gitId":"kaij77"},"content":"    private String name;","lastModifiedDate":"2022-08-18"},{"lineNumber":7,"author":{"gitId":"kaij77"},"content":"    private boolean isDone;","lastModifiedDate":"2022-08-18"},{"lineNumber":8,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":9,"author":{"gitId":"kaij77"},"content":"    public Task(String name) {","lastModifiedDate":"2022-08-18"},{"lineNumber":10,"author":{"gitId":"kaij77"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-08-18"},{"lineNumber":11,"author":{"gitId":"kaij77"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-18"},{"lineNumber":12,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":13,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":14,"author":{"gitId":"kaij77"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2022-08-18"},{"lineNumber":15,"author":{"gitId":"kaij77"},"content":"        return isDone;","lastModifiedDate":"2022-08-18"},{"lineNumber":16,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":17,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":18,"author":{"gitId":"kaij77"},"content":"    public void mark() {","lastModifiedDate":"2022-08-18"},{"lineNumber":19,"author":{"gitId":"kaij77"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-08-18"},{"lineNumber":20,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":21,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":22,"author":{"gitId":"kaij77"},"content":"    public void unmark() {","lastModifiedDate":"2022-08-18"},{"lineNumber":23,"author":{"gitId":"kaij77"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-18"},{"lineNumber":24,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":25,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":26,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":27,"author":{"gitId":"kaij77"},"content":"     * Override the toString() method in the Object class. \"[X]\" is added in front of the task name if it is marked","lastModifiedDate":"2022-08-18"},{"lineNumber":28,"author":{"gitId":"kaij77"},"content":"     * as done, and \"[ ]\" is added in front otherwise.","lastModifiedDate":"2022-08-18"},{"lineNumber":29,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":30,"author":{"gitId":"kaij77"},"content":"     * @return String representation of a task.","lastModifiedDate":"2022-08-18"},{"lineNumber":31,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":32,"author":{"gitId":"kaij77"},"content":"    @Override","lastModifiedDate":"2022-08-18"},{"lineNumber":33,"author":{"gitId":"kaij77"},"content":"    public String toString() {","lastModifiedDate":"2022-08-18"},{"lineNumber":34,"author":{"gitId":"kaij77"},"content":"        if (this.isDone) {","lastModifiedDate":"2022-08-18"},{"lineNumber":35,"author":{"gitId":"kaij77"},"content":"            return \"[X] \" + this.name;","lastModifiedDate":"2022-08-18"},{"lineNumber":36,"author":{"gitId":"kaij77"},"content":"        } else {","lastModifiedDate":"2022-08-18"},{"lineNumber":37,"author":{"gitId":"kaij77"},"content":"            return \"[ ] \" + this.name;","lastModifiedDate":"2022-08-18"},{"lineNumber":38,"author":{"gitId":"kaij77"},"content":"        }","lastModifiedDate":"2022-08-18"},{"lineNumber":39,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":40,"author":{"gitId":"kaij77"},"content":"}","lastModifiedDate":"2022-08-18"}],"authorContributionMap":{"kaij77":40}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaij77"},"content":"/**","lastModifiedDate":"2022-08-18"},{"lineNumber":2,"author":{"gitId":"kaij77"},"content":" * The ToDo class extends the Task class as it is a more specific type of task.","lastModifiedDate":"2022-08-18"},{"lineNumber":3,"author":{"gitId":"kaij77"},"content":" */","lastModifiedDate":"2022-08-18"},{"lineNumber":4,"author":{"gitId":"kaij77"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-08-18"},{"lineNumber":5,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":6,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":7,"author":{"gitId":"kaij77"},"content":"     * Public constructor of a ToDo class.","lastModifiedDate":"2022-08-18"},{"lineNumber":8,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":9,"author":{"gitId":"kaij77"},"content":"     * @param name the name/description of the class.","lastModifiedDate":"2022-08-18"},{"lineNumber":10,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":11,"author":{"gitId":"kaij77"},"content":"    public ToDo(String name) {","lastModifiedDate":"2022-08-18"},{"lineNumber":12,"author":{"gitId":"kaij77"},"content":"        super(name);","lastModifiedDate":"2022-08-18"},{"lineNumber":13,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":14,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":15,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":16,"author":{"gitId":"kaij77"},"content":"     * Overrides the toString() method in the Task class, represents a ToDo by adding a \"[T]\" in front of the general","lastModifiedDate":"2022-08-18"},{"lineNumber":17,"author":{"gitId":"kaij77"},"content":"     * Task representation.","lastModifiedDate":"2022-08-18"},{"lineNumber":18,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":19,"author":{"gitId":"kaij77"},"content":"     * @return String representation of a ToDo.","lastModifiedDate":"2022-08-18"},{"lineNumber":20,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":21,"author":{"gitId":"kaij77"},"content":"    @Override","lastModifiedDate":"2022-08-18"},{"lineNumber":22,"author":{"gitId":"kaij77"},"content":"    public String toString() {","lastModifiedDate":"2022-08-18"},{"lineNumber":23,"author":{"gitId":"kaij77"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-08-18"},{"lineNumber":24,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":25,"author":{"gitId":"kaij77"},"content":"}","lastModifiedDate":"2022-08-18"}],"authorContributionMap":{"kaij77":25}},{"path":"src/main/java/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaij77"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-18"},{"lineNumber":2,"author":{"gitId":"kaij77"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-18"},{"lineNumber":3,"author":{"gitId":"kaij77"},"content":"import java.util.List;","lastModifiedDate":"2022-08-18"},{"lineNumber":4,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":5,"author":{"gitId":"kaij77"},"content":"public class UI {","lastModifiedDate":"2022-08-18"},{"lineNumber":6,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":7,"author":{"gitId":"kaij77"},"content":"    private Scanner sc;","lastModifiedDate":"2022-08-18"},{"lineNumber":8,"author":{"gitId":"kaij77"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2022-08-18"},{"lineNumber":9,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":10,"author":{"gitId":"kaij77"},"content":"    private static String initGreeting \u003d \"Hello! I\u0027m Duke \\nWhat can I do for you?\";","lastModifiedDate":"2022-08-19"},{"lineNumber":11,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":12,"author":{"gitId":"kaij77"},"content":"    public UI() {","lastModifiedDate":"2022-08-18"},{"lineNumber":13,"author":{"gitId":"kaij77"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2022-08-18"},{"lineNumber":14,"author":{"gitId":"kaij77"},"content":"        this.taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-08-18"},{"lineNumber":15,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":16,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":17,"author":{"gitId":"kaij77"},"content":"    public String greet() {","lastModifiedDate":"2022-08-18"},{"lineNumber":18,"author":{"gitId":"kaij77"},"content":"        return initGreeting;","lastModifiedDate":"2022-08-18"},{"lineNumber":19,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":20,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":21,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":22,"author":{"gitId":"kaij77"},"content":"     * Returns the current task list if it is not empty, prints an alternative message if otherwise.","lastModifiedDate":"2022-08-18"},{"lineNumber":23,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":24,"author":{"gitId":"kaij77"},"content":"     * @return String which content depends on whether the current task list is empty","lastModifiedDate":"2022-08-18"},{"lineNumber":25,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":26,"author":{"gitId":"kaij77"},"content":"    public String list() {","lastModifiedDate":"2022-08-18"},{"lineNumber":27,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":28,"author":{"gitId":"kaij77"},"content":"        if (this.taskList.isEmpty()) {","lastModifiedDate":"2022-08-18"},{"lineNumber":29,"author":{"gitId":"kaij77"},"content":"            return \"No tasks as of now :)\";","lastModifiedDate":"2022-08-18"},{"lineNumber":30,"author":{"gitId":"kaij77"},"content":"        } else {","lastModifiedDate":"2022-08-18"},{"lineNumber":31,"author":{"gitId":"kaij77"},"content":"            String temp \u003d \"\";","lastModifiedDate":"2022-08-18"},{"lineNumber":32,"author":{"gitId":"kaij77"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2022-08-18"},{"lineNumber":33,"author":{"gitId":"kaij77"},"content":"                int curr \u003d i + 1;","lastModifiedDate":"2022-08-18"},{"lineNumber":34,"author":{"gitId":"kaij77"},"content":"                temp \u003d temp + curr + \": \" + taskList.get(i).toString() + \"\\n\";","lastModifiedDate":"2022-08-18"},{"lineNumber":35,"author":{"gitId":"kaij77"},"content":"            }","lastModifiedDate":"2022-08-18"},{"lineNumber":36,"author":{"gitId":"kaij77"},"content":"            return \"Here are the tasks in your list:\\n\"","lastModifiedDate":"2022-08-18"},{"lineNumber":37,"author":{"gitId":"kaij77"},"content":"                   + temp;","lastModifiedDate":"2022-08-18"},{"lineNumber":38,"author":{"gitId":"kaij77"},"content":"        }","lastModifiedDate":"2022-08-18"},{"lineNumber":39,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":40,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":41,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":42,"author":{"gitId":"kaij77"},"content":"     * Returns a farewell message before Duke closes.","lastModifiedDate":"2022-08-18"},{"lineNumber":43,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":44,"author":{"gitId":"kaij77"},"content":"     * @return String containing the farewell message","lastModifiedDate":"2022-08-18"},{"lineNumber":45,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":46,"author":{"gitId":"kaij77"},"content":"    public String bye() {","lastModifiedDate":"2022-08-18"},{"lineNumber":47,"author":{"gitId":"kaij77"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2022-08-18"},{"lineNumber":48,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":49,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":50,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":51,"author":{"gitId":"kaij77"},"content":"     * Adds the given task to the current task list.","lastModifiedDate":"2022-08-18"},{"lineNumber":52,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":53,"author":{"gitId":"kaij77"},"content":"     * @param str String input specifying the type of task and its description.","lastModifiedDate":"2022-08-18"},{"lineNumber":54,"author":{"gitId":"kaij77"},"content":"     * @return String telling the user what task was added and the number of current tasks.","lastModifiedDate":"2022-08-18"},{"lineNumber":55,"author":{"gitId":"kaij77"},"content":"     * @throws DukeInvalidDescriptionException if the description of the given is empty.","lastModifiedDate":"2022-08-19"},{"lineNumber":56,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":57,"author":{"gitId":"kaij77"},"content":"    public String addTask(String str) throws DukeInvalidDescriptionException {","lastModifiedDate":"2022-08-19"},{"lineNumber":58,"author":{"gitId":"kaij77"},"content":"        if (str.startsWith(\"todo\")) {","lastModifiedDate":"2022-08-18"},{"lineNumber":59,"author":{"gitId":"kaij77"},"content":"            if (str.length() \u003d\u003d 4 || str.length() \u003d\u003d 5) {","lastModifiedDate":"2022-08-18"},{"lineNumber":60,"author":{"gitId":"kaij77"},"content":"                throw new DukeInvalidDescriptionException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2022-08-19"},{"lineNumber":61,"author":{"gitId":"kaij77"},"content":"            }","lastModifiedDate":"2022-08-18"},{"lineNumber":62,"author":{"gitId":"kaij77"},"content":"            ToDo todo \u003d new ToDo(str.substring(5));","lastModifiedDate":"2022-08-18"},{"lineNumber":63,"author":{"gitId":"kaij77"},"content":"            taskList.add(todo);","lastModifiedDate":"2022-08-18"},{"lineNumber":64,"author":{"gitId":"kaij77"},"content":"            return \"Got it. I\u0027ve added this task:\\n\" + todo.toString() + \"\\n\"","lastModifiedDate":"2022-08-18"},{"lineNumber":65,"author":{"gitId":"kaij77"},"content":"                    + String.format(\"There are %d task(s) in the list\", taskList.size());","lastModifiedDate":"2022-08-18"},{"lineNumber":66,"author":{"gitId":"kaij77"},"content":"        } else if (str.startsWith(\"event\")) {","lastModifiedDate":"2022-08-18"},{"lineNumber":67,"author":{"gitId":"kaij77"},"content":"            String[] arrOfStrings \u003d str.split(\"/at\", 2);","lastModifiedDate":"2022-08-18"},{"lineNumber":68,"author":{"gitId":"kaij77"},"content":"                if (arrOfStrings[0].length() \u003d\u003d 5 || arrOfStrings[0].length() \u003d\u003d 6 || !str.contains(\"/at\")) {","lastModifiedDate":"2022-08-19"},{"lineNumber":69,"author":{"gitId":"kaij77"},"content":"                    throw new DukeInvalidDescriptionException(\"☹ OOPS!!! The description you provided is invalid! \" +","lastModifiedDate":"2022-08-19"},{"lineNumber":70,"author":{"gitId":"kaij77"},"content":"                            \"Did you add both the description and time/date of this Event?\");","lastModifiedDate":"2022-08-19"},{"lineNumber":71,"author":{"gitId":"kaij77"},"content":"                }","lastModifiedDate":"2022-08-18"},{"lineNumber":72,"author":{"gitId":"kaij77"},"content":"                Event event \u003d new Event(arrOfStrings[0], arrOfStrings[1]);","lastModifiedDate":"2022-08-18"},{"lineNumber":73,"author":{"gitId":"kaij77"},"content":"                taskList.add(event);","lastModifiedDate":"2022-08-18"},{"lineNumber":74,"author":{"gitId":"kaij77"},"content":"                return \"Got it. I\u0027ve added this task:\\n\" + event.toString() + \"\\n\"","lastModifiedDate":"2022-08-18"},{"lineNumber":75,"author":{"gitId":"kaij77"},"content":"                        + String.format(\"There are %d task(s) in the list\", taskList.size());","lastModifiedDate":"2022-08-18"},{"lineNumber":76,"author":{"gitId":"kaij77"},"content":"        } else {","lastModifiedDate":"2022-08-18"},{"lineNumber":77,"author":{"gitId":"kaij77"},"content":"            String[] arrOfStrings \u003d str.split(\"/by\", 2);","lastModifiedDate":"2022-08-18"},{"lineNumber":78,"author":{"gitId":"kaij77"},"content":"                if (arrOfStrings[0].length() \u003d\u003d 8 || arrOfStrings[0].length() \u003d\u003d 9 || !str.contains(\"/by\")) {","lastModifiedDate":"2022-08-19"},{"lineNumber":79,"author":{"gitId":"kaij77"},"content":"                    throw new DukeInvalidDescriptionException(\"☹ OOPS!!! The description you provided is invalid! \"","lastModifiedDate":"2022-08-19"},{"lineNumber":80,"author":{"gitId":"kaij77"},"content":"                            + \"Did you add both the description and due time/date of this deadline?\");","lastModifiedDate":"2022-08-19"},{"lineNumber":81,"author":{"gitId":"kaij77"},"content":"                }","lastModifiedDate":"2022-08-18"},{"lineNumber":82,"author":{"gitId":"kaij77"},"content":"                Deadline deadline \u003d new Deadline(arrOfStrings[0], arrOfStrings[1]);","lastModifiedDate":"2022-08-18"},{"lineNumber":83,"author":{"gitId":"kaij77"},"content":"                taskList.add(deadline);","lastModifiedDate":"2022-08-18"},{"lineNumber":84,"author":{"gitId":"kaij77"},"content":"                return \"Got it. I\u0027ve added this task:\\n\" + deadline.toString() + \"\\n\"","lastModifiedDate":"2022-08-18"},{"lineNumber":85,"author":{"gitId":"kaij77"},"content":"                        + String.format(\"There are %d task(s) in the list\", taskList.size());","lastModifiedDate":"2022-08-18"},{"lineNumber":86,"author":{"gitId":"kaij77"},"content":"        }","lastModifiedDate":"2022-08-18"},{"lineNumber":87,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":88,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":89,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":90,"author":{"gitId":"kaij77"},"content":"     * Marks the task with the given ID in the current task list as done.","lastModifiedDate":"2022-08-18"},{"lineNumber":91,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":92,"author":{"gitId":"kaij77"},"content":"     * @param id the ID of the target task in the current task list.","lastModifiedDate":"2022-08-18"},{"lineNumber":93,"author":{"gitId":"kaij77"},"content":"     * @return String confirming the marking of the specified task.","lastModifiedDate":"2022-08-18"},{"lineNumber":94,"author":{"gitId":"kaij77"},"content":"     * @throws DukeMarkException if the task has already been marked as done.","lastModifiedDate":"2022-08-18"},{"lineNumber":95,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":96,"author":{"gitId":"kaij77"},"content":"    public String markTask(int id) throws DukeMarkException {","lastModifiedDate":"2022-08-18"},{"lineNumber":97,"author":{"gitId":"kaij77"},"content":"        Task curr \u003d taskList.get(id - 1);","lastModifiedDate":"2022-08-18"},{"lineNumber":98,"author":{"gitId":"kaij77"},"content":"        if (curr.getIsDone()) {","lastModifiedDate":"2022-08-18"},{"lineNumber":99,"author":{"gitId":"kaij77"},"content":"            throw new DukeMarkException(\"☹ OOPS!!! can\u0027t mark as this task has already been done...\");","lastModifiedDate":"2022-08-18"},{"lineNumber":100,"author":{"gitId":"kaij77"},"content":"        }","lastModifiedDate":"2022-08-18"},{"lineNumber":101,"author":{"gitId":"kaij77"},"content":"        curr.mark();","lastModifiedDate":"2022-08-18"},{"lineNumber":102,"author":{"gitId":"kaij77"},"content":"        return \"Nice! I\u0027ve marked this task as done: \\n\"","lastModifiedDate":"2022-08-18"},{"lineNumber":103,"author":{"gitId":"kaij77"},"content":"                + curr.toString();","lastModifiedDate":"2022-08-18"},{"lineNumber":104,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":105,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":106,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":107,"author":{"gitId":"kaij77"},"content":"     * Un-marks the task with the given ID in the current task list as done.","lastModifiedDate":"2022-08-18"},{"lineNumber":108,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":109,"author":{"gitId":"kaij77"},"content":"     * @param id the ID of the target task in the current task list.","lastModifiedDate":"2022-08-18"},{"lineNumber":110,"author":{"gitId":"kaij77"},"content":"     * @return String confirming the un-marking of the specified task.","lastModifiedDate":"2022-08-18"},{"lineNumber":111,"author":{"gitId":"kaij77"},"content":"     * @throws DukeMarkException if the task has not been marked as done (already un-marked).","lastModifiedDate":"2022-08-18"},{"lineNumber":112,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":113,"author":{"gitId":"kaij77"},"content":"    public String unmarkTask(int id) throws DukeMarkException {","lastModifiedDate":"2022-08-18"},{"lineNumber":114,"author":{"gitId":"kaij77"},"content":"        Task curr \u003d taskList.get(id - 1);","lastModifiedDate":"2022-08-18"},{"lineNumber":115,"author":{"gitId":"kaij77"},"content":"        if (!curr.getIsDone()) {","lastModifiedDate":"2022-08-18"},{"lineNumber":116,"author":{"gitId":"kaij77"},"content":"            throw new DukeMarkException(\"☹ OOPS!!! can\u0027t unmark as this task has not been done yet...\");","lastModifiedDate":"2022-08-18"},{"lineNumber":117,"author":{"gitId":"kaij77"},"content":"        }","lastModifiedDate":"2022-08-18"},{"lineNumber":118,"author":{"gitId":"kaij77"},"content":"        curr.unmark();","lastModifiedDate":"2022-08-18"},{"lineNumber":119,"author":{"gitId":"kaij77"},"content":"        return \"OK, I\u0027ve marked this task as not done yet: \\n\"","lastModifiedDate":"2022-08-18"},{"lineNumber":120,"author":{"gitId":"kaij77"},"content":"                + curr.toString();","lastModifiedDate":"2022-08-18"},{"lineNumber":121,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":122,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":123,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":124,"author":{"gitId":"kaij77"},"content":"     * Marks or un-marks the specified task depending on the command given by the user.","lastModifiedDate":"2022-08-18"},{"lineNumber":125,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":126,"author":{"gitId":"kaij77"},"content":"     * @param str the command/input given by the user","lastModifiedDate":"2022-08-18"},{"lineNumber":127,"author":{"gitId":"kaij77"},"content":"     * @return String confirming the marking or un-marking of the specified task.","lastModifiedDate":"2022-08-18"},{"lineNumber":128,"author":{"gitId":"kaij77"},"content":"     * @throws DukeMarkException if the task has not been marked as done (already un-marked).","lastModifiedDate":"2022-08-18"},{"lineNumber":129,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":130,"author":{"gitId":"kaij77"},"content":"    public String editTask(String str) throws DukeMarkException {","lastModifiedDate":"2022-08-18"},{"lineNumber":131,"author":{"gitId":"kaij77"},"content":"        if (str.startsWith(\"mark\")) {","lastModifiedDate":"2022-08-18"},{"lineNumber":132,"author":{"gitId":"kaij77"},"content":"            int taskId \u003d Integer.parseInt(str.substring(5));","lastModifiedDate":"2022-08-18"},{"lineNumber":133,"author":{"gitId":"kaij77"},"content":"            return markTask(taskId);","lastModifiedDate":"2022-08-18"},{"lineNumber":134,"author":{"gitId":"kaij77"},"content":"        } else if (str.startsWith(\"unmark\")) {","lastModifiedDate":"2022-08-18"},{"lineNumber":135,"author":{"gitId":"kaij77"},"content":"            int taskId \u003d Integer.parseInt(str.substring(7));","lastModifiedDate":"2022-08-18"},{"lineNumber":136,"author":{"gitId":"kaij77"},"content":"            return unmarkTask(taskId);","lastModifiedDate":"2022-08-18"},{"lineNumber":137,"author":{"gitId":"kaij77"},"content":"        }","lastModifiedDate":"2022-08-18"},{"lineNumber":138,"author":{"gitId":"kaij77"},"content":"        return \"\";","lastModifiedDate":"2022-08-18"},{"lineNumber":139,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":140,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":141,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":142,"author":{"gitId":"kaij77"},"content":"     * Deletes the task, specified in the user input, from the current task list.","lastModifiedDate":"2022-08-18"},{"lineNumber":143,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":144,"author":{"gitId":"kaij77"},"content":"     * @param str the command/input given by the user","lastModifiedDate":"2022-08-18"},{"lineNumber":145,"author":{"gitId":"kaij77"},"content":"     * @return String confirming the deletion of the specified task.","lastModifiedDate":"2022-08-18"},{"lineNumber":146,"author":{"gitId":"kaij77"},"content":"     * @throws DukeInvalidDeletionException if the current task list is already empty, or if the specified task does","lastModifiedDate":"2022-08-18"},{"lineNumber":147,"author":{"gitId":"kaij77"},"content":"     * not exist.","lastModifiedDate":"2022-08-18"},{"lineNumber":148,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":149,"author":{"gitId":"kaij77"},"content":"    public String deleteTask(String str) throws DukeInvalidDeletionException {","lastModifiedDate":"2022-08-18"},{"lineNumber":150,"author":{"gitId":"kaij77"},"content":"        int targetId \u003d Integer.parseInt(str.substring(7));","lastModifiedDate":"2022-08-18"},{"lineNumber":151,"author":{"gitId":"kaij77"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2022-08-18"},{"lineNumber":152,"author":{"gitId":"kaij77"},"content":"            throw new DukeInvalidDeletionException(\"OOPS!!! Can\u0027t delete tasks from an empty task list :P\");","lastModifiedDate":"2022-08-18"},{"lineNumber":153,"author":{"gitId":"kaij77"},"content":"        } else if (targetId \u003e taskList.size() || targetId \u003c\u003d 0) {","lastModifiedDate":"2022-08-18"},{"lineNumber":154,"author":{"gitId":"kaij77"},"content":"            throw new DukeInvalidDeletionException(\"Can\u0027t delete as there is no such task! D:\" );","lastModifiedDate":"2022-08-18"},{"lineNumber":155,"author":{"gitId":"kaij77"},"content":"        }","lastModifiedDate":"2022-08-18"},{"lineNumber":156,"author":{"gitId":"kaij77"},"content":"        String removed \u003d taskList.get(targetId - 1).toString();","lastModifiedDate":"2022-08-18"},{"lineNumber":157,"author":{"gitId":"kaij77"},"content":"        taskList.remove(targetId - 1);","lastModifiedDate":"2022-08-18"},{"lineNumber":158,"author":{"gitId":"kaij77"},"content":"        return \"Noted. I\u0027ve removed this task:\\n\" + removed + \"\\n\"","lastModifiedDate":"2022-08-18"},{"lineNumber":159,"author":{"gitId":"kaij77"},"content":"                + \"Now you have \" + taskList.size() + \" tasks in the list.\";","lastModifiedDate":"2022-08-18"},{"lineNumber":160,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":161,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":162,"author":{"gitId":"kaij77"},"content":"    public String getDukeErrorMessage(DukeException e) {","lastModifiedDate":"2022-08-18"},{"lineNumber":163,"author":{"gitId":"kaij77"},"content":"        return e.getMessage();","lastModifiedDate":"2022-08-18"},{"lineNumber":164,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":165,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":166,"author":{"gitId":"kaij77"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":167,"author":{"gitId":"kaij77"},"content":"     * Returns the user\u0027s input using the Scanner sc.","lastModifiedDate":"2022-08-18"},{"lineNumber":168,"author":{"gitId":"kaij77"},"content":"     *","lastModifiedDate":"2022-08-18"},{"lineNumber":169,"author":{"gitId":"kaij77"},"content":"     * @return String sentence of user input.","lastModifiedDate":"2022-08-18"},{"lineNumber":170,"author":{"gitId":"kaij77"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":171,"author":{"gitId":"kaij77"},"content":"    public String getInput() {","lastModifiedDate":"2022-08-18"},{"lineNumber":172,"author":{"gitId":"kaij77"},"content":"        return sc.nextLine();","lastModifiedDate":"2022-08-18"},{"lineNumber":173,"author":{"gitId":"kaij77"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":174,"author":{"gitId":"kaij77"},"content":"}","lastModifiedDate":"2022-08-18"}],"authorContributionMap":{"kaij77":174}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kaij77"},"content":"todo read","lastModifiedDate":"2022-08-18"},{"lineNumber":2,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":3,"author":{"gitId":"kaij77"},"content":"deadline return /by Sunday","lastModifiedDate":"2022-08-18"},{"lineNumber":4,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":5,"author":{"gitId":"kaij77"},"content":"event meeting /at Mon 2-4pm","lastModifiedDate":"2022-08-18"},{"lineNumber":6,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":7,"author":{"gitId":"kaij77"},"content":"deadline do home worl /by I have no idea :\u003d-p","lastModifiedDate":"2022-08-18"},{"lineNumber":8,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":9,"author":{"gitId":"kaij77"},"content":"list","lastModifiedDate":"2022-08-18"},{"lineNumber":10,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":11,"author":{"gitId":"kaij77"},"content":"mark 2","lastModifiedDate":"2022-08-18"},{"lineNumber":12,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":13,"author":{"gitId":"kaij77"},"content":"list","lastModifiedDate":"2022-08-18"},{"lineNumber":14,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":15,"author":{"gitId":"kaij77"},"content":"mark 3","lastModifiedDate":"2022-08-18"},{"lineNumber":16,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":17,"author":{"gitId":"kaij77"},"content":"list","lastModifiedDate":"2022-08-18"},{"lineNumber":18,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":19,"author":{"gitId":"kaij77"},"content":"unmark 2","lastModifiedDate":"2022-08-18"},{"lineNumber":20,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":21,"author":{"gitId":"kaij77"},"content":"list","lastModifiedDate":"2022-08-18"},{"lineNumber":22,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":23,"author":{"gitId":"kaij77"},"content":"bye","lastModifiedDate":"2022-08-18"}],"authorContributionMap":{"kaij77":23}},{"path":"text-ui-test/runtest.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kaij77"},"content":"@ECHO OFF","lastModifiedDate":"2022-08-18"},{"lineNumber":2,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":3,"author":{"gitId":"kaij77"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2022-08-18"},{"lineNumber":4,"author":{"gitId":"kaij77"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2022-08-18"},{"lineNumber":5,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":6,"author":{"gitId":"kaij77"},"content":"REM delete output from previous run","lastModifiedDate":"2022-08-18"},{"lineNumber":7,"author":{"gitId":"kaij77"},"content":"del ACTUAL.TXT","lastModifiedDate":"2022-08-18"},{"lineNumber":8,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":9,"author":{"gitId":"kaij77"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2022-08-18"},{"lineNumber":10,"author":{"gitId":"kaij77"},"content":"javac  -cp ..C:\\Users\\ykaij\\Desktop\\documents\\NUS\\Y2S1\\CS2103T\\IP\\src\\main\\java -Xlint:none -d C:\\Users\\ykaij\\Desktop\\documents\\NUS\\Y2S1\\CS2103T\\IP\\src\\main\\java\\*.java","lastModifiedDate":"2022-08-18"},{"lineNumber":11,"author":{"gitId":"kaij77"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2022-08-18"},{"lineNumber":12,"author":{"gitId":"kaij77"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2022-08-18"},{"lineNumber":13,"author":{"gitId":"kaij77"},"content":"    exit /b 1","lastModifiedDate":"2022-08-18"},{"lineNumber":14,"author":{"gitId":"kaij77"},"content":")","lastModifiedDate":"2022-08-18"},{"lineNumber":15,"author":{"gitId":"kaij77"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2022-08-18"},{"lineNumber":16,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":17,"author":{"gitId":"kaij77"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2022-08-18"},{"lineNumber":18,"author":{"gitId":"kaij77"},"content":"java -classpath ..C:\\Users\\ykaij\\Desktop\\documents\\NUS\\Y2S1\\CS2103T\\IP\\src\\main Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-08-18"},{"lineNumber":19,"author":{"gitId":"kaij77"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":20,"author":{"gitId":"kaij77"},"content":"REM compare the output to the expected output","lastModifiedDate":"2022-08-18"},{"lineNumber":21,"author":{"gitId":"kaij77"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2022-08-18"}],"authorContributionMap":{"kaij77":21}}]
