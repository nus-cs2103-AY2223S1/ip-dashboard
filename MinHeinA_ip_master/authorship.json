[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-30"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"checkstyle {","lastModifiedDate":"2022-08-30"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-08-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2022-08-31"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-08-31"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-08-31"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-08-31"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-08-31"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-08-31"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-08-31"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-08-31"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-08-31"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-08-31"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-08-31"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-08-31"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-08-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"MinHeinA"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2022-08-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"MinHeinA":21,"-":40}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke;","lastModifiedDate":"2022-09-02"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-02"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"import java.util.Collections;","lastModifiedDate":"2022-09-02"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-09-02"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-09-02"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-09-02"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-09-02"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2022-09-02"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"import javafx.scene.Node;","lastModifiedDate":"2022-09-02"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-09-02"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-09-02"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2022-09-02"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-09-02"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"/**","lastModifiedDate":"2022-09-02"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2022-09-02"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2022-09-02"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":" * containing text from the speaker.","lastModifiedDate":"2022-09-02"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":" */","lastModifiedDate":"2022-09-02"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2022-09-02"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"    @FXML","lastModifiedDate":"2022-09-02"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"    private Label dialog;","lastModifiedDate":"2022-09-02"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"    @FXML","lastModifiedDate":"2022-09-02"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2022-09-02"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2022-09-02"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"        try {","lastModifiedDate":"2022-09-02"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2022-09-02"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-09-02"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-09-02"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-09-02"},{"lineNumber":34,"author":{"gitId":"MinHeinA"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-09-02"},{"lineNumber":35,"author":{"gitId":"MinHeinA"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-09-02"},{"lineNumber":36,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-09-02"},{"lineNumber":37,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":38,"author":{"gitId":"MinHeinA"},"content":"        dialog.setText(text);","lastModifiedDate":"2022-09-02"},{"lineNumber":39,"author":{"gitId":"MinHeinA"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2022-09-02"},{"lineNumber":40,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":41,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":42,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-09-02"},{"lineNumber":43,"author":{"gitId":"MinHeinA"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2022-09-02"},{"lineNumber":44,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-09-02"},{"lineNumber":45,"author":{"gitId":"MinHeinA"},"content":"    private void flip() {","lastModifiedDate":"2022-09-02"},{"lineNumber":46,"author":{"gitId":"MinHeinA"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2022-09-02"},{"lineNumber":47,"author":{"gitId":"MinHeinA"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2022-09-02"},{"lineNumber":48,"author":{"gitId":"MinHeinA"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2022-09-02"},{"lineNumber":49,"author":{"gitId":"MinHeinA"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2022-09-02"},{"lineNumber":50,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":51,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":52,"author":{"gitId":"MinHeinA"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2022-09-02"},{"lineNumber":53,"author":{"gitId":"MinHeinA"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2022-09-02"},{"lineNumber":54,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":55,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":56,"author":{"gitId":"MinHeinA"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2022-09-02"},{"lineNumber":57,"author":{"gitId":"MinHeinA"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2022-09-02"},{"lineNumber":58,"author":{"gitId":"MinHeinA"},"content":"        db.flip();","lastModifiedDate":"2022-09-02"},{"lineNumber":59,"author":{"gitId":"MinHeinA"},"content":"        return db;","lastModifiedDate":"2022-09-02"},{"lineNumber":60,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":61,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-09-02"}],"authorContributionMap":{"MinHeinA":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import duke.command.Command;","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-08-31"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"    private Storage storage;","lastModifiedDate":"2022-08-31"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"    public Duke(String filePath) throws DukeException{","lastModifiedDate":"2022-09-10"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"        assert !filePath.isEmpty() : \"Filepath should not be empty\";","lastModifiedDate":"2022-09-08"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2022-08-25"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"        taskList \u003d new TaskList(storage.loadTaskList());","lastModifiedDate":"2022-09-02"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"    public enum Keyword {","lastModifiedDate":"2022-08-31"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"        EXIT(\"bye\"), LIST(\"list\"), TODO(\"todo\"), DEADLINE(\"deadline\"), EVENT(\"event\"), DELETE(\"delete\"), MARK(\"mark\"),","lastModifiedDate":"2022-08-17"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"        UNMARK(\"unmark\"), FIND(\"find\"), PRIORITY(\"priority\");","lastModifiedDate":"2022-09-10"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"        private String keyword;","lastModifiedDate":"2022-08-17"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"        private Keyword(String keyword) {","lastModifiedDate":"2022-08-17"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"            this.keyword \u003d keyword;","lastModifiedDate":"2022-08-17"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-17"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"        public String getKeyword() {","lastModifiedDate":"2022-08-17"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"            return this.keyword;","lastModifiedDate":"2022-08-17"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-17"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"    public String getResponse(String userInput) {","lastModifiedDate":"2022-09-02"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"        try {","lastModifiedDate":"2022-09-02"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"            assert !userInput.isEmpty() : \"User input should not be empty\";","lastModifiedDate":"2022-09-08"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"            Command command \u003d Parser.parse(userInput);","lastModifiedDate":"2022-09-02"},{"lineNumber":34,"author":{"gitId":"MinHeinA"},"content":"            return command.execute(taskList, storage);","lastModifiedDate":"2022-09-08"},{"lineNumber":35,"author":{"gitId":"MinHeinA"},"content":"        } catch (DukeException exception) {","lastModifiedDate":"2022-09-02"},{"lineNumber":36,"author":{"gitId":"MinHeinA"},"content":"            return exception.toString();","lastModifiedDate":"2022-09-02"},{"lineNumber":37,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-09-02"},{"lineNumber":38,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":39,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"MinHeinA":38,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"/**","lastModifiedDate":"2022-08-31"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":" * A dedicated Exception class for Duke program.","lastModifiedDate":"2022-08-31"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":" *","lastModifiedDate":"2022-08-31"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":" */","lastModifiedDate":"2022-08-31"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-08-17"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2022-08-17"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"        super(errorMessage);","lastModifiedDate":"2022-08-17"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"        assert !errorMessage.isEmpty() : \"Error message should not be empty\";","lastModifiedDate":"2022-09-08"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"     * Returns a string representation of the exception.","lastModifiedDate":"2022-08-31"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"     * @return The Exception message.","lastModifiedDate":"2022-08-31"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"        return super.getMessage();","lastModifiedDate":"2022-08-30"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"MinHeinA":22}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke;","lastModifiedDate":"2022-09-02"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-09-02"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"/**","lastModifiedDate":"2022-09-02"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2022-09-02"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":" */","lastModifiedDate":"2022-09-02"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"public class Launcher {","lastModifiedDate":"2022-09-02"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-09-02"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"     * Represents the main entry point of the Skylark program. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"     * Creates an application view and show a GUI to the user.","lastModifiedDate":"2022-09-02"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-09-02"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"     * @param args Command-line parameters that can be passed into Skylark.","lastModifiedDate":"2022-09-02"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-09-02"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-09-02"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2022-09-02"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-09-02"}],"authorContributionMap":{"MinHeinA":19}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke;","lastModifiedDate":"2022-09-02"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-02"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-09-02"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-09-02"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-09-02"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-09-02"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-09-02"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"/**","lastModifiedDate":"2022-09-02"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2022-09-02"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":" */","lastModifiedDate":"2022-09-02"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"public class Main extends Application {","lastModifiedDate":"2022-09-02"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"    private Duke duke;","lastModifiedDate":"2022-09-10"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-09-02"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2022-09-02"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"        try {","lastModifiedDate":"2022-09-02"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"            duke \u003d new Duke(\"data/duke.txt\");","lastModifiedDate":"2022-09-10"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2022-09-02"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2022-09-02"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2022-09-02"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"            stage.setScene(scene);","lastModifiedDate":"2022-09-02"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2022-09-02"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"            stage.show();","lastModifiedDate":"2022-09-02"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"        } catch (IOException | DukeException e) {","lastModifiedDate":"2022-09-10"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-09-02"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-09-02"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-09-02"}],"authorContributionMap":{"MinHeinA":32}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke;","lastModifiedDate":"2022-09-02"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2022-09-02"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"import javafx.animation.PauseTransition;","lastModifiedDate":"2022-09-02"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"import javafx.application.Platform;","lastModifiedDate":"2022-09-02"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-09-02"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-09-02"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2022-09-02"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-09-02"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-09-02"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-09-02"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-09-02"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"import javafx.util.Duration;","lastModifiedDate":"2022-09-02"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"/**","lastModifiedDate":"2022-09-02"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2022-09-02"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":" */","lastModifiedDate":"2022-09-02"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2022-09-02"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"    @FXML","lastModifiedDate":"2022-09-02"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2022-09-02"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"    @FXML","lastModifiedDate":"2022-09-02"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2022-09-02"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"    @FXML","lastModifiedDate":"2022-09-02"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"    private TextField userInput;","lastModifiedDate":"2022-09-02"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"    @FXML","lastModifiedDate":"2022-09-02"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"    private Button sendButton;","lastModifiedDate":"2022-09-02"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"    private Duke duke;","lastModifiedDate":"2022-09-02"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2022-09-02"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2022-09-02"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":34,"author":{"gitId":"MinHeinA"},"content":"    @FXML","lastModifiedDate":"2022-09-02"},{"lineNumber":35,"author":{"gitId":"MinHeinA"},"content":"    public void initialize() {","lastModifiedDate":"2022-09-02"},{"lineNumber":36,"author":{"gitId":"MinHeinA"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2022-09-02"},{"lineNumber":37,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":38,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":39,"author":{"gitId":"MinHeinA"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2022-09-02"},{"lineNumber":40,"author":{"gitId":"MinHeinA"},"content":"        duke \u003d d;","lastModifiedDate":"2022-09-02"},{"lineNumber":41,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":42,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":43,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-09-02"},{"lineNumber":44,"author":{"gitId":"MinHeinA"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2022-09-02"},{"lineNumber":45,"author":{"gitId":"MinHeinA"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2022-09-02"},{"lineNumber":46,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-09-02"},{"lineNumber":47,"author":{"gitId":"MinHeinA"},"content":"    @FXML","lastModifiedDate":"2022-09-02"},{"lineNumber":48,"author":{"gitId":"MinHeinA"},"content":"    private void handleUserInput() {","lastModifiedDate":"2022-09-02"},{"lineNumber":49,"author":{"gitId":"MinHeinA"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2022-09-02"},{"lineNumber":50,"author":{"gitId":"MinHeinA"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2022-09-02"},{"lineNumber":51,"author":{"gitId":"MinHeinA"},"content":"        assert !response.isEmpty() : \"Response should not be empty\";","lastModifiedDate":"2022-09-08"},{"lineNumber":52,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-08"},{"lineNumber":53,"author":{"gitId":"MinHeinA"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-09-02"},{"lineNumber":54,"author":{"gitId":"MinHeinA"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2022-09-02"},{"lineNumber":55,"author":{"gitId":"MinHeinA"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2022-09-02"},{"lineNumber":56,"author":{"gitId":"MinHeinA"},"content":"        );","lastModifiedDate":"2022-09-02"},{"lineNumber":57,"author":{"gitId":"MinHeinA"},"content":"        userInput.clear();","lastModifiedDate":"2022-09-02"},{"lineNumber":58,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":59,"author":{"gitId":"MinHeinA"},"content":"        if (response.equals(ExitCommand.getFarewellMessage())) {","lastModifiedDate":"2022-09-02"},{"lineNumber":60,"author":{"gitId":"MinHeinA"},"content":"            PauseTransition pauseTransition \u003d new PauseTransition(Duration.seconds(3));","lastModifiedDate":"2022-09-02"},{"lineNumber":61,"author":{"gitId":"MinHeinA"},"content":"            pauseTransition.setOnFinished(event -\u003e Platform.exit());","lastModifiedDate":"2022-09-02"},{"lineNumber":62,"author":{"gitId":"MinHeinA"},"content":"            pauseTransition.play();","lastModifiedDate":"2022-09-02"},{"lineNumber":63,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-09-02"},{"lineNumber":64,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":65,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-09-02"}],"authorContributionMap":{"MinHeinA":65}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import duke.command.*;","lastModifiedDate":"2022-09-10"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"public class Parser {","lastModifiedDate":"2022-08-26"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"     * Returns parsed command from user input based on keywords.","lastModifiedDate":"2022-08-31"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"     * If there are no matching commands, a DukeException is thrown.","lastModifiedDate":"2022-08-31"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"     * @param userInput Input string from the user.","lastModifiedDate":"2022-08-31"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"     * @return A Command object based on parsed input.","lastModifiedDate":"2022-08-31"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"    public static Command parse(String userInput) throws DukeException {","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"        String command;","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"        assert !userInput.isEmpty() : \"User input should not be empty\";","lastModifiedDate":"2022-09-08"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"        if (userInput.isEmpty()) {","lastModifiedDate":"2022-08-26"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"            throw new DukeException(\"OOPS!!! The user input cannot be empty.\");","lastModifiedDate":"2022-09-02"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"        command \u003d userInput.split(\" \")[0];","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"        if (command.equals(Duke.Keyword.EXIT.getKeyword())) {","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"            return new ExitCommand();","lastModifiedDate":"2022-08-26"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"        } else if (command.equals(Duke.Keyword.LIST.getKeyword())) {","lastModifiedDate":"2022-08-26"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"            return new ListCommand();","lastModifiedDate":"2022-08-26"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"        } else if (command.equals(Duke.Keyword.MARK.getKeyword()) || command.equals(Duke.Keyword.UNMARK.getKeyword())) {","lastModifiedDate":"2022-08-26"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"            return new MarkCommand(userInput, command.equals(Duke.Keyword.MARK.getKeyword()) ? true : false);","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"        } else if (command.equals(Duke.Keyword.TODO.getKeyword())) {","lastModifiedDate":"2022-08-26"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"            return new AddCommand(userInput);","lastModifiedDate":"2022-08-26"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"        } else if (command.equals(Duke.Keyword.EVENT.getKeyword())) {","lastModifiedDate":"2022-08-26"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"            return new AddCommand(userInput);","lastModifiedDate":"2022-08-26"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"        } else if (command.equals(Duke.Keyword.DEADLINE.getKeyword())) {","lastModifiedDate":"2022-08-26"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"            return new AddCommand(userInput);","lastModifiedDate":"2022-08-26"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"        } else if (command.equals(Duke.Keyword.DELETE.getKeyword())) {","lastModifiedDate":"2022-08-26"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"            return new DeleteCommand(userInput);","lastModifiedDate":"2022-08-26"},{"lineNumber":34,"author":{"gitId":"MinHeinA"},"content":"        } else if (command.equals(Duke.Keyword.FIND.getKeyword())) {","lastModifiedDate":"2022-08-31"},{"lineNumber":35,"author":{"gitId":"MinHeinA"},"content":"            return new FindCommand(userInput);","lastModifiedDate":"2022-08-31"},{"lineNumber":36,"author":{"gitId":"MinHeinA"},"content":"        } else if (command.equals(Duke.Keyword.PRIORITY.getKeyword())) {","lastModifiedDate":"2022-09-10"},{"lineNumber":37,"author":{"gitId":"MinHeinA"},"content":"            return new PriorityCommand(userInput);","lastModifiedDate":"2022-09-10"},{"lineNumber":38,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":39,"author":{"gitId":"MinHeinA"},"content":"        else {","lastModifiedDate":"2022-09-10"},{"lineNumber":40,"author":{"gitId":"MinHeinA"},"content":"            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2022-09-02"},{"lineNumber":41,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":42,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":43,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"MinHeinA":43}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import java.io.File;","lastModifiedDate":"2022-08-25"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-08-25"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-08-25"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-25"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-25"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-25"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-08-31"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"import duke.task.Event;","lastModifiedDate":"2022-08-31"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"import duke.task.Task;","lastModifiedDate":"2022-08-31"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-08-31"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"/** Storage object used for file operations such as read and write of TaskList to text file. */","lastModifiedDate":"2022-08-31"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"public class Storage {","lastModifiedDate":"2022-08-25"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"    private String filePath;","lastModifiedDate":"2022-08-25"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"     * Returns a Storage object.","lastModifiedDate":"2022-08-31"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"     * @param filePath File path of the text file used for storage.","lastModifiedDate":"2022-08-31"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2022-08-25"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"        assert !filePath.isEmpty() : \"Filepath should not be empty\";","lastModifiedDate":"2022-09-08"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2022-08-25"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"     * Reads from the text file in the specified file path.","lastModifiedDate":"2022-08-31"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"     * Scan through every line in file and creates the relevant Task objects based on the task type.","lastModifiedDate":"2022-08-31"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":34,"author":{"gitId":"MinHeinA"},"content":"     * @return An ArrayList of Task objects.","lastModifiedDate":"2022-08-31"},{"lineNumber":35,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":36,"author":{"gitId":"MinHeinA"},"content":"    public ArrayList\u003cTask\u003e loadTaskList() throws DukeException{","lastModifiedDate":"2022-09-10"},{"lineNumber":37,"author":{"gitId":"MinHeinA"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-08-25"},{"lineNumber":38,"author":{"gitId":"MinHeinA"},"content":"        File file;","lastModifiedDate":"2022-08-25"},{"lineNumber":39,"author":{"gitId":"MinHeinA"},"content":"        file \u003d new File(this.filePath);","lastModifiedDate":"2022-08-25"},{"lineNumber":40,"author":{"gitId":"MinHeinA"},"content":"        if (file.isDirectory()) {","lastModifiedDate":"2022-08-25"},{"lineNumber":41,"author":{"gitId":"MinHeinA"},"content":"            throw new DukeException(\"OOPS!!! Invalid file path, path given is a directory\");","lastModifiedDate":"2022-09-02"},{"lineNumber":42,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":43,"author":{"gitId":"MinHeinA"},"content":"        if (file.exists()) {","lastModifiedDate":"2022-08-25"},{"lineNumber":44,"author":{"gitId":"MinHeinA"},"content":"            try {","lastModifiedDate":"2022-08-25"},{"lineNumber":45,"author":{"gitId":"MinHeinA"},"content":"                Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2022-08-25"},{"lineNumber":46,"author":{"gitId":"MinHeinA"},"content":"                while (scanner.hasNextLine()) {","lastModifiedDate":"2022-08-25"},{"lineNumber":47,"author":{"gitId":"MinHeinA"},"content":"                    String nextLine \u003d scanner.nextLine();","lastModifiedDate":"2022-08-25"},{"lineNumber":48,"author":{"gitId":"MinHeinA"},"content":"                    String[] splitString \u003d nextLine.split(\"\\\\|\");","lastModifiedDate":"2022-08-25"},{"lineNumber":49,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":50,"author":{"gitId":"MinHeinA"},"content":"                    Task task;","lastModifiedDate":"2022-08-25"},{"lineNumber":51,"author":{"gitId":"MinHeinA"},"content":"                    switch (splitString[0]) {","lastModifiedDate":"2022-08-25"},{"lineNumber":52,"author":{"gitId":"MinHeinA"},"content":"                    case \"T\":","lastModifiedDate":"2022-08-25"},{"lineNumber":53,"author":{"gitId":"MinHeinA"},"content":"                        task \u003d new Todo(splitString[3]);","lastModifiedDate":"2022-09-10"},{"lineNumber":54,"author":{"gitId":"MinHeinA"},"content":"                        break;","lastModifiedDate":"2022-08-25"},{"lineNumber":55,"author":{"gitId":"MinHeinA"},"content":"                    case \"D\": {","lastModifiedDate":"2022-08-25"},{"lineNumber":56,"author":{"gitId":"MinHeinA"},"content":"                        task \u003d new Deadline(splitString[3], splitString[4]);","lastModifiedDate":"2022-09-10"},{"lineNumber":57,"author":{"gitId":"MinHeinA"},"content":"                        break;","lastModifiedDate":"2022-08-25"},{"lineNumber":58,"author":{"gitId":"MinHeinA"},"content":"                    }","lastModifiedDate":"2022-08-25"},{"lineNumber":59,"author":{"gitId":"MinHeinA"},"content":"                    case \"E\": {","lastModifiedDate":"2022-08-25"},{"lineNumber":60,"author":{"gitId":"MinHeinA"},"content":"                        task \u003d new Event(splitString[3], splitString[4]);","lastModifiedDate":"2022-09-10"},{"lineNumber":61,"author":{"gitId":"MinHeinA"},"content":"                        break;","lastModifiedDate":"2022-08-25"},{"lineNumber":62,"author":{"gitId":"MinHeinA"},"content":"                    }","lastModifiedDate":"2022-08-25"},{"lineNumber":63,"author":{"gitId":"MinHeinA"},"content":"                    default:","lastModifiedDate":"2022-08-25"},{"lineNumber":64,"author":{"gitId":"MinHeinA"},"content":"                        throw new DukeException(\"OOPS!!! Invalid task type found in file!\");","lastModifiedDate":"2022-09-02"},{"lineNumber":65,"author":{"gitId":"MinHeinA"},"content":"                    }","lastModifiedDate":"2022-08-25"},{"lineNumber":66,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":67,"author":{"gitId":"MinHeinA"},"content":"                    if ((splitString[1] \u003d\u003d \"1\")) {","lastModifiedDate":"2022-08-25"},{"lineNumber":68,"author":{"gitId":"MinHeinA"},"content":"                        task.setTaskStatus(true);","lastModifiedDate":"2022-08-25"},{"lineNumber":69,"author":{"gitId":"MinHeinA"},"content":"                    } else {","lastModifiedDate":"2022-08-25"},{"lineNumber":70,"author":{"gitId":"MinHeinA"},"content":"                        task.setTaskStatus(false);","lastModifiedDate":"2022-08-25"},{"lineNumber":71,"author":{"gitId":"MinHeinA"},"content":"                    }","lastModifiedDate":"2022-08-25"},{"lineNumber":72,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":73,"author":{"gitId":"MinHeinA"},"content":"                    task.setPriority(Integer.parseInt(splitString[2]));","lastModifiedDate":"2022-09-10"},{"lineNumber":74,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":75,"author":{"gitId":"MinHeinA"},"content":"                    taskList.add(task);","lastModifiedDate":"2022-08-25"},{"lineNumber":76,"author":{"gitId":"MinHeinA"},"content":"                }","lastModifiedDate":"2022-08-25"},{"lineNumber":77,"author":{"gitId":"MinHeinA"},"content":"            } catch (FileNotFoundException fileNotFoundException) {","lastModifiedDate":"2022-08-25"},{"lineNumber":78,"author":{"gitId":"MinHeinA"},"content":"                throw new DukeException(\"OOPS!!! File could not be found\");","lastModifiedDate":"2022-09-02"},{"lineNumber":79,"author":{"gitId":"MinHeinA"},"content":"            }","lastModifiedDate":"2022-08-25"},{"lineNumber":80,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":81,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":82,"author":{"gitId":"MinHeinA"},"content":"        return taskList;","lastModifiedDate":"2022-08-25"},{"lineNumber":83,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":84,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":85,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":86,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":87,"author":{"gitId":"MinHeinA"},"content":"     * Saves the current TaskList into the text file located at file path specified by the user.","lastModifiedDate":"2022-08-31"},{"lineNumber":88,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":89,"author":{"gitId":"MinHeinA"},"content":"     * @param currTaskList Current TaskList to be saved","lastModifiedDate":"2022-08-31"},{"lineNumber":90,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":91,"author":{"gitId":"MinHeinA"},"content":"    public void saveTaskList(TaskList currTaskList) throws DukeException {","lastModifiedDate":"2022-09-10"},{"lineNumber":92,"author":{"gitId":"MinHeinA"},"content":"        File file;","lastModifiedDate":"2022-08-25"},{"lineNumber":93,"author":{"gitId":"MinHeinA"},"content":"        ArrayList\u003cTask\u003e taskList \u003d currTaskList.getTaskList();","lastModifiedDate":"2022-08-31"},{"lineNumber":94,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":95,"author":{"gitId":"MinHeinA"},"content":"        file \u003d new File(this.filePath);","lastModifiedDate":"2022-08-25"},{"lineNumber":96,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":97,"author":{"gitId":"MinHeinA"},"content":"        if (file.isDirectory()) {","lastModifiedDate":"2022-08-25"},{"lineNumber":98,"author":{"gitId":"MinHeinA"},"content":"            throw new DukeException(\"OOPS!!! Invalid file path, path given is a directory\");","lastModifiedDate":"2022-09-02"},{"lineNumber":99,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":100,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":101,"author":{"gitId":"MinHeinA"},"content":"        if (!file.exists()) {","lastModifiedDate":"2022-08-25"},{"lineNumber":102,"author":{"gitId":"MinHeinA"},"content":"            try {","lastModifiedDate":"2022-08-25"},{"lineNumber":103,"author":{"gitId":"MinHeinA"},"content":"                if (!file.getParentFile().mkdirs()) {","lastModifiedDate":"2022-08-25"},{"lineNumber":104,"author":{"gitId":"MinHeinA"},"content":"                    throw new DukeException(\"OOPS!!! Directory could not be created\");","lastModifiedDate":"2022-09-02"},{"lineNumber":105,"author":{"gitId":"MinHeinA"},"content":"                }","lastModifiedDate":"2022-08-25"},{"lineNumber":106,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":107,"author":{"gitId":"MinHeinA"},"content":"                if (!file.createNewFile()) {","lastModifiedDate":"2022-08-25"},{"lineNumber":108,"author":{"gitId":"MinHeinA"},"content":"                    throw new DukeException(\"OOPS!!! File could not be created\");","lastModifiedDate":"2022-09-02"},{"lineNumber":109,"author":{"gitId":"MinHeinA"},"content":"                }","lastModifiedDate":"2022-08-25"},{"lineNumber":110,"author":{"gitId":"MinHeinA"},"content":"            } catch (IOException exception) {","lastModifiedDate":"2022-08-25"},{"lineNumber":111,"author":{"gitId":"MinHeinA"},"content":"                throw new DukeException(\"OOPS!!! Something went wrong when trying to create file. Error message: \"","lastModifiedDate":"2022-09-02"},{"lineNumber":112,"author":{"gitId":"MinHeinA"},"content":"                        + exception.getMessage());","lastModifiedDate":"2022-08-25"},{"lineNumber":113,"author":{"gitId":"MinHeinA"},"content":"            }","lastModifiedDate":"2022-08-25"},{"lineNumber":114,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":115,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":116,"author":{"gitId":"MinHeinA"},"content":"        try {","lastModifiedDate":"2022-08-25"},{"lineNumber":117,"author":{"gitId":"MinHeinA"},"content":"            FileWriter fileWriter \u003d new FileWriter(file);","lastModifiedDate":"2022-08-25"},{"lineNumber":118,"author":{"gitId":"MinHeinA"},"content":"            for (Task task : taskList) {","lastModifiedDate":"2022-08-25"},{"lineNumber":119,"author":{"gitId":"MinHeinA"},"content":"                //lineSeparator used to support multiple systems","lastModifiedDate":"2022-08-25"},{"lineNumber":120,"author":{"gitId":"MinHeinA"},"content":"                fileWriter.write(task.toFileString() + System.lineSeparator());","lastModifiedDate":"2022-08-25"},{"lineNumber":121,"author":{"gitId":"MinHeinA"},"content":"            }","lastModifiedDate":"2022-08-25"},{"lineNumber":122,"author":{"gitId":"MinHeinA"},"content":"            fileWriter.close();","lastModifiedDate":"2022-08-25"},{"lineNumber":123,"author":{"gitId":"MinHeinA"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2022-08-25"},{"lineNumber":124,"author":{"gitId":"MinHeinA"},"content":"            throw new DukeException(\"☹ OOPS!!! Could not be written to file. Error message: \"","lastModifiedDate":"2022-08-25"},{"lineNumber":125,"author":{"gitId":"MinHeinA"},"content":"                    + exception.getMessage());","lastModifiedDate":"2022-08-25"},{"lineNumber":126,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":127,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":128,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"MinHeinA":128}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-25"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"import duke.task.Task;","lastModifiedDate":"2022-08-31"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"/** Represents a list of Tasks objects */","lastModifiedDate":"2022-08-31"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"public class TaskList {","lastModifiedDate":"2022-08-25"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"    private final ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2022-08-25"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"     * Represents a TaskList object.","lastModifiedDate":"2022-08-31"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"     * Initialises a new empty ArrayList of Tasks and Initialises ui to print responses when task methods are executed","lastModifiedDate":"2022-08-31"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"    public TaskList() {","lastModifiedDate":"2022-08-25"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-08-25"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"     * Represents a TaskList object.","lastModifiedDate":"2022-08-31"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"     * Initialises taskList ArrayList with the provided taskList and Initialises ui to print responses","lastModifiedDate":"2022-08-31"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"     * when task methods are executed","lastModifiedDate":"2022-08-31"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"     * @param taskList An existing taskList ArrayList to initialise TaskList with.","lastModifiedDate":"2022-08-31"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2022-08-25"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2022-08-25"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2022-08-25"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"        return this.taskList;","lastModifiedDate":"2022-08-25"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":34,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":35,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":36,"author":{"gitId":"MinHeinA"},"content":"     * Returns the size of the TaskList.","lastModifiedDate":"2022-08-31"},{"lineNumber":37,"author":{"gitId":"MinHeinA"},"content":"     * The returned integer represents the number of Task objects in TaskList.","lastModifiedDate":"2022-08-31"},{"lineNumber":38,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":39,"author":{"gitId":"MinHeinA"},"content":"     * @return Size of the TaskList.","lastModifiedDate":"2022-08-31"},{"lineNumber":40,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":41,"author":{"gitId":"MinHeinA"},"content":"    public int getTaskListSize() {","lastModifiedDate":"2022-08-25"},{"lineNumber":42,"author":{"gitId":"MinHeinA"},"content":"        return this.taskList.size();","lastModifiedDate":"2022-08-25"},{"lineNumber":43,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":44,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":45,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":46,"author":{"gitId":"MinHeinA"},"content":"     * Returns the Task object stored at the particular index of the TaskList.","lastModifiedDate":"2022-08-31"},{"lineNumber":47,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":48,"author":{"gitId":"MinHeinA"},"content":"     * @param index Index of the Task object.","lastModifiedDate":"2022-08-31"},{"lineNumber":49,"author":{"gitId":"MinHeinA"},"content":"     * @return Task object that is stored at given index.","lastModifiedDate":"2022-08-31"},{"lineNumber":50,"author":{"gitId":"MinHeinA"},"content":"     * @throws DukeException If provided index is out of range.","lastModifiedDate":"2022-08-31"},{"lineNumber":51,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":52,"author":{"gitId":"MinHeinA"},"content":"    public Task getTaskAtIndex(int index) throws DukeException {","lastModifiedDate":"2022-08-25"},{"lineNumber":53,"author":{"gitId":"MinHeinA"},"content":"        if (index \u003c\u003d 0 || index \u003e getTaskListSize()) {","lastModifiedDate":"2022-08-25"},{"lineNumber":54,"author":{"gitId":"MinHeinA"},"content":"            throw new DukeException(\"OOPS!!! The task index is out of range\");","lastModifiedDate":"2022-09-02"},{"lineNumber":55,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":56,"author":{"gitId":"MinHeinA"},"content":"        return this.taskList.get(index - 1);","lastModifiedDate":"2022-08-25"},{"lineNumber":57,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":58,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":59,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":60,"author":{"gitId":"MinHeinA"},"content":"     * Adds the Task object into the TaskList at the end.","lastModifiedDate":"2022-08-31"},{"lineNumber":61,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":62,"author":{"gitId":"MinHeinA"},"content":"     * @param task Task object to be added.","lastModifiedDate":"2022-08-31"},{"lineNumber":63,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":64,"author":{"gitId":"MinHeinA"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2022-08-25"},{"lineNumber":65,"author":{"gitId":"MinHeinA"},"content":"        this.taskList.add(task);","lastModifiedDate":"2022-08-25"},{"lineNumber":66,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":67,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":68,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":69,"author":{"gitId":"MinHeinA"},"content":"     * Removes the Task object from the TaskList at specified index.","lastModifiedDate":"2022-08-31"},{"lineNumber":70,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":71,"author":{"gitId":"MinHeinA"},"content":"     * @param index Index of the Task object to be deleted.","lastModifiedDate":"2022-08-31"},{"lineNumber":72,"author":{"gitId":"MinHeinA"},"content":"     * @throws DukeException If provided index is out of range.","lastModifiedDate":"2022-08-31"},{"lineNumber":73,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":74,"author":{"gitId":"MinHeinA"},"content":"    public Task deleteTask(int index) throws DukeException {","lastModifiedDate":"2022-08-26"},{"lineNumber":75,"author":{"gitId":"MinHeinA"},"content":"        if (index \u003c\u003d 0 || index \u003e getTaskListSize()) {","lastModifiedDate":"2022-08-25"},{"lineNumber":76,"author":{"gitId":"MinHeinA"},"content":"            throw new DukeException(\"OOPS!!! The task index is out of range\");","lastModifiedDate":"2022-09-02"},{"lineNumber":77,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":78,"author":{"gitId":"MinHeinA"},"content":"        index \u003d index - 1;","lastModifiedDate":"2022-08-25"},{"lineNumber":79,"author":{"gitId":"MinHeinA"},"content":"        Task task \u003d this.taskList.remove(index);","lastModifiedDate":"2022-08-25"},{"lineNumber":80,"author":{"gitId":"MinHeinA"},"content":"        return task;","lastModifiedDate":"2022-08-26"},{"lineNumber":81,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":82,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":83,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":84,"author":{"gitId":"MinHeinA"},"content":"     * Updates the status of the Task object at specified index","lastModifiedDate":"2022-08-31"},{"lineNumber":85,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":86,"author":{"gitId":"MinHeinA"},"content":"     * @param index Index of the Task object which needs its task status modified.","lastModifiedDate":"2022-08-31"},{"lineNumber":87,"author":{"gitId":"MinHeinA"},"content":"     * @param isDone True to mark task as done and false to mark task as not done","lastModifiedDate":"2022-09-08"},{"lineNumber":88,"author":{"gitId":"MinHeinA"},"content":"     * @throws DukeException If provided index is out of range.","lastModifiedDate":"2022-08-31"},{"lineNumber":89,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":90,"author":{"gitId":"MinHeinA"},"content":"    public Task updateTaskStatus(int index, boolean isDone) throws DukeException {","lastModifiedDate":"2022-08-31"},{"lineNumber":91,"author":{"gitId":"MinHeinA"},"content":"        if (index \u003c\u003d 0 || index \u003e getTaskListSize()) {","lastModifiedDate":"2022-08-25"},{"lineNumber":92,"author":{"gitId":"MinHeinA"},"content":"            throw new DukeException(\"OOPS!!! The task index is out of range\");","lastModifiedDate":"2022-09-02"},{"lineNumber":93,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":94,"author":{"gitId":"MinHeinA"},"content":"        index \u003d index - 1;","lastModifiedDate":"2022-08-25"},{"lineNumber":95,"author":{"gitId":"MinHeinA"},"content":"        Task task \u003d this.taskList.get(index);","lastModifiedDate":"2022-08-25"},{"lineNumber":96,"author":{"gitId":"MinHeinA"},"content":"        task.setTaskStatus(isDone);","lastModifiedDate":"2022-09-08"},{"lineNumber":97,"author":{"gitId":"MinHeinA"},"content":"        this.taskList.set(index, task);","lastModifiedDate":"2022-08-25"},{"lineNumber":98,"author":{"gitId":"MinHeinA"},"content":"        return task;","lastModifiedDate":"2022-08-26"},{"lineNumber":99,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":100,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":101,"author":{"gitId":"MinHeinA"},"content":"    public String findTaskThatContains(String query) throws DukeException {","lastModifiedDate":"2022-09-08"},{"lineNumber":102,"author":{"gitId":"MinHeinA"},"content":"        int index \u003d 1;","lastModifiedDate":"2022-09-08"},{"lineNumber":103,"author":{"gitId":"MinHeinA"},"content":"        String message \u003d \"\";","lastModifiedDate":"2022-09-08"},{"lineNumber":104,"author":{"gitId":"MinHeinA"},"content":"        for (int i \u003d 0; i \u003c this.getTaskListSize(); i++) {","lastModifiedDate":"2022-09-08"},{"lineNumber":105,"author":{"gitId":"MinHeinA"},"content":"            Task currentTask \u003d this.getTaskAtIndex(i + 1);","lastModifiedDate":"2022-09-08"},{"lineNumber":106,"author":{"gitId":"MinHeinA"},"content":"            if (currentTask.toString().contains(query)) {","lastModifiedDate":"2022-09-08"},{"lineNumber":107,"author":{"gitId":"MinHeinA"},"content":"                message +\u003d index + \". \" + currentTask + \"\\n\";","lastModifiedDate":"2022-09-08"},{"lineNumber":108,"author":{"gitId":"MinHeinA"},"content":"                index +\u003d 1;","lastModifiedDate":"2022-09-08"},{"lineNumber":109,"author":{"gitId":"MinHeinA"},"content":"            }","lastModifiedDate":"2022-09-08"},{"lineNumber":110,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-09-08"},{"lineNumber":111,"author":{"gitId":"MinHeinA"},"content":"        return message;","lastModifiedDate":"2022-09-08"},{"lineNumber":112,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-08"},{"lineNumber":113,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-08"},{"lineNumber":114,"author":{"gitId":"MinHeinA"},"content":"    public Task updateTaskPriority(int index, String priorityString) throws DukeException {","lastModifiedDate":"2022-09-10"},{"lineNumber":115,"author":{"gitId":"MinHeinA"},"content":"        if (index \u003c\u003d 0 || index \u003e getTaskListSize()) {","lastModifiedDate":"2022-09-10"},{"lineNumber":116,"author":{"gitId":"MinHeinA"},"content":"            throw new DukeException(\"OOPS!!! The task index is out of range\");","lastModifiedDate":"2022-09-10"},{"lineNumber":117,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":118,"author":{"gitId":"MinHeinA"},"content":"        index \u003d index - 1;","lastModifiedDate":"2022-09-10"},{"lineNumber":119,"author":{"gitId":"MinHeinA"},"content":"        Task task \u003d this.taskList.get(index);","lastModifiedDate":"2022-09-10"},{"lineNumber":120,"author":{"gitId":"MinHeinA"},"content":"        task.setPriority(priorityString);","lastModifiedDate":"2022-09-10"},{"lineNumber":121,"author":{"gitId":"MinHeinA"},"content":"        this.taskList.set(index, task);","lastModifiedDate":"2022-09-10"},{"lineNumber":122,"author":{"gitId":"MinHeinA"},"content":"        return task;","lastModifiedDate":"2022-09-10"},{"lineNumber":123,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":124,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":125,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":126,"author":{"gitId":"MinHeinA"},"content":"     * Returns the string representation of the TaskList showing all the Tasks inside to be printed to user.","lastModifiedDate":"2022-08-31"},{"lineNumber":127,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":128,"author":{"gitId":"MinHeinA"},"content":"     * @return String representation of the TaskList showing all the Tasks inside to be printed to user..","lastModifiedDate":"2022-08-31"},{"lineNumber":129,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":130,"author":{"gitId":"MinHeinA"},"content":"    public String printTaskList() {","lastModifiedDate":"2022-08-26"},{"lineNumber":131,"author":{"gitId":"MinHeinA"},"content":"        String message \u003d \"\";","lastModifiedDate":"2022-08-25"},{"lineNumber":132,"author":{"gitId":"MinHeinA"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2022-08-25"},{"lineNumber":133,"author":{"gitId":"MinHeinA"},"content":"            Task task \u003d taskList.get(i);","lastModifiedDate":"2022-08-25"},{"lineNumber":134,"author":{"gitId":"MinHeinA"},"content":"            message +\u003d (i + 1) + \".\" + task.toString() + \"\\n\";","lastModifiedDate":"2022-08-25"},{"lineNumber":135,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":136,"author":{"gitId":"MinHeinA"},"content":"        return message;","lastModifiedDate":"2022-08-26"},{"lineNumber":137,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":138,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":139,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":140,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"MinHeinA":140}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke.command;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import duke.Duke;","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"import duke.TaskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-08-30"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"import duke.task.Event;","lastModifiedDate":"2022-08-30"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"import duke.task.Task;","lastModifiedDate":"2022-08-30"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-08-30"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"/** Represents the command to add task that inherits from Command. */","lastModifiedDate":"2022-08-31"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"    private final String userInput;","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"    public AddCommand(String userInput) {","lastModifiedDate":"2022-08-26"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2022-08-26"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2022-09-08"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"        String command;","lastModifiedDate":"2022-08-26"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"        String message \u003d \"\";","lastModifiedDate":"2022-08-26"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"        command \u003d userInput.split(\" \")[0];","lastModifiedDate":"2022-08-26"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"        Task task;","lastModifiedDate":"2022-08-26"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"        if (userInput.split(\" \", 2).length \u003d\u003d 1) {","lastModifiedDate":"2022-08-26"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"            if (command.equals(Duke.Keyword.TODO.getKeyword())) {","lastModifiedDate":"2022-08-26"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"                throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2022-09-02"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"            } else if (command.equals(Duke.Keyword.EVENT.getKeyword())) {","lastModifiedDate":"2022-08-26"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"                throw new DukeException(\"OOPS!!! The description of a event cannot be empty.\");","lastModifiedDate":"2022-09-02"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"            } else if (command.equals(Duke.Keyword.DEADLINE.getKeyword())) {","lastModifiedDate":"2022-08-26"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"                throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2022-09-02"},{"lineNumber":34,"author":{"gitId":"MinHeinA"},"content":"            } else {","lastModifiedDate":"2022-08-26"},{"lineNumber":35,"author":{"gitId":"MinHeinA"},"content":"                throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2022-09-02"},{"lineNumber":36,"author":{"gitId":"MinHeinA"},"content":"            }","lastModifiedDate":"2022-08-26"},{"lineNumber":37,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":38,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":39,"author":{"gitId":"MinHeinA"},"content":"        String taskDetails \u003d userInput.split(\" \", 2)[1];","lastModifiedDate":"2022-08-26"},{"lineNumber":40,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":41,"author":{"gitId":"MinHeinA"},"content":"        if (command.equals(Duke.Keyword.TODO.getKeyword())) {","lastModifiedDate":"2022-08-26"},{"lineNumber":42,"author":{"gitId":"MinHeinA"},"content":"            task \u003d new Todo(taskDetails.split(\"/\")[0]);","lastModifiedDate":"2022-09-10"},{"lineNumber":43,"author":{"gitId":"MinHeinA"},"content":"            if (taskDetails.split(\"/\").length \u003e 1) {","lastModifiedDate":"2022-09-10"},{"lineNumber":44,"author":{"gitId":"MinHeinA"},"content":"                task.setPriority(taskDetails.split(\"/\")[1].split(\" \", 2)[1]);","lastModifiedDate":"2022-09-10"},{"lineNumber":45,"author":{"gitId":"MinHeinA"},"content":"            }","lastModifiedDate":"2022-09-10"},{"lineNumber":46,"author":{"gitId":"MinHeinA"},"content":"            taskList.addTask(task);","lastModifiedDate":"2022-08-26"},{"lineNumber":47,"author":{"gitId":"MinHeinA"},"content":"        } else if (command.equals(Duke.Keyword.EVENT.getKeyword())) {","lastModifiedDate":"2022-08-26"},{"lineNumber":48,"author":{"gitId":"MinHeinA"},"content":"            task \u003d new Event(taskDetails.split(\"/\")[0], taskDetails.split(\"/\")[1].split(\" \", 2)[1]);","lastModifiedDate":"2022-08-26"},{"lineNumber":49,"author":{"gitId":"MinHeinA"},"content":"            if (taskDetails.split(\"/\").length \u003e 2) {","lastModifiedDate":"2022-09-10"},{"lineNumber":50,"author":{"gitId":"MinHeinA"},"content":"                task.setPriority(taskDetails.split(\"/\")[2].split(\" \", 2)[1]);","lastModifiedDate":"2022-09-10"},{"lineNumber":51,"author":{"gitId":"MinHeinA"},"content":"            }","lastModifiedDate":"2022-09-10"},{"lineNumber":52,"author":{"gitId":"MinHeinA"},"content":"            taskList.addTask(task);","lastModifiedDate":"2022-08-26"},{"lineNumber":53,"author":{"gitId":"MinHeinA"},"content":"        } else if (command.equals(Duke.Keyword.DEADLINE.getKeyword())) {","lastModifiedDate":"2022-08-26"},{"lineNumber":54,"author":{"gitId":"MinHeinA"},"content":"            task \u003d new Deadline(taskDetails.split(\"/\")[0], taskDetails.split(\"/\")[1].split(\" \", 2)[1]);","lastModifiedDate":"2022-08-26"},{"lineNumber":55,"author":{"gitId":"MinHeinA"},"content":"            if (taskDetails.split(\"/\").length \u003e 2) {","lastModifiedDate":"2022-09-10"},{"lineNumber":56,"author":{"gitId":"MinHeinA"},"content":"                task.setPriority(taskDetails.split(\"/\")[2].split(\" \", 2)[1]);","lastModifiedDate":"2022-09-10"},{"lineNumber":57,"author":{"gitId":"MinHeinA"},"content":"            }","lastModifiedDate":"2022-09-10"},{"lineNumber":58,"author":{"gitId":"MinHeinA"},"content":"            taskList.addTask(task);","lastModifiedDate":"2022-08-26"},{"lineNumber":59,"author":{"gitId":"MinHeinA"},"content":"        } else {","lastModifiedDate":"2022-08-26"},{"lineNumber":60,"author":{"gitId":"MinHeinA"},"content":"            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2022-09-02"},{"lineNumber":61,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":62,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":63,"author":{"gitId":"MinHeinA"},"content":"        message +\u003d \"Got it. I\u0027ve added this task:\\n\";","lastModifiedDate":"2022-08-26"},{"lineNumber":64,"author":{"gitId":"MinHeinA"},"content":"        message +\u003d \"\\t\" + task.toString() + \"\\n\";","lastModifiedDate":"2022-08-26"},{"lineNumber":65,"author":{"gitId":"MinHeinA"},"content":"        message +\u003d \"Now you have \" + taskList.getTaskListSize() + \" tasks in the list.\\n\";","lastModifiedDate":"2022-08-26"},{"lineNumber":66,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":67,"author":{"gitId":"MinHeinA"},"content":"        return message;","lastModifiedDate":"2022-09-02"},{"lineNumber":68,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":69,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":70,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-26"},{"lineNumber":71,"author":{"gitId":"MinHeinA"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-08-26"},{"lineNumber":72,"author":{"gitId":"MinHeinA"},"content":"        return false;","lastModifiedDate":"2022-08-26"},{"lineNumber":73,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":74,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"MinHeinA":74}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke.command;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"import duke.TaskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"/** Abstract class that represents the commands the user gives to the Duke program */","lastModifiedDate":"2022-08-31"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"public abstract class Command {","lastModifiedDate":"2022-08-30"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"    public abstract String execute(TaskList taskList, Storage storage) throws DukeException;","lastModifiedDate":"2022-09-08"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2022-08-30"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-30"}],"authorContributionMap":{"MinHeinA":12}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke.command;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"import duke.TaskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"import duke.task.Task;","lastModifiedDate":"2022-08-30"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"/** Represents the command to delete task that inherits from Command. */","lastModifiedDate":"2022-08-31"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"    private final String userInput;","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"    public DeleteCommand(String userInput) {","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-26"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2022-09-08"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"        String message \u003d \"\";","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"        String taskDetails \u003d userInput.split(\" \", 2)[1];","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"        int taskIndex \u003d Integer.parseInt(taskDetails);","lastModifiedDate":"2022-08-26"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"        Task task \u003d taskList.deleteTask(taskIndex);","lastModifiedDate":"2022-08-26"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"        message +\u003d \"Noted. I\u0027ve removed this task:\\n\";","lastModifiedDate":"2022-08-26"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"        message +\u003d \"\\t\" + task.toString() + \"\\n\";","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"        message +\u003d \"Now you have \" + taskList.getTaskListSize() + \" tasks in the list.\\n\";","lastModifiedDate":"2022-08-26"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"        return message;","lastModifiedDate":"2022-09-02"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-26"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-08-26"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"        return false;","lastModifiedDate":"2022-08-26"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":34,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"MinHeinA":34}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke.command;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import duke.DukeException;","lastModifiedDate":"2022-09-10"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"import duke.TaskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"/** Represents the command to end the Duke program. */","lastModifiedDate":"2022-08-31"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"    private static final String farewellMessage \u003d \"Bye. Hope to see you again soon! \\n\\nApplication is now closing.\";","lastModifiedDate":"2022-09-02"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"    public ExitCommand() {","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"        super();","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-26"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2022-09-10"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"        storage.saveTaskList(taskList);","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"        return farewellMessage;","lastModifiedDate":"2022-09-02"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"    public static String getFarewellMessage() {","lastModifiedDate":"2022-09-02"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"        return farewellMessage;","lastModifiedDate":"2022-09-02"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-26"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-08-26"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"        return true;","lastModifiedDate":"2022-08-26"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"MinHeinA":30}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke.command;","lastModifiedDate":"2022-08-31"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-31"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-31"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"import duke.TaskList;","lastModifiedDate":"2022-08-31"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"/** Represents the command to find tasks with given keyword that inherits from Command. */","lastModifiedDate":"2022-08-31"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2022-08-31"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"    private final String userInput;","lastModifiedDate":"2022-08-31"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"    public FindCommand(String userInput) {","lastModifiedDate":"2022-08-31"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2022-08-31"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-31"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-31"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2022-09-08"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"        String message \u003d \"\";","lastModifiedDate":"2022-08-31"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"        if (userInput.split(\" \").length \u003d\u003d 1) {","lastModifiedDate":"2022-08-31"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"            throw new DukeException(\"OOPS!!! The find command cannot have a missing query.\");","lastModifiedDate":"2022-09-02"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-31"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"        String query \u003d userInput.split(\" \")[1];","lastModifiedDate":"2022-08-31"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"        message +\u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2022-08-31"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"        message +\u003d taskList.findTaskThatContains(query);","lastModifiedDate":"2022-09-08"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-08"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"        return message;","lastModifiedDate":"2022-09-02"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-31"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-31"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-08-31"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"        return false;","lastModifiedDate":"2022-08-31"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-31"},{"lineNumber":34,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-31"}],"authorContributionMap":{"MinHeinA":34}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke.command;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"import duke.TaskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"/** Represents the command to list out Tasks in TaskList that inherits from Command. */","lastModifiedDate":"2022-08-31"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2022-08-26"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"    public String execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2022-09-08"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"        String message \u003d \"\";","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"        message +\u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2022-08-26"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"        message +\u003d taskList.printTaskList();","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"        return message;","lastModifiedDate":"2022-09-02"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-26"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-08-26"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"        return false;","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"MinHeinA":20}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke.command;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"import duke.TaskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"import duke.task.Task;","lastModifiedDate":"2022-08-30"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"/**","lastModifiedDate":"2022-08-31"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":" * Represents the command to mark specific Tasks in TaskList as completed or not completed","lastModifiedDate":"2022-08-31"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":" * that inherits from Command.","lastModifiedDate":"2022-08-31"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":" */","lastModifiedDate":"2022-08-31"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"    private final String userInput;","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"    private final boolean isMark;","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"    public MarkCommand(String userInput, boolean isMark) {","lastModifiedDate":"2022-08-26"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2022-08-26"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"        this.isMark \u003d isMark;","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-26"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2022-09-08"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"        String message \u003d \"\";","lastModifiedDate":"2022-08-26"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"        if (userInput.split(\" \").length \u003d\u003d 1) {","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"            throw new DukeException(\"OOPS!!! The mark/unmark command cannot have a missing index.\");","lastModifiedDate":"2022-09-02"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"        String index \u003d userInput.split(\" \")[1];","lastModifiedDate":"2022-08-26"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"        Task task \u003d taskList.updateTaskStatus(Integer.parseInt(index), isMark);","lastModifiedDate":"2022-08-26"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"        if (isMark) {","lastModifiedDate":"2022-08-26"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"            message +\u003d \"Nice! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2022-08-26"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"        } else {","lastModifiedDate":"2022-08-26"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"            message +\u003d \"OK, I\u0027ve marked this task as not done yet:\\n\";","lastModifiedDate":"2022-08-26"},{"lineNumber":34,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":35,"author":{"gitId":"MinHeinA"},"content":"        message +\u003d task.toString() + \"\\n\";","lastModifiedDate":"2022-08-26"},{"lineNumber":36,"author":{"gitId":"MinHeinA"},"content":"        storage.saveTaskList(taskList);","lastModifiedDate":"2022-08-26"},{"lineNumber":37,"author":{"gitId":"MinHeinA"},"content":"        return message;","lastModifiedDate":"2022-09-02"},{"lineNumber":38,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":39,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":40,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-26"},{"lineNumber":41,"author":{"gitId":"MinHeinA"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-08-26"},{"lineNumber":42,"author":{"gitId":"MinHeinA"},"content":"        return false;","lastModifiedDate":"2022-08-26"},{"lineNumber":43,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":44,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"MinHeinA":44}},{"path":"src/main/java/duke/command/PriorityCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke.command;","lastModifiedDate":"2022-09-10"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import duke.DukeException;","lastModifiedDate":"2022-09-10"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"import duke.Storage;","lastModifiedDate":"2022-09-10"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"import duke.TaskList;","lastModifiedDate":"2022-09-10"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"import duke.task.Task;","lastModifiedDate":"2022-09-10"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"public class PriorityCommand extends Command{","lastModifiedDate":"2022-09-10"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"    private final String userInput;","lastModifiedDate":"2022-09-10"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"    public PriorityCommand(String userInput) {","lastModifiedDate":"2022-09-10"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2022-09-10"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-09-10"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2022-09-10"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"        String message \u003d \"\";","lastModifiedDate":"2022-09-10"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"        if (userInput.split(\" \").length \u003c 3) {","lastModifiedDate":"2022-09-10"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"            throw new DukeException(\"OOPS!!! The priority command cannot have parameters. Example command is priority 1 high\");","lastModifiedDate":"2022-09-10"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"        String index \u003d userInput.split(\" \")[1];","lastModifiedDate":"2022-09-10"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"        String priorityString \u003d userInput.split(\" \")[2];","lastModifiedDate":"2022-09-10"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"        Task task \u003d taskList.updateTaskPriority(Integer.parseInt(index), priorityString);","lastModifiedDate":"2022-09-10"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"        message +\u003d \"OK, I\u0027ve marked set the priority of the task to \" + task.getPriorityString() + \"\\n\";","lastModifiedDate":"2022-09-10"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"        message +\u003d task.toString() + \"\\n\";","lastModifiedDate":"2022-09-10"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"        storage.saveTaskList(taskList);","lastModifiedDate":"2022-09-10"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"        return message;","lastModifiedDate":"2022-09-10"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-09-10"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-09-10"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"        return false;","lastModifiedDate":"2022-09-10"},{"lineNumber":34,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":35,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-09-10"}],"authorContributionMap":{"MinHeinA":35}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke.task;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-08-23"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-31"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"    private LocalDateTime endDate;","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"     * Returns a Deadline object.","lastModifiedDate":"2022-08-31"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"     * Throws a DukeException if the endDate is not parsable.","lastModifiedDate":"2022-08-31"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"     * @param taskName Name of the task","lastModifiedDate":"2022-08-31"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"     * @param endDate  Date in dd-MM-yyyy HHmm format","lastModifiedDate":"2022-08-31"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"     * @throws DukeException If date is not parsable","lastModifiedDate":"2022-08-31"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"    public Deadline(String taskName, String endDate) throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"        super(taskName);","lastModifiedDate":"2022-08-17"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"        assert !endDate.isEmpty() : \"End date should not be empty\";","lastModifiedDate":"2022-09-08"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"        try {","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"            this.endDate \u003d LocalDateTime.parse(endDate, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"));","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"        } catch (DateTimeParseException dateTimeParseException){","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"            throw new DukeException(\"OOPS!!! Cannot parse date. Enter date according to example, 02-12-2019 1800\");","lastModifiedDate":"2022-09-02"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"        return \"[D]\" + super.toString()","lastModifiedDate":"2022-08-31"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"                + \" (by: \" + this.endDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2022-08-31"},{"lineNumber":34,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":35,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"MinHeinA"},"content":"    public String toFileString() {","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"MinHeinA"},"content":"        return \"D\" + \"|\" + (this.getTaskStatus() ? \"1\" : \"0\") + \"|\" + this.getPriorityNumber() + \"|\"","lastModifiedDate":"2022-09-10"},{"lineNumber":39,"author":{"gitId":"MinHeinA"},"content":"                + this.getTaskName() + \"|\"","lastModifiedDate":"2022-09-10"},{"lineNumber":40,"author":{"gitId":"MinHeinA"},"content":"                + this.endDate.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"));","lastModifiedDate":"2022-08-25"},{"lineNumber":41,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":42,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"MinHeinA":42}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke.task;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-08-23"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-31"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"public class Event extends Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"    private LocalDateTime dateTime;","lastModifiedDate":"2022-08-31"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"     * Returns a Event object.","lastModifiedDate":"2022-08-31"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"     * Throws a DukeException if the time is not parsable.","lastModifiedDate":"2022-08-31"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"     * @param taskName Name of the task","lastModifiedDate":"2022-08-31"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"     * @param dateTime Date in dd-MM-yyyy HHmm format","lastModifiedDate":"2022-08-31"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"     * @throws DukeException If date is not parsable","lastModifiedDate":"2022-08-31"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"    public Event(String taskName, String dateTime) throws DukeException {","lastModifiedDate":"2022-08-31"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"        super(taskName);","lastModifiedDate":"2022-08-17"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"        assert !dateTime.isEmpty() : \"date time should not be empty\";","lastModifiedDate":"2022-09-08"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"        try {","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"            this.dateTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"));","lastModifiedDate":"2022-08-31"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"        } catch (DateTimeParseException dateTimeParseException){","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"            throw new DukeException(\"OOPS!!! Cannot parse date. Enter date according to example, 02-12-2019 1800\");","lastModifiedDate":"2022-09-02"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"        return \"[E]\" + super.toString() + \" (at: \"","lastModifiedDate":"2022-08-23"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"                + this.dateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2022-08-31"},{"lineNumber":34,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":35,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"MinHeinA"},"content":"    public String toFileString() {","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"MinHeinA"},"content":"        return \"E\" + \"|\" + (this.getTaskStatus() ? \"1\" : \"0\") + \"|\" + this.getPriorityNumber() + \"|\"","lastModifiedDate":"2022-09-10"},{"lineNumber":39,"author":{"gitId":"MinHeinA"},"content":"                + this.getTaskName() + \"|\"","lastModifiedDate":"2022-09-10"},{"lineNumber":40,"author":{"gitId":"MinHeinA"},"content":"                + this.dateTime.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"));","lastModifiedDate":"2022-08-31"},{"lineNumber":41,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":42,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"MinHeinA":42}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke.task;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import java.util.Locale;","lastModifiedDate":"2022-09-10"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"public abstract class Task {","lastModifiedDate":"2022-08-23"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"    private String taskName;","lastModifiedDate":"2022-08-16"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"    private boolean isDone;","lastModifiedDate":"2022-08-16"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"    private Priority priority;","lastModifiedDate":"2022-09-10"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"     * Returns a Task object.","lastModifiedDate":"2022-08-31"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"     * Initialises the Task with taskName variable and marks the Task as not done initially.","lastModifiedDate":"2022-08-31"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"     * @param taskName The name given to the task.","lastModifiedDate":"2022-08-31"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"    public Task(String taskName) {","lastModifiedDate":"2022-08-16"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2022-08-16"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-16"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"        this.priority \u003d Priority.LOW;","lastModifiedDate":"2022-09-10"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"    public enum Priority {","lastModifiedDate":"2022-09-10"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"        HIGH(1), LOW(3), MEDIUM(2);","lastModifiedDate":"2022-09-10"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"        private int value;","lastModifiedDate":"2022-09-10"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"        Priority (int value) {","lastModifiedDate":"2022-09-10"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"            this.value \u003d value;","lastModifiedDate":"2022-09-10"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"        public int getValue() {","lastModifiedDate":"2022-09-10"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"            return value;","lastModifiedDate":"2022-09-10"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"        public String getName() {","lastModifiedDate":"2022-09-10"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"            if (this.value \u003d\u003d 1) {","lastModifiedDate":"2022-09-10"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"                return \"High\";","lastModifiedDate":"2022-09-10"},{"lineNumber":34,"author":{"gitId":"MinHeinA"},"content":"            } else if (this.value \u003d\u003d 2) {","lastModifiedDate":"2022-09-10"},{"lineNumber":35,"author":{"gitId":"MinHeinA"},"content":"                return \"Medium\";","lastModifiedDate":"2022-09-10"},{"lineNumber":36,"author":{"gitId":"MinHeinA"},"content":"            } else {","lastModifiedDate":"2022-09-10"},{"lineNumber":37,"author":{"gitId":"MinHeinA"},"content":"                return \"Low\";","lastModifiedDate":"2022-09-10"},{"lineNumber":38,"author":{"gitId":"MinHeinA"},"content":"            }","lastModifiedDate":"2022-09-10"},{"lineNumber":39,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":40,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":41,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":42,"author":{"gitId":"MinHeinA"},"content":"    public void setPriority(Priority priority) {","lastModifiedDate":"2022-09-10"},{"lineNumber":43,"author":{"gitId":"MinHeinA"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2022-09-10"},{"lineNumber":44,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":45,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":46,"author":{"gitId":"MinHeinA"},"content":"    public void setPriority(int priorityNum) {","lastModifiedDate":"2022-09-10"},{"lineNumber":47,"author":{"gitId":"MinHeinA"},"content":"        if (priorityNum \u003d\u003d 1) {","lastModifiedDate":"2022-09-10"},{"lineNumber":48,"author":{"gitId":"MinHeinA"},"content":"            this.priority \u003d Priority.HIGH;","lastModifiedDate":"2022-09-10"},{"lineNumber":49,"author":{"gitId":"MinHeinA"},"content":"        } else if (priorityNum \u003d\u003d 2) {","lastModifiedDate":"2022-09-10"},{"lineNumber":50,"author":{"gitId":"MinHeinA"},"content":"            this.priority \u003d Priority.MEDIUM;","lastModifiedDate":"2022-09-10"},{"lineNumber":51,"author":{"gitId":"MinHeinA"},"content":"        } else if (priorityNum \u003d\u003d 3) {","lastModifiedDate":"2022-09-10"},{"lineNumber":52,"author":{"gitId":"MinHeinA"},"content":"            this.priority \u003d Priority.LOW;","lastModifiedDate":"2022-09-10"},{"lineNumber":53,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":54,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":55,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":56,"author":{"gitId":"MinHeinA"},"content":"    public void setPriority(String priorityString) {","lastModifiedDate":"2022-09-10"},{"lineNumber":57,"author":{"gitId":"MinHeinA"},"content":"        String name \u003d priorityString.toLowerCase().replaceAll(\" \", \"\");","lastModifiedDate":"2022-09-10"},{"lineNumber":58,"author":{"gitId":"MinHeinA"},"content":"        if(name.equals(\"high\")) {","lastModifiedDate":"2022-09-10"},{"lineNumber":59,"author":{"gitId":"MinHeinA"},"content":"            this.priority \u003d Priority.HIGH;","lastModifiedDate":"2022-09-10"},{"lineNumber":60,"author":{"gitId":"MinHeinA"},"content":"        } else if (name.equals(\"medium\")) {","lastModifiedDate":"2022-09-10"},{"lineNumber":61,"author":{"gitId":"MinHeinA"},"content":"            this.priority \u003d Priority.MEDIUM;","lastModifiedDate":"2022-09-10"},{"lineNumber":62,"author":{"gitId":"MinHeinA"},"content":"        } else if (name.equals(\"low\")) {","lastModifiedDate":"2022-09-10"},{"lineNumber":63,"author":{"gitId":"MinHeinA"},"content":"            this.priority \u003d Priority.LOW;","lastModifiedDate":"2022-09-10"},{"lineNumber":64,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":65,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":66,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":67,"author":{"gitId":"MinHeinA"},"content":"    public String getPriorityString() {","lastModifiedDate":"2022-09-10"},{"lineNumber":68,"author":{"gitId":"MinHeinA"},"content":"        return this.priority.getName();","lastModifiedDate":"2022-09-10"},{"lineNumber":69,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":70,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":71,"author":{"gitId":"MinHeinA"},"content":"    public int getPriorityNumber() {","lastModifiedDate":"2022-09-10"},{"lineNumber":72,"author":{"gitId":"MinHeinA"},"content":"        return this.priority.value;","lastModifiedDate":"2022-09-10"},{"lineNumber":73,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":74,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":75,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":76,"author":{"gitId":"MinHeinA"},"content":"     * Sets the status of the task according to the boolean parameter.","lastModifiedDate":"2022-08-31"},{"lineNumber":77,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":78,"author":{"gitId":"MinHeinA"},"content":"     * @param isDone True to mark task as done and false to mark task as not done","lastModifiedDate":"2022-08-31"},{"lineNumber":79,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":80,"author":{"gitId":"MinHeinA"},"content":"    public void setTaskStatus(boolean isDone) {","lastModifiedDate":"2022-08-16"},{"lineNumber":81,"author":{"gitId":"MinHeinA"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-08-16"},{"lineNumber":82,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":83,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":84,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":85,"author":{"gitId":"MinHeinA"},"content":"     * Returns the name of the task.","lastModifiedDate":"2022-08-31"},{"lineNumber":86,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":87,"author":{"gitId":"MinHeinA"},"content":"     * @return Name of the task.","lastModifiedDate":"2022-08-31"},{"lineNumber":88,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":89,"author":{"gitId":"MinHeinA"},"content":"    public String getTaskName() {","lastModifiedDate":"2022-08-16"},{"lineNumber":90,"author":{"gitId":"MinHeinA"},"content":"        return this.taskName;","lastModifiedDate":"2022-08-16"},{"lineNumber":91,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":92,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":93,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":94,"author":{"gitId":"MinHeinA"},"content":"     * Returns a boolean on whether the task is done.","lastModifiedDate":"2022-08-31"},{"lineNumber":95,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":96,"author":{"gitId":"MinHeinA"},"content":"     * @return True if the task is done, false if the task is not done.","lastModifiedDate":"2022-08-31"},{"lineNumber":97,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":98,"author":{"gitId":"MinHeinA"},"content":"    public Boolean getTaskStatus() {","lastModifiedDate":"2022-08-16"},{"lineNumber":99,"author":{"gitId":"MinHeinA"},"content":"        return this.isDone;","lastModifiedDate":"2022-08-16"},{"lineNumber":100,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":101,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":102,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":103,"author":{"gitId":"MinHeinA"},"content":"     * Returns the string representation of the task to be printed to user.","lastModifiedDate":"2022-08-31"},{"lineNumber":104,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":105,"author":{"gitId":"MinHeinA"},"content":"     * @return String representation of the task to be printed to user.","lastModifiedDate":"2022-08-31"},{"lineNumber":106,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":107,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":108,"author":{"gitId":"MinHeinA"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":109,"author":{"gitId":"MinHeinA"},"content":"        return (this.getTaskStatus() ? \"[X]\" : \"[ ]\") + \"[\"+ this.getPriorityString() + \"] \" + this.getTaskName();","lastModifiedDate":"2022-09-10"},{"lineNumber":110,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":111,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":112,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":113,"author":{"gitId":"MinHeinA"},"content":"     * Abstract method that returns the string representation of the task that is used to save into text file","lastModifiedDate":"2022-08-31"},{"lineNumber":114,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":115,"author":{"gitId":"MinHeinA"},"content":"     * @return String representation of the task that is used to save into text file.","lastModifiedDate":"2022-08-31"},{"lineNumber":116,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":117,"author":{"gitId":"MinHeinA"},"content":"    public abstract String toFileString();","lastModifiedDate":"2022-08-23"},{"lineNumber":118,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":119,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-16"}],"authorContributionMap":{"MinHeinA":119}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke.task;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"     * Returns a Todo object.","lastModifiedDate":"2022-08-31"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"     * @param taskName Name of the task","lastModifiedDate":"2022-08-31"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"    public Todo(String taskName) {","lastModifiedDate":"2022-08-17"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"        super(taskName);","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-08-17"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"    @Override","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"    public String toFileString() {","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"        return \"T\" + \"|\" + (this.getTaskStatus() ? \"1\" : \"0\") + \"|\" + this.getPriorityNumber() + \"|\" + this.getTaskName();","lastModifiedDate":"2022-09-10"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"MinHeinA":23}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-09-02"}],"authorContributionMap":{"MinHeinA":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"            \u003c/content\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2022-09-02"}],"authorContributionMap":{"MinHeinA":19}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-30"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"public class DeadlineTest {","lastModifiedDate":"2022-08-30"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"    @Test","lastModifiedDate":"2022-08-30"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"    public void instantiate_exceptionThrown() {","lastModifiedDate":"2022-08-30"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"        try {","lastModifiedDate":"2022-08-30"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"            new Deadline(\"Feed cat\", \"Invalid entry\");","lastModifiedDate":"2022-08-30"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-08-30"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"            assertEquals(\"OOPS!!! Cannot parse date. Enter date according to example, 02-12-2019 1800\", e.getMessage());","lastModifiedDate":"2022-09-10"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-30"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"    @Test","lastModifiedDate":"2022-08-30"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"    public void instantiate_success() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"        Deadline task \u003d new Deadline(\"\", \"02-12-2019 1800\");","lastModifiedDate":"2022-08-30"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(\"[D][ ][Low]  (by: Dec 02 2019)\", task.toString());","lastModifiedDate":"2022-09-10"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"    @Test","lastModifiedDate":"2022-08-30"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"    public void toString_success() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"        Deadline task \u003d new Deadline(\"Feed cat\", \"02-12-2019 1800\");","lastModifiedDate":"2022-08-30"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(\"[D][ ][Low] Feed cat (by: Dec 02 2019)\", task.toString());","lastModifiedDate":"2022-09-10"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"    @Test","lastModifiedDate":"2022-08-30"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"    public void toFileString_success() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"        Deadline task \u003d new Deadline(\"Feed cat\", \"02-12-2019 1800\");","lastModifiedDate":"2022-08-30"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(\"D|0|3|Feed cat|02-12-2019 1800\", task.toFileString());","lastModifiedDate":"2022-09-10"},{"lineNumber":34,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":35,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":36,"author":{"gitId":"MinHeinA"},"content":"    @Test","lastModifiedDate":"2022-08-30"},{"lineNumber":37,"author":{"gitId":"MinHeinA"},"content":"    public void setTaskStatus_success() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":38,"author":{"gitId":"MinHeinA"},"content":"        Deadline task \u003d new Deadline(\"Feed cat\", \"02-12-2019 1800\");","lastModifiedDate":"2022-08-30"},{"lineNumber":39,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(\"[D][ ][Low] Feed cat (by: Dec 02 2019)\", task.toString());","lastModifiedDate":"2022-09-10"},{"lineNumber":40,"author":{"gitId":"MinHeinA"},"content":"        task.setTaskStatus(true);","lastModifiedDate":"2022-08-30"},{"lineNumber":41,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(\"[D][X][Low] Feed cat (by: Dec 02 2019)\", task.toString());","lastModifiedDate":"2022-09-10"},{"lineNumber":42,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":43,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-30"}],"authorContributionMap":{"MinHeinA":43}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import duke.task.Event;","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-30"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"public class EventTest {","lastModifiedDate":"2022-08-30"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"    @Test","lastModifiedDate":"2022-08-30"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"    public void instantiate_exceptionThrown() {","lastModifiedDate":"2022-08-30"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"        try {","lastModifiedDate":"2022-08-30"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"            new Event(\"Feed cat\", \"Invalid entry\");","lastModifiedDate":"2022-08-30"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-08-30"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"            assertEquals(\"OOPS!!! Cannot parse date. Enter date according to example, 02-12-2019 1800\", e.getMessage());","lastModifiedDate":"2022-09-10"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"        }","lastModifiedDate":"2022-08-30"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"    @Test","lastModifiedDate":"2022-08-30"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"    public void instantiate_success() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"        Event task \u003d new Event(\"\", \"02-12-2019 1800\");","lastModifiedDate":"2022-08-30"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(\"[E][ ][Low]  (at: Dec 02 2019)\", task.toString());","lastModifiedDate":"2022-09-10"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"    @Test","lastModifiedDate":"2022-08-30"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"    public void toString_success() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"        Event task \u003d new Event(\"Feed cat\", \"02-12-2019 1800\");","lastModifiedDate":"2022-08-30"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(\"[E][ ][Low] Feed cat (at: Dec 02 2019)\", task.toString());","lastModifiedDate":"2022-09-10"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"    @Test","lastModifiedDate":"2022-08-30"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"    public void toFileString_success() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"        Event task \u003d new Event(\"Feed cat\", \"02-12-2019 1800\");","lastModifiedDate":"2022-08-30"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(\"E|0|3|Feed cat|02-12-2019 1800\", task.toFileString());","lastModifiedDate":"2022-09-10"},{"lineNumber":34,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":35,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":36,"author":{"gitId":"MinHeinA"},"content":"    @Test","lastModifiedDate":"2022-08-30"},{"lineNumber":37,"author":{"gitId":"MinHeinA"},"content":"    public void setTaskStatus_success() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":38,"author":{"gitId":"MinHeinA"},"content":"        Event task \u003d new Event(\"Feed cat\", \"02-12-2019 1800\");","lastModifiedDate":"2022-08-30"},{"lineNumber":39,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(\"[E][ ][Low] Feed cat (at: Dec 02 2019)\", task.toString());","lastModifiedDate":"2022-09-10"},{"lineNumber":40,"author":{"gitId":"MinHeinA"},"content":"        task.setTaskStatus(true);","lastModifiedDate":"2022-08-30"},{"lineNumber":41,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(\"[E][X][Low] Feed cat (at: Dec 02 2019)\", task.toString());","lastModifiedDate":"2022-09-10"},{"lineNumber":42,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":43,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-30"}],"authorContributionMap":{"MinHeinA":43}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"public class StorageTest {","lastModifiedDate":"2022-08-30"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"    @Test","lastModifiedDate":"2022-08-30"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"    public void loadTest_success() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"        Storage storage \u003d new Storage(\"data/test.txt\");","lastModifiedDate":"2022-08-30"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"        TaskList taskList \u003d new TaskList(storage.loadTaskList());","lastModifiedDate":"2022-08-30"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(\"1.[D][ ][High] feed cat (by: Dec 12 2020)\\n2.[T][ ][Medium] feed dog\\n\",taskList.printTaskList());","lastModifiedDate":"2022-09-10"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-30"}],"authorContributionMap":{"MinHeinA":14}},{"path":"src/test/java/duke/TasklistTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import duke.task.Task;","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-30"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"public class TaskListTest {","lastModifiedDate":"2022-08-30"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"    @Test","lastModifiedDate":"2022-08-30"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"    public void addTest() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"        Todo todo \u003d new Todo(\"feed cat\");","lastModifiedDate":"2022-08-30"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-08-30"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"        taskList.addTask(todo);","lastModifiedDate":"2022-08-30"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(\"[T][ ][Low] feed cat\", taskList.getTaskAtIndex(1).toString());","lastModifiedDate":"2022-09-10"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"    @Test","lastModifiedDate":"2022-08-30"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"    public void deleteTest() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"        Todo todo \u003d new Todo(\"feed cat\");","lastModifiedDate":"2022-08-30"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-08-30"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"        taskList.addTask(todo);","lastModifiedDate":"2022-08-30"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(1, taskList.getTaskListSize());","lastModifiedDate":"2022-08-30"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"        taskList.deleteTask(1);","lastModifiedDate":"2022-08-30"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(0, taskList.getTaskListSize());","lastModifiedDate":"2022-08-30"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-30"}],"authorContributionMap":{"MinHeinA":27}},{"path":"src/test/java/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"package duke;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-30"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"public class TodoTest {","lastModifiedDate":"2022-08-30"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"    @Test","lastModifiedDate":"2022-08-30"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"    public void instantiate_success() {","lastModifiedDate":"2022-08-30"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"        Todo task \u003d new Todo(\"\");","lastModifiedDate":"2022-08-30"},{"lineNumber":12,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(\"[T][ ][Low] \", task.toString());","lastModifiedDate":"2022-09-10"},{"lineNumber":13,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":14,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":15,"author":{"gitId":"MinHeinA"},"content":"    @Test","lastModifiedDate":"2022-08-30"},{"lineNumber":16,"author":{"gitId":"MinHeinA"},"content":"    public void toString_success() {","lastModifiedDate":"2022-08-30"},{"lineNumber":17,"author":{"gitId":"MinHeinA"},"content":"        Todo task \u003d new Todo(\"Feed cat\");","lastModifiedDate":"2022-08-30"},{"lineNumber":18,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(\"[T][ ][Low] Feed cat\", task.toString());","lastModifiedDate":"2022-09-10"},{"lineNumber":19,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":20,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":21,"author":{"gitId":"MinHeinA"},"content":"    @Test","lastModifiedDate":"2022-08-30"},{"lineNumber":22,"author":{"gitId":"MinHeinA"},"content":"    public void toFileString_success() {","lastModifiedDate":"2022-08-30"},{"lineNumber":23,"author":{"gitId":"MinHeinA"},"content":"        Todo task \u003d new Todo(\"Feed cat\");","lastModifiedDate":"2022-08-30"},{"lineNumber":24,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(\"T|0|3|Feed cat\", task.toFileString());","lastModifiedDate":"2022-09-10"},{"lineNumber":25,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":26,"author":{"gitId":"MinHeinA"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":27,"author":{"gitId":"MinHeinA"},"content":"    @Test","lastModifiedDate":"2022-08-30"},{"lineNumber":28,"author":{"gitId":"MinHeinA"},"content":"    public void setTaskStatus_success() {","lastModifiedDate":"2022-08-30"},{"lineNumber":29,"author":{"gitId":"MinHeinA"},"content":"        Todo task \u003d new Todo(\"Feed cat\");","lastModifiedDate":"2022-08-30"},{"lineNumber":30,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(\"[T][ ][Low] Feed cat\", task.toString());","lastModifiedDate":"2022-09-10"},{"lineNumber":31,"author":{"gitId":"MinHeinA"},"content":"        task.setTaskStatus(true);","lastModifiedDate":"2022-08-30"},{"lineNumber":32,"author":{"gitId":"MinHeinA"},"content":"        assertEquals(\"[T][X][Low] Feed cat\", task.toString());","lastModifiedDate":"2022-09-10"},{"lineNumber":33,"author":{"gitId":"MinHeinA"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":34,"author":{"gitId":"MinHeinA"},"content":"}","lastModifiedDate":"2022-08-30"}],"authorContributionMap":{"MinHeinA":34}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"MinHeinA"},"content":"todo borrow book","lastModifiedDate":"2022-08-17"},{"lineNumber":2,"author":{"gitId":"MinHeinA"},"content":"list","lastModifiedDate":"2022-08-17"},{"lineNumber":3,"author":{"gitId":"MinHeinA"},"content":"deadline return book /by Sunday","lastModifiedDate":"2022-08-17"},{"lineNumber":4,"author":{"gitId":"MinHeinA"},"content":"list","lastModifiedDate":"2022-08-17"},{"lineNumber":5,"author":{"gitId":"MinHeinA"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2022-08-17"},{"lineNumber":6,"author":{"gitId":"MinHeinA"},"content":"list","lastModifiedDate":"2022-08-17"},{"lineNumber":7,"author":{"gitId":"MinHeinA"},"content":"mark 1","lastModifiedDate":"2022-08-17"},{"lineNumber":8,"author":{"gitId":"MinHeinA"},"content":"list","lastModifiedDate":"2022-08-17"},{"lineNumber":9,"author":{"gitId":"MinHeinA"},"content":"unmark 1","lastModifiedDate":"2022-08-17"},{"lineNumber":10,"author":{"gitId":"MinHeinA"},"content":"list","lastModifiedDate":"2022-08-17"},{"lineNumber":11,"author":{"gitId":"MinHeinA"},"content":"bye","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"MinHeinA":11}}]
