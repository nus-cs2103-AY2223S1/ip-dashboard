{"authorDailyContributionsMap":{"sikai00":[{"date":"2022-08-16","commitResults":[{"hash":"b43e3e85dc7f317d826615c9f38554cb86ba8dbb","messageTitle":"Duke.java: Add pretty print method to format all messages","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":26,"deletions":8}}},{"hash":"cc194fb7cd49d37dd41fd7d9ffce9b69da25befb","messageTitle":"Duke.java: Complete Level 1. Greet, Echo, Exit","messageBody":"","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":1}}},{"hash":"78d21d157dcee8c0f23f0960ea0b8d44f5396fe5","messageTitle":"Duke.java: Complete Level 2: Add, List","messageBody":"Refactored Duke into its own object\n\nDuke now has instance level methods and attributes. This is primarily\ndone to allow better future code expansion.\n\nChange usrCommand variable to usrInput\n\nusrCommand is misleading as tasks are not commands. The use case of the\ncommand line have expanded to include addition of new tasks without\ncommands but by simply entering the task into the command line.\n","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":52,"deletions":13}}},{"hash":"2610c25eb5d413b0221b4c63e77117722d1cb716","messageTitle":"Change representation of tasks into its own class","messageBody":"This is a more natural approach to represent tasks. Task can also have\nmore information beyond its title for future code extension. A TaskList\nclass is also added to manage and store these tasks. These changes allow\nfor abstraction barriers to be erected.\n","fileTypesAndContributionMap":{"java":{"insertions":99,"deletions":0}}},{"hash":"b44afd64eadae0b2c11c6c4bfe7a9af28faa1059","messageTitle":"Complete Level 3. Mark as Done","messageBody":"","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":46,"deletions":24}}}]},{"date":"2022-08-17","commitResults":[{"hash":"d87289ec1677f980899ab5753c1388e330e71fd9","messageTitle":"Add support for different types of task","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":41,"deletions":0}}},{"hash":"3235ad5255e3c07aaed09025a6c2e04ce47a6d2c","messageTitle":"Task.java: Change to an abstract class","messageBody":"We are now dividing task into 3 different types. As such we change Task\ninto an abstract class since these different types are all Task. This is\nto allow cleaner code and also to maintain our use of TaskList.\n","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":7}}},{"hash":"7876a94079e80a627dbcdab8731ada75e9ff1526","messageTitle":"TaskList.java: Add size method","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":9,"deletions":0}}},{"hash":"c6d841f573b72e0c39769376c1bf3b6a7e79abae","messageTitle":"Complete Level 4. ToDos, Events, Deadlines","messageBody":"addTask now takes in Task instead of String.\n\nThis is to pass the logic of deciding what kind of a task to the main\nlogic loop. This is due to the different fields a task may have. Making\naddTask handle such decisions can lead to many parameters needed and\nhard to maintain.\n\nMessages are now divided into start, content and end.\n\nWe now require intro messages as well as end messages for any command\ninput. Splitting message up will allow us to have greater readability.\n","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":114,"deletions":88}}},{"hash":"e147509d0a3cda7a5fb64e570fe55572a3b4e46f","messageTitle":"Duke.java: Fix and tidy up messages to match change in style","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":6,"deletions":6}}},{"hash":"63af71ae1ee8eb2cb780df3174bc3574c530f0af","messageTitle":"Duke.java: Refactor main loop if-else into switch","messageBody":"Using if-else statements for main loop had bad readability. This is due to the denseness of the statements. Using switch statement will allow for better readability since the conditions are clear. One trade off is that the \"bye\" condition cannot exist within the switch statement due to the location of break. However, readability is more important and the \"bye\" condition is close enough to the switch statements.\n","fileTypesAndContributionMap":{"java":{"insertions":35,"deletions":29}}},{"hash":"c36f94ba63382717cbfcaa9e405e8997bb58d745","messageTitle":"Complete A-TextUiTesting","messageBody":"After refactoring of code in the previous commit, the automated Text UI\ntesting was used to check for regressions.\n","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":8,"deletions":0}}},{"hash":"35f7a302ea9a98232aa9cea95c030d1e36fbaed2","messageTitle":"Change wording from title to description to match guide","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":14,"deletions":14}}},{"hash":"f190a777b469ebf17ed05c9ecad33a3b0c201a98","messageTitle":"Complete Level 5. Handle Errors","messageBody":"Other changes:\nChanged from 2 whitespaces for tabs to 4 as per guidelines.\n","tags":["Level-5"],"fileTypesAndContributionMap":{"java":{"insertions":242,"deletions":166}}},{"hash":"41561df11b03aed7211e06724822629f8bd0fee3","messageTitle":"Complete Level 6. Delete","messageBody":"","tags":["Level-6"],"fileTypesAndContributionMap":{"java":{"insertions":13,"deletions":0}}}]},{"date":"2022-08-18","commitResults":[{"hash":"5f70e7a2c97de9abf5769d249c7d76e1f54a9644","messageTitle":"Duke.java: Use getMessage() to print exception instead of toString()","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"1ac1e6ec63e50370cdd9ffe5a42ccf3523cb51ce","messageTitle":"Duke.java: Make some methods throw exceptions","messageBody":"This is done as it is more natural for methods to check these inputs\nrather than for the main application logic to check.\n","fileTypesAndContributionMap":{"java":{"insertions":88,"deletions":87}}},{"hash":"200b6b7ce0e08e3a73bf523eb695b63536975168","messageTitle":"Duke.java: Add message for no tasks remaining for  viewAllTask","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":3}}},{"hash":"6e92d809cffd42d833b47158204465a92e948be2","messageTitle":"Update A-TextUiTesting to match new message","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":10,"deletions":6}}},{"hash":"593be5b37aed79a41f462a9d565f82c5f8d0756d","messageTitle":"Duke.java: Move greetings/good bye into their own method","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":4}}},{"hash":"6fdcb26d78654e27341e25fa2e6261f966a2e3df","messageTitle":"Complete A-Enums","messageBody":"Command.java: getIfPresent\nThis is implemented in order to handle any inputs that may be invalid.\nThis is because by default, Enum.valueOf throws an\nIllegalArgumentException upon an invalid argument.\n\nAs it is likely that the input can be invalid and this is more of an\nchecked exception, let\u0027s use getIfPresent to handle wrong user inputs\nand return Command.INVALID to signify wrong user inputs.\n","tags":["A-Enums"],"fileTypesAndContributionMap":{"java":{"insertions":40,"deletions":11}}},{"hash":"ad859ce2f225eee5c7758456097975f6b68214af","messageTitle":"Duke.java: Move runCommand into its own method","messageBody":"The entry point of Duke.java is overcrowded as command handling code are\nall written in it. By moving runCommand into its own method, we are able\nto better compartmentalize our code. We can move the main application\nloop into its own method as well. This allows our entry point to simply\nbe the driver.\n","fileTypesAndContributionMap":{"java":{"insertions":113,"deletions":90}}},{"hash":"18f240385076105c3260ab05a4c4891969874c2c","messageTitle":"Duke.java Format to fit character limit per line.","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":26,"deletions":13}}},{"hash":"a388ed9c72cffe68b374181ab551ca5454bf1e94","messageTitle":"EXPECTED.TXT: Add test for delete","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":0}}},{"hash":"5f6303c6946f43e05fcdd31c4897c24b6e2117f0","messageTitle":"Duke.java: Handle NumberFormatException in parseInt","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":23,"deletions":11}}},{"hash":"961ac4ca1477f7b239f28a14c35d25756ce0a22f","messageTitle":"Add test for invalid argument for DELETE","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":0}}}]},{"date":"2022-08-20","commitResults":[{"hash":"21291a14172f288ddaa8467a615376a5dacba135","messageTitle":"Duke.java: Fix switch block to follow style","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":91,"deletions":91}}}]},{"date":"2022-08-23","commitResults":[{"hash":"74ef340eba00890b3983325c86ca31b7103cbb8a","messageTitle":"Add methods to Task to retrieve task type and time","messageBody":"There is no way to get the task type easily and no way to get the time\nof the event (whether it is deadline or event). These methods are\nnecessary as they are useful for parsing, especially in persistent\nstorage.\n","fileTypesAndContributionMap":{"java":{"insertions":35,"deletions":0}}},{"hash":"e3d922c01f3f62bc9cf5877a56863b0d67e5f05d","messageTitle":"Add Storage to handle persistent storage feature","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":101,"deletions":0}}},{"hash":"eac4ab571764723fe0e328ef38f814cc1341851d","messageTitle":"Complete Level 7. Save","messageBody":"Constructor no longer initializes a TaskList. It is more natural for\nstartDuke() to initialize a TaskList as a TaskList is only needed when\nDuke is started. Furthermore, this allows us to add the logic to read\nfrom storage in a cleaner fashion (inside startDuke).\n\nOther changes:\naddTask, deleteTask, markTask and unmarkTask will now make changes to\nthe persistent storage file using Storage\u0027s static methods.\n","tags":["Level-7"],"fileTypesAndContributionMap":{"java":{"insertions":35,"deletions":25}}},{"hash":"e6d86a7aa3f0762cd325bb0eefb53a26cdc1b30f","messageTitle":"Complete Level 8. Dates and Times","messageBody":"Change date from string to LocalDateTime for all tasks with date\nThis allows us to read and parse dates easier, as well as print dates\nusing inbuilt formatters.\n","tags":["Level-8"],"fileTypesAndContributionMap":{"java":{"insertions":75,"deletions":14}}},{"hash":"1ecb683e545a6d4f51a15e9a160e3b8b93046876","messageTitle":"Duke.java: Normalise all messages to not have space after colon","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}},{"hash":"0c75547ddc0b1ddb1d19585fe2b9c5fbb164c8d7","messageTitle":"Update automated text-ui-text","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":2}}},{"hash":"eb092af4248dc28547d02bf77fb07706e1eb37aa","messageTitle":"Complete A-MoreOOP","messageBody":"","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":3},"java":{"insertions":425,"deletions":335}}},{"hash":"36107ccc22e2831e272b82e7dabdbf0808d62fe5","messageTitle":"Complete A-Packages","messageBody":"","tags":["A-Packages"],"fileTypesAndContributionMap":{"java":{"insertions":121,"deletions":19}}}]},{"date":"2022-08-24","commitResults":[{"hash":"d28d4365960363460117110a2a0224c85160f47d","messageTitle":"Complete A-Gradle. Use Gradle","messageBody":"","tags":["A-Gradle","A-CheckStyle"],"fileTypesAndContributionMap":{"gradle":{"insertions":6,"deletions":1},"txt":{"insertions":0,"deletions":0},"java":{"insertions":6,"deletions":6}}}]},{"date":"2022-08-25","commitResults":[{"hash":"2c58e988b000b7c9bc7a29b749cf4995e65fbcf7","messageTitle":"Complete A-JUnit. Add JUnit Tests","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":181,"deletions":16}}},{"hash":"438fc371b970a0474decf3adec275b92757a3332","messageTitle":"Duke.java: Fix run()","messageBody":"","tags":["A-Jar","A-JUnit"],"fileTypesAndContributionMap":{"java":{"insertions":9,"deletions":12}}}]},{"date":"2022-08-26","commitResults":[{"hash":"6dd1d6790867ed9aa826b8f50e7b648cb76d0c73","messageTitle":"Complete A-JavaDoc. JavaDoc","messageBody":"","tags":["A-JavaDoc"],"fileTypesAndContributionMap":{"java":{"insertions":261,"deletions":60}}},{"hash":"e91fac88f8453145177b30c227a525a503aa7960","messageTitle":"Complete A-CodingStandard. Follow the Coding Standard","messageBody":"","tags":["A-CodingStandard"],"fileTypesAndContributionMap":{"java":{"insertions":30,"deletions":28}}},{"hash":"7b9276f48d00f0e56c170735481cf8f681bcea2d","messageTitle":"Complete Level 9. Find","messageBody":"","tags":["Level-9"],"fileTypesAndContributionMap":{"java":{"insertions":76,"deletions":6}}},{"hash":"b0a27b9dcc4d910b4110f833bd4c280f3fc602b2","messageTitle":"Parser.java: Fix checkstyle error","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":8}}},{"hash":"9286574f6405b3173cdfe00b8bc05b4ee2ddd9f2","messageTitle":"Add line break for JavaDoc between description and param","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":0,"deletions":0},"java":{"insertions":27,"deletions":0}}}]},{"date":"2022-08-30","commitResults":[{"hash":"243c86a3fea1ff742bb6e09e81cd16e60e278a2b","messageTitle":"Refactor Storage.java into instance-based","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":159,"deletions":74}}},{"hash":"6049f33086ffb4783d5dbb7bfe559f1cf7c2e2f9","messageTitle":"Style code to comply with coding standard","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":26,"deletions":11}}}]},{"date":"2022-08-31","commitResults":[{"hash":"f7ae041ead1b0dfdbc7eaa6f6010e18f865b3856","messageTitle":"Complete basic integration of GUI with JavaFX","messageBody":"Bugs:\nNo exit message after user inputs \u0027bye\u0027\nCLI-related artifacts still remains\n","fileTypesAndContributionMap":{"gradle":{"insertions":16,"deletions":1},"fxml":{"insertions":35,"deletions":0},"java":{"insertions":198,"deletions":48}}},{"hash":"536bfaf4f0bda2350eb7497e2b0a5160ec98061d","messageTitle":"Complete Level 10. GUI","messageBody":"","tags":["Level-10"],"fileTypesAndContributionMap":{"java":{"insertions":81,"deletions":52}}},{"hash":"6e07dacd8efe1dfb45d43c24359a35098c3649a0","messageTitle":"Add credits for JavaFX Components","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":2}}},{"hash":"1ab887da8c22e6315a2ab201bab45a72de9fa000","messageTitle":"Remove unused Ui files and related methods to them","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":0,"deletions":16},"java":{"insertions":10,"deletions":194},"bat":{"insertions":0,"deletions":21},"sh":{"insertions":0,"deletions":38}}},{"hash":"130938a026b80244e272a0be0a0ab8d709e4229e","messageTitle":"CommandResult.java: Add JavaDoc","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":0}}},{"hash":"e6b597bb96992b795aadd79aa878121718380d2e","messageTitle":"DialogBox.fxml: Add padding to label","messageBody":"","fileTypesAndContributionMap":{"fxml":{"insertions":6,"deletions":3}}},{"hash":"ba1d2446878432ade407f0824d07444a9c842539","messageTitle":"Main.java: Set application to have title","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":0}}}]},{"date":"2022-09-04","commitResults":[{"hash":"b8a19bed1f0ff11c2ec51648307f1de577acf92d","messageTitle":"Write test for findTask","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":50,"deletions":3}}},{"hash":"afd76066dcc2f86164ac766136d8ab6225cd1cb1","messageTitle":"Use String.contains instead of regex","messageBody":"The findTask method uses regex to match for keywords. This is\nunnecessary when there is a better and simpler method to perform the\nsame action.\n\nLet\u0027s practice KISS and use String.contains to find keywords instead.\n","fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":20}}},{"hash":"2f21fb54679f17496dd3f31650985d5179267c4d","messageTitle":"Refactor code","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":187,"deletions":106}}},{"hash":"98f70e543fb80dee1e565f718dbee7a691d8ed73","messageTitle":"Replace use of DukeException with CommandResult","messageBody":"DukeException serves no real functional purpose with the creation of\nCommandResult. It only messes up the code and makes it harder to\nnavigate and untidy. CommandResult can already encapsulate messages,\nincluding both success and failure messages, to be sent to the users.\nSince exceptions are used to handle user fault, it is okay for the user\nto see the exception (which actually complies with previous behaviour).\n\nLet\u0027s remove the use of DukeException and wrap error messages that the\nuser is supposed to see anyway within the CommandResult.\n","tags":["A-FullCommitMessage"],"fileTypesAndContributionMap":{"java":{"insertions":16,"deletions":41}}},{"hash":"5b8d1d42bb3a6c10a4c9820763ad951db1b7ef79","messageTitle":"Fix minor extra newline","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":2}}},{"hash":"4b512347e1e5ba0bfdc886cf0693bf7bc81d1e99","messageTitle":"Complete A-Assertions. Use Assertions","messageBody":"","tags":["A-Assertions"],"fileTypesAndContributionMap":{"gradle":{"insertions":1,"deletions":0},"java":{"insertions":9,"deletions":1}}},{"hash":"5966e88d916dd7d9a18cabb67f2c235744f269fa","messageTitle":"Complete A-Streams. Use Streams","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":9}}}]}]},"authorFileTypeContributionMap":{"sikai00":{"java":1405,"md":0,"fxml":38,"sh":0,"bat":0,"gradle":22,"txt":0}},"authorContributionVariance":{"sikai00":103994.56},"authorDisplayNameMap":{"sikai00":"CS2103T-W16-4 CHAN.. KAI"}}
