[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2022-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"checkstyle {","lastModifiedDate":"2022-09-01"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-09-01"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-09-01"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2022-09-02"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-09-02"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-09-02"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-09-02"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-09-02"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-09-02"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-09-02"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-09-02"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-09-02"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-09-02"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-09-02"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-09-02"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-09-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2022-09-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"marclzh":20,"-":40}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-08-26"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":" * This class encapsulates the commands that the user can input.","lastModifiedDate":"2022-08-26"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-08-26"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"public enum Command {","lastModifiedDate":"2022-08-25"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"    TODO(\"todo\"),","lastModifiedDate":"2022-08-25"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"    DEADLINE(\"deadline\"),","lastModifiedDate":"2022-08-25"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"    EVENT(\"event\"),","lastModifiedDate":"2022-08-25"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"    LIST(\"list\"),","lastModifiedDate":"2022-08-25"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"    MARK(\"mark\"),","lastModifiedDate":"2022-08-25"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"    UNMARK(\"unmark\"),","lastModifiedDate":"2022-08-25"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"    DELETE(\"delete\"),","lastModifiedDate":"2022-08-25"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"    FIND(\"find\"),","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"    BYE(\"bye\");","lastModifiedDate":"2022-08-25"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"    /* The input command by the user. */","lastModifiedDate":"2022-08-26"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"    private final String inputCommand;","lastModifiedDate":"2022-08-25"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"     * Constructor for the command enum.","lastModifiedDate":"2022-08-25"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-25"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"     * @param command input command","lastModifiedDate":"2022-08-25"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"    Command(String command) {","lastModifiedDate":"2022-08-25"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"        inputCommand \u003d command;","lastModifiedDate":"2022-09-02"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"     * Returns the command if given a correct command.","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-25"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"     * @param command Input command by user.","lastModifiedDate":"2022-08-25"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"     * @return Enum value corresponding to the input command.","lastModifiedDate":"2022-08-25"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"     * @throws IllegalArgumentException if invalid command is given.","lastModifiedDate":"2022-08-25"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"    public static Command getCommand(String command) throws IllegalArgumentException {","lastModifiedDate":"2022-08-25"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"        for (Command c : Command.values()) {","lastModifiedDate":"2022-08-25"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"            if (command.equals(c.inputCommand)) {","lastModifiedDate":"2022-08-25"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"                return c;","lastModifiedDate":"2022-08-25"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"            }","lastModifiedDate":"2022-08-25"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"        throw new IllegalArgumentException(\"No such available command, \" + \"\\\"\" + command + \"\\\" please try again.\\n\");","lastModifiedDate":"2022-08-26"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-08-25"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"marclzh":45}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-25"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-17"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-01"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import duke.gui.UI;","lastModifiedDate":"2022-09-02"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import duke.task.Task;","lastModifiedDate":"2022-09-01"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-08-17"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":" * This class is the main logic unit for Duke","lastModifiedDate":"2022-08-26"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-08-17"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"public class Duke {","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"    /* Defined Constants for output */","lastModifiedDate":"2022-09-09"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"    private static final String NO_INDEX_MESSAGE \u003d \"Did you forget to input an index behind your command?\";","lastModifiedDate":"2022-09-09"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"    private static final String UNEXPECTED_TERMINATION_MESSAGE \u003d \"Unexpected error in Duke\";","lastModifiedDate":"2022-09-09"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-09"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"    /* Handles task list logic. */","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"     * Constructor for the Duke Chat bot.","lastModifiedDate":"2022-08-26"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"    public Duke() {","lastModifiedDate":"2022-08-26"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();","lastModifiedDate":"2022-08-26"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"        Storage.load(tasks);","lastModifiedDate":"2022-09-01"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-09-02"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"     * Placeholder for now.","lastModifiedDate":"2022-09-02"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-09-02"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"     * @param in User\u0027s input.","lastModifiedDate":"2022-09-02"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"     * @return Output by Elp\u0027s logic unit to return to the user.","lastModifiedDate":"2022-09-02"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"    public String getResponse(String in) {","lastModifiedDate":"2022-09-02"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"        // Splits the input to retrieve possible commands.","lastModifiedDate":"2022-08-17"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"        assert in !\u003d null : \"Input is null!\";","lastModifiedDate":"2022-09-08"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"        try {","lastModifiedDate":"2022-09-02"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"            Parser.parseInput(in);","lastModifiedDate":"2022-08-26"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2022-09-02"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"            return e.getMessage();","lastModifiedDate":"2022-09-02"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-09-02"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"            return NO_INDEX_MESSAGE;","lastModifiedDate":"2022-09-09"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-09-02"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"        Command command \u003d Parser.getUserCommand();","lastModifiedDate":"2022-08-26"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"        String userInstructions \u003d Parser.getUserInstructions();","lastModifiedDate":"2022-08-26"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"        assert command !\u003d null : \"No command!\";","lastModifiedDate":"2022-09-08"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"        assert userInstructions !\u003d null : \"No instructions!\";","lastModifiedDate":"2022-09-08"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"        // Break out of loop","lastModifiedDate":"2022-08-17"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"        if (command \u003d\u003d Command.BYE) {","lastModifiedDate":"2022-08-18"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"            return UI.goodbye();","lastModifiedDate":"2022-09-02"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-17"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"        // List out current tasks in the list","lastModifiedDate":"2022-08-17"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"        if (command \u003d\u003d Command.LIST) {","lastModifiedDate":"2022-08-18"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"            return taskList.printTaskList();","lastModifiedDate":"2022-09-02"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-18"},{"lineNumber":60,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"        if (command \u003d\u003d Command.MARK || command \u003d\u003d Command.UNMARK) {","lastModifiedDate":"2022-08-18"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"            return taskList.taskMarker(command, userInstructions);","lastModifiedDate":"2022-09-02"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-18"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":65,"author":{"gitId":"marclzh"},"content":"        if (command \u003d\u003d Command.FIND) {","lastModifiedDate":"2022-08-26"},{"lineNumber":66,"author":{"gitId":"marclzh"},"content":"            return taskList.findTask(userInstructions);","lastModifiedDate":"2022-09-02"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":69,"author":{"gitId":"marclzh"},"content":"        if (command \u003d\u003d Command.DELETE) {","lastModifiedDate":"2022-08-18"},{"lineNumber":70,"author":{"gitId":"marclzh"},"content":"            try {","lastModifiedDate":"2022-08-17"},{"lineNumber":71,"author":{"gitId":"marclzh"},"content":"                return taskList.deleteTask(userInstructions);","lastModifiedDate":"2022-09-02"},{"lineNumber":72,"author":{"gitId":"marclzh"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-08-17"},{"lineNumber":73,"author":{"gitId":"marclzh"},"content":"                return UI.printDeleteErrorMessage();","lastModifiedDate":"2022-09-02"},{"lineNumber":74,"author":{"gitId":"marclzh"},"content":"            }","lastModifiedDate":"2022-08-17"},{"lineNumber":75,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-18"},{"lineNumber":76,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":77,"author":{"gitId":"marclzh"},"content":"        if (command \u003d\u003d Command.TODO || command \u003d\u003d Command.DEADLINE || command \u003d\u003d Command.EVENT) {","lastModifiedDate":"2022-08-18"},{"lineNumber":78,"author":{"gitId":"marclzh"},"content":"            try {","lastModifiedDate":"2022-08-17"},{"lineNumber":79,"author":{"gitId":"marclzh"},"content":"                return taskList.addTask(command, userInstructions);","lastModifiedDate":"2022-09-02"},{"lineNumber":80,"author":{"gitId":"marclzh"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-08-17"},{"lineNumber":81,"author":{"gitId":"marclzh"},"content":"                return UI.printDukeExceptionMessage(e);","lastModifiedDate":"2022-09-02"},{"lineNumber":82,"author":{"gitId":"marclzh"},"content":"            } catch (IOException e) {","lastModifiedDate":"2022-08-25"},{"lineNumber":83,"author":{"gitId":"marclzh"},"content":"                return e.getMessage();","lastModifiedDate":"2022-09-02"},{"lineNumber":84,"author":{"gitId":"marclzh"},"content":"            }","lastModifiedDate":"2022-08-17"},{"lineNumber":85,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-17"},{"lineNumber":86,"author":{"gitId":"marclzh"},"content":"        return UNEXPECTED_TERMINATION_MESSAGE;","lastModifiedDate":"2022-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"marclzh":86,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke;","lastModifiedDate":"2022-09-02"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-09-02"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-09-02"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2022-09-02"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-09-02"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"public class Launcher {","lastModifiedDate":"2022-09-02"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-09-02"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2022-09-02"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-09-02"}],"authorContributionMap":{"marclzh":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke;","lastModifiedDate":"2022-09-02"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-02"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import duke.gui.MainWindow;","lastModifiedDate":"2022-09-02"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-09-02"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-09-02"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-09-02"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-09-02"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-09-02"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-09-02"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-09-02"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2022-09-02"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-09-02"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"public class Main extends Application {","lastModifiedDate":"2022-09-02"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2022-09-02"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"    private Image appIcon \u003d new Image(this.getClass().getResourceAsStream(\"/images/elp.png\"));","lastModifiedDate":"2022-09-15"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-09-02"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2022-09-02"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"        try {","lastModifiedDate":"2022-09-02"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2022-09-02"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2022-09-02"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2022-09-02"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"            stage.setScene(scene);","lastModifiedDate":"2022-09-02"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"            // Initialise stage","lastModifiedDate":"2022-09-02"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"            stage.setTitle(\"Elp\");","lastModifiedDate":"2022-09-02"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"            stage.setResizable(false);","lastModifiedDate":"2022-09-02"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"            stage.getIcons().add(appIcon);","lastModifiedDate":"2022-09-02"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2022-09-02"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"            stage.show();","lastModifiedDate":"2022-09-02"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-09-02"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-09-02"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-09-02"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-09-02"}],"authorContributionMap":{"marclzh":38}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-08-26"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":" * This class handles the logic of extrapolating the keywords from the whole command.","lastModifiedDate":"2022-08-26"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-08-26"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"public class Parser {","lastModifiedDate":"2022-08-26"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"    /* User Input Fields.*/","lastModifiedDate":"2022-08-26"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"    private static Command userCommand;","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"    private static String userInstructions;","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"     * Parses input by user into a Command enum for interpretation by Elp.","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"     * @param in user input.","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"    public static void parseInput(String in) throws IllegalArgumentException, IndexOutOfBoundsException {","lastModifiedDate":"2022-09-02"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"        String[] inputArr \u003d in.split(\" \", 2);","lastModifiedDate":"2022-08-26"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"        String inputCommand \u003d inputArr[0];","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"        Command command \u003d null;","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"        command \u003d Command.getCommand(inputCommand);","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"        userCommand \u003d command;","lastModifiedDate":"2022-08-26"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"        assert userCommand !\u003d null : \"no user command found\";","lastModifiedDate":"2022-09-09"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"        if (command !\u003d Command.LIST \u0026\u0026 command !\u003d Command.BYE) {","lastModifiedDate":"2022-08-26"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"            userInstructions \u003d inputArr[1];","lastModifiedDate":"2022-08-26"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"     * Getter for the user\u0027s command.","lastModifiedDate":"2022-08-26"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"     * @return command enum representing the user\u0027s command.","lastModifiedDate":"2022-08-26"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"    public static Command getUserCommand() {","lastModifiedDate":"2022-08-26"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"        return userCommand;","lastModifiedDate":"2022-08-26"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"     * Getter for the user\u0027s instructions.","lastModifiedDate":"2022-08-26"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"     * @return string representation of the user\u0027s instructions.","lastModifiedDate":"2022-08-26"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"    public static String getUserInstructions() {","lastModifiedDate":"2022-08-26"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"        return userInstructions;","lastModifiedDate":"2022-08-26"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"marclzh":45}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-25"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-08-25"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-08-25"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2022-08-25"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-09-01"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-25"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"import java.util.List;","lastModifiedDate":"2022-08-25"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-01"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-09-01"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"import duke.task.Event;","lastModifiedDate":"2022-09-01"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"import duke.task.Priority;","lastModifiedDate":"2022-09-10"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"import duke.task.Task;","lastModifiedDate":"2022-09-01"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"import duke.task.ToDo;","lastModifiedDate":"2022-09-01"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":" * This class encapsulates the logic of the storage of the task list in the user\u0027s harddrive.","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"public class Storage {","lastModifiedDate":"2022-08-26"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"    /* Const fields for representation of the various paths. */","lastModifiedDate":"2022-08-26"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"    private static final String PROJECT_ROOT \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2022-08-26"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"    private static final Path SAVE_LOCATION \u003d Path.of(PROJECT_ROOT, \"data\");","lastModifiedDate":"2022-08-25"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"    private static final String SAVE_FILE_NAME \u003d \"Task List.txt\";","lastModifiedDate":"2022-09-09"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"    private static final Path SAVE_FILE_PATH \u003d (SAVE_LOCATION).resolve(SAVE_FILE_NAME);","lastModifiedDate":"2022-09-09"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"    private static final String TASK_DONE \u003d \"1\";","lastModifiedDate":"2022-09-09"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"    private static final String EVENT \u003d \"event\";","lastModifiedDate":"2022-09-09"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"    private static final String DEADLINE \u003d \"deadline\";","lastModifiedDate":"2022-09-09"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"    private static final int TASK_TYPE_INDEX \u003d 0;","lastModifiedDate":"2022-09-10"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"    private static final int TASK_PRIORITY_INDEX \u003d 1;","lastModifiedDate":"2022-09-10"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"    private static final int TASK_DONE_INDEX \u003d 2;","lastModifiedDate":"2022-09-10"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"    private static final int TASK_DESCRIPTION_INDEX \u003d 3;","lastModifiedDate":"2022-09-10"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"    private static final int TASK_TIME_INDEX \u003d 4;","lastModifiedDate":"2022-09-10"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"     * Loads the data from the file found in the saved location into the task list.","lastModifiedDate":"2022-08-26"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"     * @param tasks Task list.","lastModifiedDate":"2022-09-02"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"    public static void load(List\u003cTask\u003e tasks) {","lastModifiedDate":"2022-09-01"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"        // This is the current directory the system is in.","lastModifiedDate":"2022-08-25"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"        boolean isDataFolderPresent \u003d Files.exists(SAVE_LOCATION);","lastModifiedDate":"2022-08-25"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"        boolean isSaveFilePresent \u003d Files.exists(SAVE_FILE_PATH);","lastModifiedDate":"2022-08-25"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"        // Checks if the data folder exists already, if not, creates one.","lastModifiedDate":"2022-08-25"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"        if (!isDataFolderPresent) {","lastModifiedDate":"2022-08-25"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"            try {","lastModifiedDate":"2022-08-25"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"                Files.createDirectories(SAVE_LOCATION);","lastModifiedDate":"2022-08-25"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"            } catch (IOException e) {","lastModifiedDate":"2022-08-25"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"                e.printStackTrace();","lastModifiedDate":"2022-08-25"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"            }","lastModifiedDate":"2022-08-25"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"        // Checks if the Save File is present, if not, create one.","lastModifiedDate":"2022-08-25"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"        if (isSaveFilePresent) {","lastModifiedDate":"2022-08-25"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"            List\u003cString\u003e listContents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-08-25"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"            try {","lastModifiedDate":"2022-08-25"},{"lineNumber":60,"author":{"gitId":"marclzh"},"content":"                listContents \u003d Files.readAllLines(SAVE_FILE_PATH);","lastModifiedDate":"2022-08-25"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"            } catch (IOException e) {","lastModifiedDate":"2022-08-25"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"                e.printStackTrace();","lastModifiedDate":"2022-08-25"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"            }","lastModifiedDate":"2022-08-25"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"            // Load contents of file into tasks list.","lastModifiedDate":"2022-08-25"},{"lineNumber":65,"author":{"gitId":"marclzh"},"content":"            for (String s : listContents) {","lastModifiedDate":"2022-08-25"},{"lineNumber":66,"author":{"gitId":"marclzh"},"content":"                try {","lastModifiedDate":"2022-08-26"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"                    tasks.add(parseTask(s));","lastModifiedDate":"2022-08-25"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2022-08-26"},{"lineNumber":69,"author":{"gitId":"marclzh"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2022-08-26"},{"lineNumber":70,"author":{"gitId":"marclzh"},"content":"                }","lastModifiedDate":"2022-08-26"},{"lineNumber":71,"author":{"gitId":"marclzh"},"content":"            }","lastModifiedDate":"2022-08-25"},{"lineNumber":72,"author":{"gitId":"marclzh"},"content":"        } else {","lastModifiedDate":"2022-08-25"},{"lineNumber":73,"author":{"gitId":"marclzh"},"content":"            try {","lastModifiedDate":"2022-08-25"},{"lineNumber":74,"author":{"gitId":"marclzh"},"content":"                Files.createFile(SAVE_FILE_PATH);","lastModifiedDate":"2022-08-25"},{"lineNumber":75,"author":{"gitId":"marclzh"},"content":"            } catch (IOException e) {","lastModifiedDate":"2022-08-25"},{"lineNumber":76,"author":{"gitId":"marclzh"},"content":"                e.printStackTrace();","lastModifiedDate":"2022-08-25"},{"lineNumber":77,"author":{"gitId":"marclzh"},"content":"            }","lastModifiedDate":"2022-08-25"},{"lineNumber":78,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":79,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":80,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":81,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":82,"author":{"gitId":"marclzh"},"content":"     * Saves the task to the text file in the user\u0027s hard drive.","lastModifiedDate":"2022-08-26"},{"lineNumber":83,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":84,"author":{"gitId":"marclzh"},"content":"     * @param tasks     Task list.","lastModifiedDate":"2022-09-02"},{"lineNumber":85,"author":{"gitId":"marclzh"},"content":"     * @param isDeleted If the contents of the file should be deleted and reset.","lastModifiedDate":"2022-09-02"},{"lineNumber":86,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":87,"author":{"gitId":"marclzh"},"content":"    public static void save(ArrayList\u003cTask\u003e tasks, boolean isDeleted) {","lastModifiedDate":"2022-09-01"},{"lineNumber":88,"author":{"gitId":"marclzh"},"content":"        // Saves to the file","lastModifiedDate":"2022-08-25"},{"lineNumber":89,"author":{"gitId":"marclzh"},"content":"        try {","lastModifiedDate":"2022-08-25"},{"lineNumber":90,"author":{"gitId":"marclzh"},"content":"            if (isDeleted) {","lastModifiedDate":"2022-08-25"},{"lineNumber":91,"author":{"gitId":"marclzh"},"content":"                // Clears the file","lastModifiedDate":"2022-08-25"},{"lineNumber":92,"author":{"gitId":"marclzh"},"content":"                resetTaskListFile();","lastModifiedDate":"2022-08-25"},{"lineNumber":93,"author":{"gitId":"marclzh"},"content":"                // Loop to print all the tasks into the file.","lastModifiedDate":"2022-08-25"},{"lineNumber":94,"author":{"gitId":"marclzh"},"content":"                for (Task t : tasks) {","lastModifiedDate":"2022-08-25"},{"lineNumber":95,"author":{"gitId":"marclzh"},"content":"                    Files.write(SAVE_FILE_PATH, (t.saveFormat() + System.lineSeparator()).getBytes(),","lastModifiedDate":"2022-08-25"},{"lineNumber":96,"author":{"gitId":"marclzh"},"content":"                            StandardOpenOption.APPEND);","lastModifiedDate":"2022-08-25"},{"lineNumber":97,"author":{"gitId":"marclzh"},"content":"                }","lastModifiedDate":"2022-08-25"},{"lineNumber":98,"author":{"gitId":"marclzh"},"content":"            } else {","lastModifiedDate":"2022-08-25"},{"lineNumber":99,"author":{"gitId":"marclzh"},"content":"                Task addedTask \u003d tasks.get(tasks.size() - 1);","lastModifiedDate":"2022-08-25"},{"lineNumber":100,"author":{"gitId":"marclzh"},"content":"                Files.write(SAVE_FILE_PATH, (addedTask.saveFormat() + System.lineSeparator()).getBytes(),","lastModifiedDate":"2022-08-25"},{"lineNumber":101,"author":{"gitId":"marclzh"},"content":"                        StandardOpenOption.APPEND);","lastModifiedDate":"2022-08-25"},{"lineNumber":102,"author":{"gitId":"marclzh"},"content":"            }","lastModifiedDate":"2022-08-25"},{"lineNumber":103,"author":{"gitId":"marclzh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-25"},{"lineNumber":104,"author":{"gitId":"marclzh"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-08-25"},{"lineNumber":105,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":106,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":107,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":108,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":109,"author":{"gitId":"marclzh"},"content":"     * Method to parse the saved text file data into usable data to be input into the task list.","lastModifiedDate":"2022-08-26"},{"lineNumber":110,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":111,"author":{"gitId":"marclzh"},"content":"     * @param savedTask the task in the saved task list.","lastModifiedDate":"2022-08-26"},{"lineNumber":112,"author":{"gitId":"marclzh"},"content":"     * @return a task to be input into the task list.","lastModifiedDate":"2022-08-26"},{"lineNumber":113,"author":{"gitId":"marclzh"},"content":"     * @throws DukeException if the method fails, printing the message output.","lastModifiedDate":"2022-08-26"},{"lineNumber":114,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":115,"author":{"gitId":"marclzh"},"content":"    private static Task parseTask(String savedTask) throws DukeException {","lastModifiedDate":"2022-08-26"},{"lineNumber":116,"author":{"gitId":"marclzh"},"content":"        Task task;","lastModifiedDate":"2022-09-10"},{"lineNumber":117,"author":{"gitId":"marclzh"},"content":"        String[] taskArr;","lastModifiedDate":"2022-08-25"},{"lineNumber":118,"author":{"gitId":"marclzh"},"content":"        // savedTask is the string representation of the save file format of a task.","lastModifiedDate":"2022-08-25"},{"lineNumber":119,"author":{"gitId":"marclzh"},"content":"        taskArr \u003d savedTask.split(\" \\\\| \", 5);","lastModifiedDate":"2022-09-10"},{"lineNumber":120,"author":{"gitId":"marclzh"},"content":"        String taskType \u003d taskArr[TASK_TYPE_INDEX]; // Todo, Event, Deadline","lastModifiedDate":"2022-09-10"},{"lineNumber":121,"author":{"gitId":"marclzh"},"content":"        String taskPriority \u003d taskArr[TASK_PRIORITY_INDEX]; // HIGH, MEDIUM, LOW or NONE.","lastModifiedDate":"2022-09-10"},{"lineNumber":122,"author":{"gitId":"marclzh"},"content":"        String taskDone \u003d taskArr[TASK_DONE_INDEX]; // 0 for unmarked, 1 for marked.","lastModifiedDate":"2022-09-10"},{"lineNumber":123,"author":{"gitId":"marclzh"},"content":"        String taskDescription \u003d taskArr[TASK_DESCRIPTION_INDEX]; // Description of the task.","lastModifiedDate":"2022-09-10"},{"lineNumber":124,"author":{"gitId":"marclzh"},"content":"        switch (taskType) {","lastModifiedDate":"2022-08-25"},{"lineNumber":125,"author":{"gitId":"marclzh"},"content":"        case \"T\":","lastModifiedDate":"2022-08-25"},{"lineNumber":126,"author":{"gitId":"marclzh"},"content":"            task \u003d new ToDo(taskDescription, Priority.getPriority(taskPriority));","lastModifiedDate":"2022-09-10"},{"lineNumber":127,"author":{"gitId":"marclzh"},"content":"            break;","lastModifiedDate":"2022-08-25"},{"lineNumber":128,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":129,"author":{"gitId":"marclzh"},"content":"        case \"E\":","lastModifiedDate":"2022-08-25"},{"lineNumber":130,"author":{"gitId":"marclzh"},"content":"            String taskDuration \u003d taskArr[TASK_TIME_INDEX];","lastModifiedDate":"2022-09-10"},{"lineNumber":131,"author":{"gitId":"marclzh"},"content":"            task \u003d outputDateFormat(taskDescription, taskDuration, EVENT, taskPriority);","lastModifiedDate":"2022-09-10"},{"lineNumber":132,"author":{"gitId":"marclzh"},"content":"            break;","lastModifiedDate":"2022-08-25"},{"lineNumber":133,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":134,"author":{"gitId":"marclzh"},"content":"        case \"D\":","lastModifiedDate":"2022-08-25"},{"lineNumber":135,"author":{"gitId":"marclzh"},"content":"            String taskDue \u003d taskArr[TASK_TIME_INDEX];","lastModifiedDate":"2022-09-10"},{"lineNumber":136,"author":{"gitId":"marclzh"},"content":"            task \u003d outputDateFormat(taskDescription, taskDue, DEADLINE, taskPriority);","lastModifiedDate":"2022-09-10"},{"lineNumber":137,"author":{"gitId":"marclzh"},"content":"            break;","lastModifiedDate":"2022-08-25"},{"lineNumber":138,"author":{"gitId":"marclzh"},"content":"        default: {","lastModifiedDate":"2022-09-01"},{"lineNumber":139,"author":{"gitId":"marclzh"},"content":"            throw new DukeException(\"Something went wrong, save file might need to be deleted!\");","lastModifiedDate":"2022-09-10"},{"lineNumber":140,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":141,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-09-01"},{"lineNumber":142,"author":{"gitId":"marclzh"},"content":"        if (taskDone.equals(TASK_DONE)) {","lastModifiedDate":"2022-09-09"},{"lineNumber":143,"author":{"gitId":"marclzh"},"content":"            task.markDone();","lastModifiedDate":"2022-08-25"},{"lineNumber":144,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":145,"author":{"gitId":"marclzh"},"content":"        return task;","lastModifiedDate":"2022-08-25"},{"lineNumber":146,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":147,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":148,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":149,"author":{"gitId":"marclzh"},"content":"     * Method for resetting the file.","lastModifiedDate":"2022-08-26"},{"lineNumber":150,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":151,"author":{"gitId":"marclzh"},"content":"    public static void resetTaskListFile() {","lastModifiedDate":"2022-08-25"},{"lineNumber":152,"author":{"gitId":"marclzh"},"content":"        try {","lastModifiedDate":"2022-08-25"},{"lineNumber":153,"author":{"gitId":"marclzh"},"content":"            Files.newBufferedWriter(SAVE_FILE_PATH, StandardOpenOption.TRUNCATE_EXISTING);","lastModifiedDate":"2022-08-25"},{"lineNumber":154,"author":{"gitId":"marclzh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-25"},{"lineNumber":155,"author":{"gitId":"marclzh"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-08-25"},{"lineNumber":156,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":157,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":158,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-09"},{"lineNumber":159,"author":{"gitId":"marclzh"},"content":"    private static Task outputDateFormat(String taskDescription, String taskTime, String type, String priority)","lastModifiedDate":"2022-09-10"},{"lineNumber":160,"author":{"gitId":"marclzh"},"content":"            throws DukeException {","lastModifiedDate":"2022-09-10"},{"lineNumber":161,"author":{"gitId":"marclzh"},"content":"        LocalDateTime time \u003d LocalDateTime.parse(taskTime, Task.OUTPUT_DATE_FORMAT);","lastModifiedDate":"2022-09-09"},{"lineNumber":162,"author":{"gitId":"marclzh"},"content":"        if (type.equals(\"event\")) {","lastModifiedDate":"2022-09-09"},{"lineNumber":163,"author":{"gitId":"marclzh"},"content":"            return new Event(taskDescription, time, Priority.getPriority(priority));","lastModifiedDate":"2022-09-10"},{"lineNumber":164,"author":{"gitId":"marclzh"},"content":"        } else if (type.equals(\"deadline\")) {","lastModifiedDate":"2022-09-09"},{"lineNumber":165,"author":{"gitId":"marclzh"},"content":"            return new Deadline(taskDescription, time, Priority.getPriority(priority));","lastModifiedDate":"2022-09-10"},{"lineNumber":166,"author":{"gitId":"marclzh"},"content":"        } else {","lastModifiedDate":"2022-09-09"},{"lineNumber":167,"author":{"gitId":"marclzh"},"content":"            throw new DukeException(\"Something went wrong, unexpected todo\");","lastModifiedDate":"2022-09-09"},{"lineNumber":168,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-09-09"},{"lineNumber":169,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-09"},{"lineNumber":170,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"marclzh":170}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-01"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-09-01"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-08-26"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import duke.gui.UI;","lastModifiedDate":"2022-09-02"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"import duke.task.Event;","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"import duke.task.Task;","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"import duke.task.ToDo;","lastModifiedDate":"2022-08-26"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":" * This class handles logic dealing with the task list.","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-08-26"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"public class TaskList {","lastModifiedDate":"2022-08-26"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"    /* Contains the tasks inputted. */","lastModifiedDate":"2022-08-26"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"     * Constructor for the TaskList class.","lastModifiedDate":"2022-08-26"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"    public TaskList() {","lastModifiedDate":"2022-08-26"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-08-26"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"     * Getter for the task list.","lastModifiedDate":"2022-08-26"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"     * @return The task list.","lastModifiedDate":"2022-08-26"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2022-08-26"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"        return this.tasks;","lastModifiedDate":"2022-08-26"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"     * Handles the addition of tasks.","lastModifiedDate":"2022-08-26"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"     * @param type        type of task added.","lastModifiedDate":"2022-08-26"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"     * @param description description of the task.","lastModifiedDate":"2022-08-26"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"     * @throws DukeException for invalid inputs.","lastModifiedDate":"2022-09-01"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"     * @throws IOException for invalid inputs.","lastModifiedDate":"2022-09-01"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"    public String addTask(Command type, String description) throws DukeException, IOException {","lastModifiedDate":"2022-09-02"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"        Task task;","lastModifiedDate":"2022-08-26"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"        if (type \u003d\u003d Command.TODO) {","lastModifiedDate":"2022-08-26"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"            task \u003d ToDo.createToDo(description);","lastModifiedDate":"2022-09-10"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"        } else if (type \u003d\u003d Command.DEADLINE) {","lastModifiedDate":"2022-08-26"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"            task \u003d Deadline.createDeadline(description);","lastModifiedDate":"2022-08-26"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"        } else {","lastModifiedDate":"2022-08-26"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"            task \u003d Event.createEvent(description);","lastModifiedDate":"2022-08-26"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"        tasks.add(task);","lastModifiedDate":"2022-08-26"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"        Storage.save(tasks, false);","lastModifiedDate":"2022-09-01"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"        return UI.printAddTaskMessage(task);","lastModifiedDate":"2022-09-02"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"     * Handles Printing of the task list.","lastModifiedDate":"2022-08-26"},{"lineNumber":60,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"    public String printTaskList() {","lastModifiedDate":"2022-09-02"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"        String output \u003d \"\";","lastModifiedDate":"2022-09-02"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"        if (!tasks.isEmpty()) {","lastModifiedDate":"2022-08-26"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {","lastModifiedDate":"2022-08-26"},{"lineNumber":65,"author":{"gitId":"marclzh"},"content":"                output \u003d output.concat(i + \". \" + tasks.get(i - 1).toString() + \"\\n\");","lastModifiedDate":"2022-09-02"},{"lineNumber":66,"author":{"gitId":"marclzh"},"content":"            }","lastModifiedDate":"2022-08-26"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"            return output;","lastModifiedDate":"2022-09-02"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"        } else {","lastModifiedDate":"2022-08-26"},{"lineNumber":69,"author":{"gitId":"marclzh"},"content":"            return UI.printTaskListEmpty();","lastModifiedDate":"2022-09-04"},{"lineNumber":70,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":71,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":72,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":73,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":74,"author":{"gitId":"marclzh"},"content":"     * Marks/Unmarks Tasks.","lastModifiedDate":"2022-08-26"},{"lineNumber":75,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":76,"author":{"gitId":"marclzh"},"content":"     * @param markStatus       input to mark/unmark a task.","lastModifiedDate":"2022-08-26"},{"lineNumber":77,"author":{"gitId":"marclzh"},"content":"     * @param userInstructions input of the user.","lastModifiedDate":"2022-08-26"},{"lineNumber":78,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":79,"author":{"gitId":"marclzh"},"content":"    public String taskMarker(Command markStatus, String userInstructions) {","lastModifiedDate":"2022-09-02"},{"lineNumber":80,"author":{"gitId":"marclzh"},"content":"        try {","lastModifiedDate":"2022-08-26"},{"lineNumber":81,"author":{"gitId":"marclzh"},"content":"            int taskNo \u003d Integer.parseInt(userInstructions);","lastModifiedDate":"2022-08-26"},{"lineNumber":82,"author":{"gitId":"marclzh"},"content":"            Task currTask \u003d tasks.get(taskNo - 1);","lastModifiedDate":"2022-08-26"},{"lineNumber":83,"author":{"gitId":"marclzh"},"content":"            if (markStatus \u003d\u003d Command.MARK) {","lastModifiedDate":"2022-08-26"},{"lineNumber":84,"author":{"gitId":"marclzh"},"content":"                currTask.markDone();","lastModifiedDate":"2022-08-26"},{"lineNumber":85,"author":{"gitId":"marclzh"},"content":"                Storage.save(tasks, true);","lastModifiedDate":"2022-09-01"},{"lineNumber":86,"author":{"gitId":"marclzh"},"content":"            } else {","lastModifiedDate":"2022-08-26"},{"lineNumber":87,"author":{"gitId":"marclzh"},"content":"                currTask.markUndone();","lastModifiedDate":"2022-08-26"},{"lineNumber":88,"author":{"gitId":"marclzh"},"content":"                Storage.save(tasks, true);","lastModifiedDate":"2022-09-01"},{"lineNumber":89,"author":{"gitId":"marclzh"},"content":"            }","lastModifiedDate":"2022-08-26"},{"lineNumber":90,"author":{"gitId":"marclzh"},"content":"            return UI.printMarkedTaskMessage(currTask, markStatus);","lastModifiedDate":"2022-09-02"},{"lineNumber":91,"author":{"gitId":"marclzh"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2022-08-26"},{"lineNumber":92,"author":{"gitId":"marclzh"},"content":"            return \"Invalid input, please input an available integer index!\";","lastModifiedDate":"2022-09-02"},{"lineNumber":93,"author":{"gitId":"marclzh"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-09-02"},{"lineNumber":94,"author":{"gitId":"marclzh"},"content":"            return e.getMessage();","lastModifiedDate":"2022-09-02"},{"lineNumber":95,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":96,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":97,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":98,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":99,"author":{"gitId":"marclzh"},"content":"     * Deletes the task with the specified index.","lastModifiedDate":"2022-08-26"},{"lineNumber":100,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":101,"author":{"gitId":"marclzh"},"content":"     * @param inputIndex index to be deleted.","lastModifiedDate":"2022-08-26"},{"lineNumber":102,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":103,"author":{"gitId":"marclzh"},"content":"    public String deleteTask(String inputIndex) {","lastModifiedDate":"2022-09-02"},{"lineNumber":104,"author":{"gitId":"marclzh"},"content":"        try {","lastModifiedDate":"2022-08-26"},{"lineNumber":105,"author":{"gitId":"marclzh"},"content":"            int taskNo \u003d Integer.parseInt(inputIndex);","lastModifiedDate":"2022-08-26"},{"lineNumber":106,"author":{"gitId":"marclzh"},"content":"            Task task \u003d tasks.get(taskNo - 1);","lastModifiedDate":"2022-08-26"},{"lineNumber":107,"author":{"gitId":"marclzh"},"content":"            tasks.remove(taskNo - 1);","lastModifiedDate":"2022-08-26"},{"lineNumber":108,"author":{"gitId":"marclzh"},"content":"            Storage.save(tasks, true);","lastModifiedDate":"2022-09-01"},{"lineNumber":109,"author":{"gitId":"marclzh"},"content":"            return String.format(\"Ok, I\u0027ve removed this task: %s\\n You have %d tasks left currently.\\n\",","lastModifiedDate":"2022-09-02"},{"lineNumber":110,"author":{"gitId":"marclzh"},"content":"                    task.toString(), tasks.size());","lastModifiedDate":"2022-09-02"},{"lineNumber":111,"author":{"gitId":"marclzh"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2022-08-26"},{"lineNumber":112,"author":{"gitId":"marclzh"},"content":"            return (\"Invalid index, please input the index of an available task!\\n\");","lastModifiedDate":"2022-09-02"},{"lineNumber":113,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":114,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":115,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":116,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":117,"author":{"gitId":"marclzh"},"content":"     * Finds tasks with a matching description to the user\u0027s input.","lastModifiedDate":"2022-09-01"},{"lineNumber":118,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-09-01"},{"lineNumber":119,"author":{"gitId":"marclzh"},"content":"     * @param match The input by the user to be found by the method.","lastModifiedDate":"2022-09-01"},{"lineNumber":120,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":121,"author":{"gitId":"marclzh"},"content":"    public String findTask(String match) {","lastModifiedDate":"2022-09-02"},{"lineNumber":122,"author":{"gitId":"marclzh"},"content":"        if (!tasks.isEmpty()) {","lastModifiedDate":"2022-08-26"},{"lineNumber":123,"author":{"gitId":"marclzh"},"content":"            String output \u003d (String.format(\"Here\u0027s all I could find with \\\"%s\\\"!\\n\", match));","lastModifiedDate":"2022-09-02"},{"lineNumber":124,"author":{"gitId":"marclzh"},"content":"            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {","lastModifiedDate":"2022-08-26"},{"lineNumber":125,"author":{"gitId":"marclzh"},"content":"                Task task \u003d tasks.get(i - 1);","lastModifiedDate":"2022-09-02"},{"lineNumber":126,"author":{"gitId":"marclzh"},"content":"                if (task.getDescription().contains(match)) {","lastModifiedDate":"2022-09-02"},{"lineNumber":127,"author":{"gitId":"marclzh"},"content":"                    output \u003d output.concat(i + \". \" + task + \"\\n\");","lastModifiedDate":"2022-09-02"},{"lineNumber":128,"author":{"gitId":"marclzh"},"content":"                }","lastModifiedDate":"2022-08-26"},{"lineNumber":129,"author":{"gitId":"marclzh"},"content":"            }","lastModifiedDate":"2022-08-26"},{"lineNumber":130,"author":{"gitId":"marclzh"},"content":"            return output;","lastModifiedDate":"2022-09-02"},{"lineNumber":131,"author":{"gitId":"marclzh"},"content":"        } else {","lastModifiedDate":"2022-08-26"},{"lineNumber":132,"author":{"gitId":"marclzh"},"content":"            return \"No tasks have been added!\";","lastModifiedDate":"2022-09-02"},{"lineNumber":133,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":134,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":135,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"marclzh":135}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke.exception;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-08-26"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":" * This class represents a Custom DukeException class for the Duke Chat bot.","lastModifiedDate":"2022-08-26"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-08-26"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-08-17"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"     * Constructor for the DukeException.","lastModifiedDate":"2022-08-17"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"     * @param message Exception message returned.","lastModifiedDate":"2022-08-17"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"    public DukeException(String message) {","lastModifiedDate":"2022-08-17"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"        super(message);","lastModifiedDate":"2022-08-17"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"marclzh":15}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke.gui;","lastModifiedDate":"2022-09-02"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import java.awt.*;","lastModifiedDate":"2022-09-15"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-02"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import java.util.Collections;","lastModifiedDate":"2022-09-02"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-09-02"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-09-02"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-09-02"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-09-02"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2022-09-02"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"import javafx.scene.Node;","lastModifiedDate":"2022-09-02"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-09-02"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-09-02"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2022-09-02"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-09-02"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-09-02"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2022-09-02"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2022-09-02"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":" * containing text from the speaker.","lastModifiedDate":"2022-09-02"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-09-02"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2022-09-02"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"    @FXML","lastModifiedDate":"2022-09-02"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"    private Label dialog;","lastModifiedDate":"2022-09-02"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"    @FXML","lastModifiedDate":"2022-09-02"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2022-09-02"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2022-09-02"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"        try {","lastModifiedDate":"2022-09-02"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2022-09-02"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-09-02"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-09-02"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-09-02"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-09-02"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-09-02"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-09-02"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"        dialog.setText(text);","lastModifiedDate":"2022-09-02"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2022-09-02"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-09-02"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2022-09-02"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-09-02"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"    private void flip() {","lastModifiedDate":"2022-09-02"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2022-09-02"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2022-09-02"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2022-09-02"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2022-09-02"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2022-09-02"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2022-09-02"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2022-09-02"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2022-09-02"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"        db.flip();","lastModifiedDate":"2022-09-02"},{"lineNumber":60,"author":{"gitId":"marclzh"},"content":"        return db;","lastModifiedDate":"2022-09-02"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-09-02"}],"authorContributionMap":{"marclzh":62}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke.gui;","lastModifiedDate":"2022-09-02"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import duke.Duke;","lastModifiedDate":"2022-09-02"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-09-02"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-09-02"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2022-09-02"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-09-02"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-09-02"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-09-02"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-09-02"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-09-02"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2022-09-02"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-09-02"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2022-09-02"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"    @FXML","lastModifiedDate":"2022-09-02"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2022-09-02"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"    @FXML","lastModifiedDate":"2022-09-02"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2022-09-02"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"    @FXML","lastModifiedDate":"2022-09-02"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"    private TextField userInput;","lastModifiedDate":"2022-09-02"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"    @FXML","lastModifiedDate":"2022-09-02"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"    private Button sendButton;","lastModifiedDate":"2022-09-02"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"    private Duke duke;","lastModifiedDate":"2022-09-02"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/elgato.jpg\"));","lastModifiedDate":"2022-09-02"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/elp.png\"));","lastModifiedDate":"2022-09-15"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-09-02"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"     * Initializes the chat box.","lastModifiedDate":"2022-09-02"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-09-02"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"    @FXML","lastModifiedDate":"2022-09-02"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"    public void initialize() {","lastModifiedDate":"2022-09-02"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2022-09-02"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"        // Greet User","lastModifiedDate":"2022-09-02"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(UI.greet(), dukeImage));","lastModifiedDate":"2022-09-02"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2022-09-02"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"        duke \u003d d;","lastModifiedDate":"2022-09-02"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-09-02"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2022-09-02"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2022-09-02"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-09-02"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"    @FXML","lastModifiedDate":"2022-09-02"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"    private void handleUserInput() {","lastModifiedDate":"2022-09-02"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2022-09-02"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2022-09-02"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-09-02"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2022-09-02"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2022-09-02"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"        );","lastModifiedDate":"2022-09-02"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"        userInput.clear();","lastModifiedDate":"2022-09-02"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-09-02"}],"authorContributionMap":{"marclzh":58}},{"path":"src/main/java/duke/gui/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke.gui;","lastModifiedDate":"2022-09-02"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import duke.Command;","lastModifiedDate":"2022-09-02"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-08-26"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import duke.task.Task;","lastModifiedDate":"2022-08-26"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-08-26"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":" * This class handles the interactions with the user.","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"public class UI {","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"     * Displays the Greeting message.","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"    public static String greet() {","lastModifiedDate":"2022-09-02"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"        return \"Greetings from Elp!\\nWhat can I help you with?\\n\";","lastModifiedDate":"2022-09-02"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"     * Prints Goodbye Message.","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"    public static String goodbye() {","lastModifiedDate":"2022-09-02"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"        return \"Have a nice day! :)\";","lastModifiedDate":"2022-09-02"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"     * Prints the error given when no index is given when deleting tasks.","lastModifiedDate":"2022-08-26"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"    public static String printDeleteErrorMessage() {","lastModifiedDate":"2022-09-02"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"        return \"Please add an index to delete a task!\\n\";","lastModifiedDate":"2022-09-02"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"     * Prints the exception message when a DukeException is thrown.","lastModifiedDate":"2022-08-26"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"     * @param e DukeException thrown.","lastModifiedDate":"2022-08-26"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"    public static String printDukeExceptionMessage(DukeException e) {","lastModifiedDate":"2022-09-02"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"        return e.getMessage();","lastModifiedDate":"2022-09-02"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"     * Prints the message when a Task is added to the list.","lastModifiedDate":"2022-08-26"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"     * @param t task added.","lastModifiedDate":"2022-08-26"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"    public static String printAddTaskMessage(Task t) {","lastModifiedDate":"2022-09-02"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"        return \"Added: \" + t.toString() + \"\\n\";","lastModifiedDate":"2022-09-02"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-02"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-09-02"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"     * Prints the message when a task has been marked/unmarked.","lastModifiedDate":"2022-09-02"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-09-02"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"     * @param task    Task to be marked.","lastModifiedDate":"2022-09-02"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"     * @param command Mark status.","lastModifiedDate":"2022-09-02"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"     * @return String output of the marked/unmarked task.","lastModifiedDate":"2022-09-02"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-09-02"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"    public static String printMarkedTaskMessage(Task task, Command command) throws DukeException {","lastModifiedDate":"2022-09-02"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"        switch (command) {","lastModifiedDate":"2022-09-02"},{"lineNumber":60,"author":{"gitId":"marclzh"},"content":"        case MARK: {","lastModifiedDate":"2022-09-02"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"            return \"Task successfully marked!\\n\" + task;","lastModifiedDate":"2022-09-02"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-09-02"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"        case UNMARK: {","lastModifiedDate":"2022-09-02"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"            return \"Task successfully unmarked!\\n\" + task;","lastModifiedDate":"2022-09-02"},{"lineNumber":65,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-09-02"},{"lineNumber":66,"author":{"gitId":"marclzh"},"content":"        default: {","lastModifiedDate":"2022-09-02"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"            throw new DukeException(\"Error in printing marked task!\");","lastModifiedDate":"2022-09-02"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-09-02"},{"lineNumber":69,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-09-02"},{"lineNumber":70,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":71,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":72,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-09-04"},{"lineNumber":73,"author":{"gitId":"marclzh"},"content":"     * Prints the message if the task list is empty.","lastModifiedDate":"2022-09-04"},{"lineNumber":74,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-09-04"},{"lineNumber":75,"author":{"gitId":"marclzh"},"content":"     * @return Empty list message.","lastModifiedDate":"2022-09-04"},{"lineNumber":76,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-09-04"},{"lineNumber":77,"author":{"gitId":"marclzh"},"content":"    public static String printTaskListEmpty() {","lastModifiedDate":"2022-09-04"},{"lineNumber":78,"author":{"gitId":"marclzh"},"content":"        return \"No tasks have been added!\";","lastModifiedDate":"2022-09-04"},{"lineNumber":79,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-04"},{"lineNumber":80,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"marclzh":80}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke.task;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-26"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-01"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-08-26"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":" * This class inherits from the abstract Task class","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":" * and encapsulates the logic of a Deadline task.","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"    private static final String MISFORMAT_DEADLINE \u003d","lastModifiedDate":"2022-09-10"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"            \"Please follow the format of ~description~ /by dd-MM-yyyy HHmm /p high/medium/low/none!\";","lastModifiedDate":"2022-09-10"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-09"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"    /* Due Date field */","lastModifiedDate":"2022-08-17"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"    private LocalDateTime dueDate;","lastModifiedDate":"2022-08-26"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"     * Constructor for the Deadline Task.","lastModifiedDate":"2022-08-17"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"     * @param description description of the task.","lastModifiedDate":"2022-08-17"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"    public Deadline(String description, LocalDateTime dueDate, Priority priority) {","lastModifiedDate":"2022-09-10"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"        super(description, priority);","lastModifiedDate":"2022-09-10"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"     * Factory Method for the construction of a Deadline for user input.","lastModifiedDate":"2022-08-26"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"     * @param in user\u0027s input.","lastModifiedDate":"2022-08-26"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"     * @return Deadline with the relevant input fields.","lastModifiedDate":"2022-08-26"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"     * @throws DukeException if no task or incorrect formatting is given.","lastModifiedDate":"2022-08-26"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"    public static Deadline createDeadline(String in) throws DukeException {","lastModifiedDate":"2022-08-26"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"        String[] inputArr \u003d splitDescAndDateDeadline(in);","lastModifiedDate":"2022-09-10"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"        String[] prioritySplit \u003d splitPriority(inputArr[1]);","lastModifiedDate":"2022-09-10"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"        String description \u003d inputArr[0];","lastModifiedDate":"2022-09-10"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"        String deadlineString \u003d prioritySplit[0];","lastModifiedDate":"2022-09-10"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"        String priorityString \u003d prioritySplit[1];","lastModifiedDate":"2022-09-10"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"        Priority priority \u003d parsePriority(priorityString);","lastModifiedDate":"2022-09-10"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"        LocalDateTime deadline \u003d parseTime(deadlineString);","lastModifiedDate":"2022-09-10"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"        return new Deadline(description, deadline, priority);","lastModifiedDate":"2022-09-10"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"     * Splits the description and date for the Deadline user input based on the /by delimiter.","lastModifiedDate":"2022-09-10"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"     * @param in User\u0027s input.","lastModifiedDate":"2022-09-10"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"     * @return String array containing the description in the 1st address and the date + priority in the 2nd.","lastModifiedDate":"2022-09-10"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"     * @throws DukeException if input is misformatted.","lastModifiedDate":"2022-09-10"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"    private static String[] splitDescAndDateDeadline(String in) throws DukeException {","lastModifiedDate":"2022-09-10"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"        String[] inputArr \u003d in.split(\" */by* \");","lastModifiedDate":"2022-09-02"},{"lineNumber":60,"author":{"gitId":"marclzh"},"content":"        if (inputArr.length !\u003d 2) {","lastModifiedDate":"2022-09-02"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"            throw new DukeException(MISFORMAT_DEADLINE);","lastModifiedDate":"2022-09-09"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"        return inputArr;","lastModifiedDate":"2022-09-10"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":65,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":66,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"     * Overriden toString method for the Deadline Task.","lastModifiedDate":"2022-08-17"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":69,"author":{"gitId":"marclzh"},"content":"     * @return String representation of the Deadline.","lastModifiedDate":"2022-08-17"},{"lineNumber":70,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":71,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":72,"author":{"gitId":"marclzh"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":73,"author":{"gitId":"marclzh"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + dueDate.format(OUTPUT_DATE_FORMAT) + \") \" + priority;","lastModifiedDate":"2022-09-10"},{"lineNumber":74,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":75,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":76,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":77,"author":{"gitId":"marclzh"},"content":"     * Override save format method from Task class.","lastModifiedDate":"2022-08-25"},{"lineNumber":78,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-25"},{"lineNumber":79,"author":{"gitId":"marclzh"},"content":"     * @return formatted String for the Event task.","lastModifiedDate":"2022-08-25"},{"lineNumber":80,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":81,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-08-25"},{"lineNumber":82,"author":{"gitId":"marclzh"},"content":"    public String saveFormat() {","lastModifiedDate":"2022-08-25"},{"lineNumber":83,"author":{"gitId":"marclzh"},"content":"        return String.format(\"D | %s | %s\", super.saveFormat(), this.dueDate.format(OUTPUT_DATE_FORMAT));","lastModifiedDate":"2022-08-26"},{"lineNumber":84,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":85,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"marclzh":85}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke.task;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-26"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-01"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-08-26"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":" * This class inherits from the abstract Task class","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":" * and encapsulates the logic of an Event task.","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"public class Event extends Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"    private static final String MISFORMAT_EVENT \u003d","lastModifiedDate":"2022-09-10"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"            \"Please follow the format of ~description~ /at dd-MM-yyyy HHmm /p high/medium/low/none!\";","lastModifiedDate":"2022-09-10"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-09"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"    /* Duration field */","lastModifiedDate":"2022-08-17"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"    private LocalDateTime at;","lastModifiedDate":"2022-09-02"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"     * Constructor for the Event Task.","lastModifiedDate":"2022-08-17"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"     * @param description description of the task.","lastModifiedDate":"2022-08-17"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"    public Event(String description, LocalDateTime duration, Priority priority) {","lastModifiedDate":"2022-09-10"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"        super(description, priority);","lastModifiedDate":"2022-09-10"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"        this.at \u003d duration;","lastModifiedDate":"2022-09-02"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"     * Factory Method for the construction of an Event for user input.","lastModifiedDate":"2022-09-10"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"     * @param in user\u0027s input.","lastModifiedDate":"2022-08-26"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"     * @return Event with the relevant input fields.","lastModifiedDate":"2022-08-26"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"     * @throws DukeException if no task or incorrect formatting is given.","lastModifiedDate":"2022-08-26"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"    public static Event createEvent(String in) throws DukeException {","lastModifiedDate":"2022-08-26"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"        String[] inputArr \u003d splitDescAndDateEvent(in);","lastModifiedDate":"2022-09-10"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"        String[] prioritySplit \u003d splitPriority(inputArr[1]);","lastModifiedDate":"2022-09-10"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"        String description \u003d inputArr[0];","lastModifiedDate":"2022-09-10"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"        String duration \u003d prioritySplit[0];","lastModifiedDate":"2022-09-10"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"        String priorityString \u003d prioritySplit[1];","lastModifiedDate":"2022-09-10"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"        Priority priority \u003d parsePriority(priorityString);","lastModifiedDate":"2022-09-10"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"        LocalDateTime event \u003d parseTime(duration);","lastModifiedDate":"2022-09-10"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"        return new Event(description, event, priority);","lastModifiedDate":"2022-09-10"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"     * Splits the description and date for the Event user input based on the /at delimiter.","lastModifiedDate":"2022-09-10"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"     * @param in User\u0027s input.","lastModifiedDate":"2022-09-10"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"     * @return String array containing the description in the 1st address and the date + priority in the 2nd.","lastModifiedDate":"2022-09-10"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"     * @throws DukeException if input is misformatted.","lastModifiedDate":"2022-09-10"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"    private static String[] splitDescAndDateEvent(String in) throws DukeException {","lastModifiedDate":"2022-09-10"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"        String[] inputArr \u003d in.split(\" */at* \");","lastModifiedDate":"2022-09-02"},{"lineNumber":60,"author":{"gitId":"marclzh"},"content":"        if (inputArr.length !\u003d 2) {","lastModifiedDate":"2022-09-02"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"            throw new DukeException(MISFORMAT_EVENT);","lastModifiedDate":"2022-09-09"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"        return inputArr;","lastModifiedDate":"2022-09-10"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":65,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":66,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"     * Override toString method for the Event Task.","lastModifiedDate":"2022-08-25"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":69,"author":{"gitId":"marclzh"},"content":"     * @return String representation of the Event.","lastModifiedDate":"2022-08-17"},{"lineNumber":70,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":71,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":72,"author":{"gitId":"marclzh"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":73,"author":{"gitId":"marclzh"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at.format(OUTPUT_DATE_FORMAT) + \") \" + priority;","lastModifiedDate":"2022-09-10"},{"lineNumber":74,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":75,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":76,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":77,"author":{"gitId":"marclzh"},"content":"     * Override save format method from Task class.","lastModifiedDate":"2022-08-25"},{"lineNumber":78,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-25"},{"lineNumber":79,"author":{"gitId":"marclzh"},"content":"     * @return formatted String for the Event task.","lastModifiedDate":"2022-08-25"},{"lineNumber":80,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":81,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-08-25"},{"lineNumber":82,"author":{"gitId":"marclzh"},"content":"    public String saveFormat() {","lastModifiedDate":"2022-08-25"},{"lineNumber":83,"author":{"gitId":"marclzh"},"content":"        return String.format(\"E | %s | %s\", super.saveFormat(), this.at.format(OUTPUT_DATE_FORMAT));","lastModifiedDate":"2022-09-02"},{"lineNumber":84,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":85,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"marclzh":85}},{"path":"src/main/java/duke/task/Priority.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke.task;","lastModifiedDate":"2022-09-10"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-09-10"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":" * Priority level for a task.","lastModifiedDate":"2022-09-10"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-09-10"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"public enum Priority {","lastModifiedDate":"2022-09-10"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"    HIGH(\"high\"),","lastModifiedDate":"2022-09-10"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"    MEDIUM(\"medium\"),","lastModifiedDate":"2022-09-10"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"    LOW(\"low\"),","lastModifiedDate":"2022-09-10"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"    NONE(\"none\");","lastModifiedDate":"2022-09-10"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"    protected static final String UNKNOWN_PRIORITY \u003d \"Unknown priority, please input high/medium/low/none!\";","lastModifiedDate":"2022-09-10"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"    /* The input priority by the user. */","lastModifiedDate":"2022-09-10"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"    private final String priority;","lastModifiedDate":"2022-09-10"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"     * Constructor for the Priority enum.","lastModifiedDate":"2022-09-10"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"     * @param priority priority level specified.","lastModifiedDate":"2022-09-10"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"    Priority(String priority) {","lastModifiedDate":"2022-09-10"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2022-09-10"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"     * Returns the priority if a correct priority is specified.","lastModifiedDate":"2022-09-10"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"     * @param priority Input priority by user.","lastModifiedDate":"2022-09-10"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"     * @return Enum value corresponding to the input priority.","lastModifiedDate":"2022-09-10"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"     * @throws IllegalArgumentException if invalid priority is given.","lastModifiedDate":"2022-09-10"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"    public static Priority getPriority(String priority) throws IllegalArgumentException {","lastModifiedDate":"2022-09-10"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"        for (Priority p : Priority.values()) {","lastModifiedDate":"2022-09-10"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"            if (priority.equals(p.priority)) {","lastModifiedDate":"2022-09-10"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"                return p;","lastModifiedDate":"2022-09-10"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"            }","lastModifiedDate":"2022-09-10"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"        throw new IllegalArgumentException(\"Priority Level must be low, medium, high or none!\");","lastModifiedDate":"2022-09-10"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"     * Overriden toString method for the priority enum class.","lastModifiedDate":"2022-09-10"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"     * @return The priority level in a readable string.","lastModifiedDate":"2022-09-10"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-09-10"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"    public String toString() {","lastModifiedDate":"2022-09-10"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"        return \"Priority: \" + priority.toUpperCase();","lastModifiedDate":"2022-09-10"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"     * Adjusts the priority to be in a parse-friendly format for the storage class.","lastModifiedDate":"2022-09-10"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"     * @return Priority in a string format.","lastModifiedDate":"2022-09-10"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"    public String saveFormat() {","lastModifiedDate":"2022-09-10"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"        return priority;","lastModifiedDate":"2022-09-10"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-09-10"}],"authorContributionMap":{"marclzh":59}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke.task;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-09-10"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-26"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-09-10"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-10"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":" * This abstract class encapsulates the logic of a task.","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-08-26"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"public abstract class Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"    /* Constant fields representing the input and output format of the dates. */","lastModifiedDate":"2022-09-01"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"    public static final DateTimeFormatter INPUT_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2022-09-01"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"    public static final DateTimeFormatter OUTPUT_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\");","lastModifiedDate":"2022-09-01"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"    protected static final String MISFORMAT_DATE \u003d \"Your date needs to be in dd-MM-yyyy HHmm format!\";","lastModifiedDate":"2022-09-09"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"    protected static final String MISFORMAT_PRIORITY \u003d \"Please specify a priority level using /p!\";","lastModifiedDate":"2022-09-10"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"    /* Task Information */","lastModifiedDate":"2022-08-17"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"    protected String description;","lastModifiedDate":"2022-08-17"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-08-17"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"    protected Priority priority;","lastModifiedDate":"2022-09-10"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"     * Constructor for a Task.","lastModifiedDate":"2022-08-17"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"     * @param description description of the task.","lastModifiedDate":"2022-08-17"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"    public Task(String description, Priority priority) {","lastModifiedDate":"2022-09-10"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-08-17"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2022-09-10"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-17"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"     * Splits the priority field from the other details.","lastModifiedDate":"2022-09-10"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"     * @param in Input string to be split containing priority.","lastModifiedDate":"2022-09-10"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"     * @return Array of 2 elements, split contents in 1st address, and priority in 2nd.","lastModifiedDate":"2022-09-10"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"     * @throws DukeException if priority is not found/not included.","lastModifiedDate":"2022-09-10"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"    protected static String[] splitPriority(String in) throws DukeException {","lastModifiedDate":"2022-09-10"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"        String[] prioritySplit \u003d in.split(\" */p* \");","lastModifiedDate":"2022-09-10"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"        if (prioritySplit.length !\u003d 2) {","lastModifiedDate":"2022-09-10"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"            throw new DukeException(MISFORMAT_PRIORITY);","lastModifiedDate":"2022-09-10"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"        return prioritySplit;","lastModifiedDate":"2022-09-10"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"     * Parses the priority input.","lastModifiedDate":"2022-09-10"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"     * @param priorityString Input string containing the priority.","lastModifiedDate":"2022-09-10"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"     * @return Priority enum of HIGH/MEDIUM/LOW/NONE.","lastModifiedDate":"2022-09-10"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"     * @throws DukeException if invalid priority is input.","lastModifiedDate":"2022-09-10"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"    protected static Priority parsePriority(String priorityString) throws DukeException {","lastModifiedDate":"2022-09-10"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"        Priority priority;","lastModifiedDate":"2022-09-10"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"        try {","lastModifiedDate":"2022-09-10"},{"lineNumber":60,"author":{"gitId":"marclzh"},"content":"            priority \u003d Priority.getPriority(priorityString);","lastModifiedDate":"2022-09-10"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"        } catch (IllegalArgumentException a) {","lastModifiedDate":"2022-09-10"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"            throw new DukeException(Priority.UNKNOWN_PRIORITY);","lastModifiedDate":"2022-09-10"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"        return priority;","lastModifiedDate":"2022-09-10"},{"lineNumber":65,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":66,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"     * Parses time for relevant subclasses.","lastModifiedDate":"2022-09-10"},{"lineNumber":69,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":70,"author":{"gitId":"marclzh"},"content":"     * @param dateString Input string containing date.","lastModifiedDate":"2022-09-10"},{"lineNumber":71,"author":{"gitId":"marclzh"},"content":"     * @return Date of LocalDateTime type.","lastModifiedDate":"2022-09-10"},{"lineNumber":72,"author":{"gitId":"marclzh"},"content":"     * @throws DukeException if date is misformatted.","lastModifiedDate":"2022-09-10"},{"lineNumber":73,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":74,"author":{"gitId":"marclzh"},"content":"    protected static LocalDateTime parseTime(String dateString) throws DukeException {","lastModifiedDate":"2022-09-10"},{"lineNumber":75,"author":{"gitId":"marclzh"},"content":"        LocalDateTime event;","lastModifiedDate":"2022-09-10"},{"lineNumber":76,"author":{"gitId":"marclzh"},"content":"        try {","lastModifiedDate":"2022-09-10"},{"lineNumber":77,"author":{"gitId":"marclzh"},"content":"            event \u003d LocalDateTime.parse(dateString, INPUT_DATE_FORMAT);","lastModifiedDate":"2022-09-10"},{"lineNumber":78,"author":{"gitId":"marclzh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-09-10"},{"lineNumber":79,"author":{"gitId":"marclzh"},"content":"            throw new DukeException(MISFORMAT_DATE);","lastModifiedDate":"2022-09-10"},{"lineNumber":80,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":81,"author":{"gitId":"marclzh"},"content":"        return event;","lastModifiedDate":"2022-09-10"},{"lineNumber":82,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":83,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":84,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":85,"author":{"gitId":"marclzh"},"content":"     * Returns a string representation for the task\u0027s current status.","lastModifiedDate":"2022-08-17"},{"lineNumber":86,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":87,"author":{"gitId":"marclzh"},"content":"     * @return a string representation of the task\u0027s status.","lastModifiedDate":"2022-08-17"},{"lineNumber":88,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":89,"author":{"gitId":"marclzh"},"content":"    protected String getStatusIcon() {","lastModifiedDate":"2022-08-17"},{"lineNumber":90,"author":{"gitId":"marclzh"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2022-08-17"},{"lineNumber":91,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":92,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":93,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":94,"author":{"gitId":"marclzh"},"content":"     * Override toString method for a Task.","lastModifiedDate":"2022-08-26"},{"lineNumber":95,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":96,"author":{"gitId":"marclzh"},"content":"     * @return String representation of the Task.","lastModifiedDate":"2022-08-17"},{"lineNumber":97,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":98,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":99,"author":{"gitId":"marclzh"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":100,"author":{"gitId":"marclzh"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + description;","lastModifiedDate":"2022-08-17"},{"lineNumber":101,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":102,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":103,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":104,"author":{"gitId":"marclzh"},"content":"     * Formats the task into a suitable format for files","lastModifiedDate":"2022-08-25"},{"lineNumber":105,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-25"},{"lineNumber":106,"author":{"gitId":"marclzh"},"content":"     * @return String representation of the Task in saved format.","lastModifiedDate":"2022-08-25"},{"lineNumber":107,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":108,"author":{"gitId":"marclzh"},"content":"    public String saveFormat() {","lastModifiedDate":"2022-08-25"},{"lineNumber":109,"author":{"gitId":"marclzh"},"content":"        return String.format(\"%s | %d | %s\", this.priority.saveFormat(), this.isDone ? 1 : 0, this.description);","lastModifiedDate":"2022-09-10"},{"lineNumber":110,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":111,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":112,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":113,"author":{"gitId":"marclzh"},"content":"     * Marks the task as done.","lastModifiedDate":"2022-08-17"},{"lineNumber":114,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":115,"author":{"gitId":"marclzh"},"content":"    public void markDone() {","lastModifiedDate":"2022-08-17"},{"lineNumber":116,"author":{"gitId":"marclzh"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-08-17"},{"lineNumber":117,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":118,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":119,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":120,"author":{"gitId":"marclzh"},"content":"     * Marks the task as undone.","lastModifiedDate":"2022-08-17"},{"lineNumber":121,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":122,"author":{"gitId":"marclzh"},"content":"    public void markUndone() {","lastModifiedDate":"2022-08-17"},{"lineNumber":123,"author":{"gitId":"marclzh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-17"},{"lineNumber":124,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":125,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":126,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":127,"author":{"gitId":"marclzh"},"content":"     * Getter for the description of the task.","lastModifiedDate":"2022-08-26"},{"lineNumber":128,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":129,"author":{"gitId":"marclzh"},"content":"     * @return String representation of the description of the task.","lastModifiedDate":"2022-08-26"},{"lineNumber":130,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":131,"author":{"gitId":"marclzh"},"content":"    public String getDescription() {","lastModifiedDate":"2022-08-26"},{"lineNumber":132,"author":{"gitId":"marclzh"},"content":"        return this.description;","lastModifiedDate":"2022-08-26"},{"lineNumber":133,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":134,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"marclzh":134}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke.task;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-10"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-08-26"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":" * This class inherits from the abstract Task class","lastModifiedDate":"2022-08-26"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":" * and encapsulates the logic of a ToDo task.","lastModifiedDate":"2022-08-26"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"     * Constructor for the Todo Task.","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"     * @param description description of the task.","lastModifiedDate":"2022-08-17"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"    public ToDo(String description, Priority priority) {","lastModifiedDate":"2022-09-10"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"        super(description, priority);","lastModifiedDate":"2022-09-10"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"     * Factory method for creating a ToDo with user input.","lastModifiedDate":"2022-09-10"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"     * @param in User\u0027s input.","lastModifiedDate":"2022-09-10"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"     * @return Todo with the relevant input fields.","lastModifiedDate":"2022-09-10"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"     * @throws DukeException if incorrect formatting of todo task.","lastModifiedDate":"2022-09-10"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"    public static ToDo createToDo(String in) throws DukeException {","lastModifiedDate":"2022-09-10"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"        String[] prioritySplit \u003d splitPriority(in);","lastModifiedDate":"2022-09-10"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"        String description \u003d prioritySplit[0];","lastModifiedDate":"2022-09-10"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"        String priorityString \u003d prioritySplit[1];","lastModifiedDate":"2022-09-10"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"        Priority priority \u003d parsePriority(priorityString);","lastModifiedDate":"2022-09-10"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"        return new ToDo(description, priority);","lastModifiedDate":"2022-09-10"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"     * Overriden toString method for the Todo Task.","lastModifiedDate":"2022-08-17"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"     * @return String representation of the Todo.","lastModifiedDate":"2022-08-17"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"        return \"[T]\" + super.toString() + \" \" + priority;","lastModifiedDate":"2022-09-10"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"     * Override save format method from Task class.","lastModifiedDate":"2022-08-25"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-08-25"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"     * @return formatted String for the Event task.","lastModifiedDate":"2022-08-25"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-08-25"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"    public String saveFormat() {","lastModifiedDate":"2022-08-25"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"        return String.format(\"T | %s\", super.saveFormat());","lastModifiedDate":"2022-08-25"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"marclzh":56}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2022-09-15"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/18\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-09-15"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"    \u003cLabel fx:id\u003d\"dialog\" style\u003d\"-fx-background-color: #85C1E9#85C1E9; -fx-background-radius: 10; -fx-label-padding: 6;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2022-09-15"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"         \u003cfont\u003e","lastModifiedDate":"2022-09-15"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"            \u003cFont name\u003d\"Roboto\" size\u003d\"12.0\" /\u003e","lastModifiedDate":"2022-09-15"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"         \u003c/font\u003e","lastModifiedDate":"2022-09-15"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"         \u003cpadding\u003e","lastModifiedDate":"2022-09-15"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e","lastModifiedDate":"2022-09-15"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"         \u003c/padding\u003e\u003c/Label\u003e","lastModifiedDate":"2022-09-15"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"  \u003c/children\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"  \u003cpadding\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"  \u003c/padding\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-09-02"}],"authorContributionMap":{"marclzh":23}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-02"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/18\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"      \u003ccontent\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"      \u003c/content\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"  \u003c/children\u003e","lastModifiedDate":"2022-09-02"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2022-09-02"}],"authorContributionMap":{"marclzh":19}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-26"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-09-01"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-08-26"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":" * This class handles the logic of the Parser tester.","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"public class ParserTest {","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"     * Uses parseInput method with a valid input.","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"     * Output should be equal to the expected command.","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-08-26"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"    public void parseInput_correctInput_commandOutput() {","lastModifiedDate":"2022-08-26"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"        Parser.parseInput(\"todo test 1\");","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"        assertEquals(Parser.getUserCommand(), Command.TODO);","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-08-26"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"marclzh":22}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke.task;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-09-01"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-26"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-09-01"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"public class DeadlineTest {","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"     * Tests save format conversion method in Deadline class with 2 valid inputs.","lastModifiedDate":"2022-08-26"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"     * Test should return successfully if the converted string matches the expected output.","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"    public void saveFormat_saveFormatConversion_success() {","lastModifiedDate":"2022-08-26"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"        Deadline t1 \u003d new Deadline(\"task1\", LocalDateTime.of(2000,","lastModifiedDate":"2022-08-26"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"                12, 14, 5, 30), Priority.NONE);","lastModifiedDate":"2022-09-10"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"        Deadline t2 \u003d new Deadline(\"task2\", LocalDateTime.of(2022,","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"                12, 14, 23, 59), Priority.MEDIUM);","lastModifiedDate":"2022-09-10"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"        t1.markDone();","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"        assertEquals(\"D | none | 1 | task1 | Dec 14 2000 0530\", t1.saveFormat());","lastModifiedDate":"2022-09-10"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"        assertEquals(\"D | medium | 0 | task2 | Dec 14 2022 2359\", t2.saveFormat());","lastModifiedDate":"2022-09-10"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"marclzh":24}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke.task;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-09-01"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-26"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-09-01"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"public class EventTest {","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"     * Tests save format conversion method in Event class with 2 valid inputs.","lastModifiedDate":"2022-08-26"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"     * Test should return successfully if the converted string matches the expected output.","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"    public void saveFormat_saveFormatConversion_success() {","lastModifiedDate":"2022-08-26"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"        Event t1 \u003d new Event(\"task1\", LocalDateTime.of(2000,","lastModifiedDate":"2022-08-26"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"                12, 14, 5, 30), Priority.HIGH);","lastModifiedDate":"2022-09-10"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"        Event t2 \u003d new Event(\"task2\", LocalDateTime.of(2022,","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"                12, 14, 23, 59), Priority.LOW);","lastModifiedDate":"2022-09-10"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"        t1.markDone();","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"        assertEquals(\"E | high | 1 | task1 | Dec 14 2000 0530\", t1.saveFormat());","lastModifiedDate":"2022-09-10"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"        assertEquals(\"E | low | 0 | task2 | Dec 14 2022 2359\", t2.saveFormat());","lastModifiedDate":"2022-09-10"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"marclzh":24}},{"path":"src/test/java/duke/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package duke.task;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-26"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-09-01"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"public class ToDoTest {","lastModifiedDate":"2022-08-26"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"     * Tests save format conversion method in ToDo class with 2 valid inputs.","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"     * Test should return successfully if the converted string matches the expected output.","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"    public void saveFormat_saveFormatConversion_success() {","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"        ToDo t0 \u003d new ToDo(\"task0\", Priority.NONE);","lastModifiedDate":"2022-09-10"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"        ToDo t1 \u003d new ToDo(\"task1\", Priority.LOW);","lastModifiedDate":"2022-09-10"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"        ToDo t2 \u003d new ToDo(\"task2\", Priority.MEDIUM);","lastModifiedDate":"2022-09-10"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"        ToDo t3 \u003d new ToDo(\"task3\", Priority.HIGH);","lastModifiedDate":"2022-09-10"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"        t1.markDone();","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"        assertEquals(\"T | none | 0 | task0\", t0.saveFormat());","lastModifiedDate":"2022-09-10"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"        assertEquals(\"T | low | 1 | task1\", t1.saveFormat());","lastModifiedDate":"2022-09-10"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"        assertEquals(\"T | medium | 0 | task2\", t2.saveFormat());","lastModifiedDate":"2022-09-10"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"        assertEquals(\"T | high | 0 | task3\", t3.saveFormat());","lastModifiedDate":"2022-09-10"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"marclzh":24}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"invalid task","lastModifiedDate":"2022-08-17"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"todo task 1","lastModifiedDate":"2022-08-17"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"deadline task 2 /by xxx","lastModifiedDate":"2022-08-17"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"event task 3 /at xxx","lastModifiedDate":"2022-08-17"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"deadline task 2 /by 23-11-2000 2359","lastModifiedDate":"2022-08-26"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"event task 3 /at 23-11-2020 2359","lastModifiedDate":"2022-08-26"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"list","lastModifiedDate":"2022-08-17"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"mark 1","lastModifiedDate":"2022-08-17"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"mark 2","lastModifiedDate":"2022-08-17"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"mark 3","lastModifiedDate":"2022-08-17"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"mark 4","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"list","lastModifiedDate":"2022-08-17"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"unmark 1","lastModifiedDate":"2022-08-17"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"unmark 2","lastModifiedDate":"2022-08-17"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"list","lastModifiedDate":"2022-08-17"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"unmark 3","lastModifiedDate":"2022-08-17"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"unmark 4","lastModifiedDate":"2022-08-17"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"list","lastModifiedDate":"2022-08-17"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"unmark a","lastModifiedDate":"2022-08-17"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"mark a","lastModifiedDate":"2022-08-17"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"mark","lastModifiedDate":"2022-08-17"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"unmark","lastModifiedDate":"2022-08-17"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"todo","lastModifiedDate":"2022-08-17"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"deadline","lastModifiedDate":"2022-08-17"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"event","lastModifiedDate":"2022-08-17"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"list 2","lastModifiedDate":"2022-08-17"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"test invalid task","lastModifiedDate":"2022-08-17"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"delete","lastModifiedDate":"2022-08-17"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"delete 99","lastModifiedDate":"2022-08-17"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"delete 2","lastModifiedDate":"2022-08-17"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"list","lastModifiedDate":"2022-08-17"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"delete 1","lastModifiedDate":"2022-08-17"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"list","lastModifiedDate":"2022-08-17"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"find 1","lastModifiedDate":"2022-08-26"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"find 2","lastModifiedDate":"2022-08-26"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"find 3","lastModifiedDate":"2022-08-26"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"find task","lastModifiedDate":"2022-08-26"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"bye","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"marclzh":38}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\task\\*.java","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2022-08-26"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\exception\\*.java","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"PAUSE","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"marclzh":6,"-":20}}]
