[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sprintaway"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-08-13"},{"lineNumber":2,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":3,"author":{"gitId":"sprintaway"},"content":"    public Deadline(String description) {","lastModifiedDate":"2022-08-13"},{"lineNumber":4,"author":{"gitId":"sprintaway"},"content":"        super(description);","lastModifiedDate":"2022-08-13"},{"lineNumber":5,"author":{"gitId":"sprintaway"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":6,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":7,"author":{"gitId":"sprintaway"},"content":"    // Adapted from","lastModifiedDate":"2022-08-13"},{"lineNumber":8,"author":{"gitId":"sprintaway"},"content":"    // https://stackoverflow.com/questions/14316487/java-getting-a-substring-from-a-string-starting-after-a-particular-character","lastModifiedDate":"2022-08-13"},{"lineNumber":9,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":10,"author":{"gitId":"sprintaway"},"content":"    protected String by \u003d description.substring(description.lastIndexOf(\"/\") + 3);","lastModifiedDate":"2022-08-13"},{"lineNumber":11,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":12,"author":{"gitId":"sprintaway"},"content":"    @Override","lastModifiedDate":"2022-08-13"},{"lineNumber":13,"author":{"gitId":"sprintaway"},"content":"    public String toString() {","lastModifiedDate":"2022-08-13"},{"lineNumber":14,"author":{"gitId":"sprintaway"},"content":"        return \"[D]\" + super.toString().substring(0, 4) + getSubstring() + \"(by:\" + by + \")\";","lastModifiedDate":"2022-08-13"},{"lineNumber":15,"author":{"gitId":"sprintaway"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":16,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":17,"author":{"gitId":"sprintaway"},"content":"    // To return substring before \"/\"","lastModifiedDate":"2022-08-13"},{"lineNumber":18,"author":{"gitId":"sprintaway"},"content":"    // Adapted from","lastModifiedDate":"2022-08-13"},{"lineNumber":19,"author":{"gitId":"sprintaway"},"content":"    // https://stackoverflow.com/questions/7683448/in-java-how-to-get-substring-from-a-string-till-a-character-c","lastModifiedDate":"2022-08-13"},{"lineNumber":20,"author":{"gitId":"sprintaway"},"content":"    private String getSubstring() {","lastModifiedDate":"2022-08-14"},{"lineNumber":21,"author":{"gitId":"sprintaway"},"content":"        int index \u003d description.indexOf(\"/\");","lastModifiedDate":"2022-08-13"},{"lineNumber":22,"author":{"gitId":"sprintaway"},"content":"        if (index !\u003d - 1) {","lastModifiedDate":"2022-08-13"},{"lineNumber":23,"author":{"gitId":"sprintaway"},"content":"            return description.substring(9, index);","lastModifiedDate":"2022-08-13"},{"lineNumber":24,"author":{"gitId":"sprintaway"},"content":"        }","lastModifiedDate":"2022-08-13"},{"lineNumber":25,"author":{"gitId":"sprintaway"},"content":"        return null;","lastModifiedDate":"2022-08-13"},{"lineNumber":26,"author":{"gitId":"sprintaway"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":27,"author":{"gitId":"sprintaway"},"content":"}","lastModifiedDate":"2022-08-13"},{"lineNumber":28,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"}],"authorContributionMap":{"sprintaway":28}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sprintaway"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-13"},{"lineNumber":2,"author":{"gitId":"sprintaway"},"content":"import java.util.Objects;","lastModifiedDate":"2022-08-13"},{"lineNumber":3,"author":{"gitId":"sprintaway"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-13"},{"lineNumber":4,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":5,"author":{"gitId":"sprintaway"},"content":"import static java.lang.Integer.parseInt;","lastModifiedDate":"2022-08-13"},{"lineNumber":6,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"sprintaway"},"content":"    public static void main(String[] args) throws DukeException {","lastModifiedDate":"2022-08-14"},{"lineNumber":9,"author":{"gitId":"sprintaway"},"content":"        String greetings \u003d \"_________________________________________________\\nHello! I\u0027m Duke\" +","lastModifiedDate":"2022-08-13"},{"lineNumber":10,"author":{"gitId":"sprintaway"},"content":"                \"\\nWhat can I do for you?\\n_________________________________________________\";","lastModifiedDate":"2022-08-13"},{"lineNumber":11,"author":{"gitId":"sprintaway"},"content":"        System.out.println(greetings);","lastModifiedDate":"2022-08-13"},{"lineNumber":12,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":13,"author":{"gitId":"sprintaway"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-08-13"},{"lineNumber":14,"author":{"gitId":"sprintaway"},"content":"        //int count \u003d 1;","lastModifiedDate":"2022-08-13"},{"lineNumber":15,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":16,"author":{"gitId":"sprintaway"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2022-08-13"},{"lineNumber":17,"author":{"gitId":"sprintaway"},"content":"        String echo \u003d sc.nextLine();","lastModifiedDate":"2022-08-13"},{"lineNumber":18,"author":{"gitId":"sprintaway"},"content":"        while (!Objects.equals(echo, \"bye\")) {","lastModifiedDate":"2022-08-13"},{"lineNumber":19,"author":{"gitId":"sprintaway"},"content":"            if (Objects.equals(echo, \"list\")) {","lastModifiedDate":"2022-08-13"},{"lineNumber":20,"author":{"gitId":"sprintaway"},"content":"                if (tasks.isEmpty()) {","lastModifiedDate":"2022-08-13"},{"lineNumber":21,"author":{"gitId":"sprintaway"},"content":"                    throw new DukeException(\"☹ OOPS!!! No tasks available!\");","lastModifiedDate":"2022-08-14"},{"lineNumber":22,"author":{"gitId":"sprintaway"},"content":"                } else {","lastModifiedDate":"2022-08-13"},{"lineNumber":23,"author":{"gitId":"sprintaway"},"content":"                    System.out.println(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2022-08-13"},{"lineNumber":24,"author":{"gitId":"sprintaway"},"content":"                    for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-08-13"},{"lineNumber":25,"author":{"gitId":"sprintaway"},"content":"                        System.out.println(i + 1 + \". \" + tasks.get(i).toString());","lastModifiedDate":"2022-08-13"},{"lineNumber":26,"author":{"gitId":"sprintaway"},"content":"                    }","lastModifiedDate":"2022-08-13"},{"lineNumber":27,"author":{"gitId":"sprintaway"},"content":"                }","lastModifiedDate":"2022-08-13"},{"lineNumber":28,"author":{"gitId":"sprintaway"},"content":"                // checks if it starts with mark, has a space after mark, and are all numbers after the space","lastModifiedDate":"2022-08-13"},{"lineNumber":29,"author":{"gitId":"sprintaway"},"content":"            } else if (echo.length() \u003e\u003d 5 \u0026\u0026 (echo.startsWith(\"mark\") \u0026\u0026","lastModifiedDate":"2022-08-13"},{"lineNumber":30,"author":{"gitId":"sprintaway"},"content":"                    (Character.isWhitespace(echo.charAt(4))) \u0026\u0026","lastModifiedDate":"2022-08-13"},{"lineNumber":31,"author":{"gitId":"sprintaway"},"content":"                    echo.substring(5).chars().allMatch(Character::isDigit))) {","lastModifiedDate":"2022-08-13"},{"lineNumber":32,"author":{"gitId":"sprintaway"},"content":"                int number \u003d parseInt(echo.substring(5));","lastModifiedDate":"2022-08-13"},{"lineNumber":33,"author":{"gitId":"sprintaway"},"content":"                if (number \u003e tasks.size() || number \u003c\u003d 0) {","lastModifiedDate":"2022-08-13"},{"lineNumber":34,"author":{"gitId":"sprintaway"},"content":"                    throw new DukeException(\"☹ OOPS!!! Task number does not exist.\");","lastModifiedDate":"2022-08-14"},{"lineNumber":35,"author":{"gitId":"sprintaway"},"content":"                } else {","lastModifiedDate":"2022-08-13"},{"lineNumber":36,"author":{"gitId":"sprintaway"},"content":"                    tasks.get(number - 1).markAsDone();","lastModifiedDate":"2022-08-13"},{"lineNumber":37,"author":{"gitId":"sprintaway"},"content":"                    System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + tasks.get(number - 1).toString());","lastModifiedDate":"2022-08-13"},{"lineNumber":38,"author":{"gitId":"sprintaway"},"content":"                }","lastModifiedDate":"2022-08-13"},{"lineNumber":39,"author":{"gitId":"sprintaway"},"content":"                //int number \u003d Character.getNumericValue(echo.charAt(5));","lastModifiedDate":"2022-08-13"},{"lineNumber":40,"author":{"gitId":"sprintaway"},"content":"                //similar logic as above","lastModifiedDate":"2022-08-13"},{"lineNumber":41,"author":{"gitId":"sprintaway"},"content":"            } else if (echo.length() \u003e\u003d 7 \u0026\u0026 (echo.startsWith(\"unmark\") \u0026\u0026","lastModifiedDate":"2022-08-13"},{"lineNumber":42,"author":{"gitId":"sprintaway"},"content":"                    (Character.isWhitespace(echo.charAt(6))) \u0026\u0026","lastModifiedDate":"2022-08-13"},{"lineNumber":43,"author":{"gitId":"sprintaway"},"content":"                    echo.substring(7).chars().allMatch(Character::isDigit))) {","lastModifiedDate":"2022-08-13"},{"lineNumber":44,"author":{"gitId":"sprintaway"},"content":"                int number \u003d parseInt(echo.substring(7));","lastModifiedDate":"2022-08-13"},{"lineNumber":45,"author":{"gitId":"sprintaway"},"content":"                if (number \u003e tasks.size() || number \u003c\u003d 0) {","lastModifiedDate":"2022-08-13"},{"lineNumber":46,"author":{"gitId":"sprintaway"},"content":"                    throw new DukeException(\"☹ OOPS!!! Task number does not exist.\");","lastModifiedDate":"2022-08-14"},{"lineNumber":47,"author":{"gitId":"sprintaway"},"content":"                } else {","lastModifiedDate":"2022-08-13"},{"lineNumber":48,"author":{"gitId":"sprintaway"},"content":"                    tasks.get(number - 1).markAsNotDone();","lastModifiedDate":"2022-08-13"},{"lineNumber":49,"author":{"gitId":"sprintaway"},"content":"                    System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n\" +","lastModifiedDate":"2022-08-13"},{"lineNumber":50,"author":{"gitId":"sprintaway"},"content":"                            tasks.get(number - 1).toString());","lastModifiedDate":"2022-08-13"},{"lineNumber":51,"author":{"gitId":"sprintaway"},"content":"                }","lastModifiedDate":"2022-08-13"},{"lineNumber":52,"author":{"gitId":"sprintaway"},"content":"                //int number \u003d Character.getNumericValue(echo.charAt(5));","lastModifiedDate":"2022-08-13"},{"lineNumber":53,"author":{"gitId":"sprintaway"},"content":"            } else if (echo.length() \u003e\u003d 7 \u0026\u0026 (echo.startsWith(\"delete\") \u0026\u0026","lastModifiedDate":"2022-08-14"},{"lineNumber":54,"author":{"gitId":"sprintaway"},"content":"                    (Character.isWhitespace(echo.charAt(6))) \u0026\u0026","lastModifiedDate":"2022-08-14"},{"lineNumber":55,"author":{"gitId":"sprintaway"},"content":"                    echo.substring(7).chars().allMatch(Character::isDigit))) {","lastModifiedDate":"2022-08-14"},{"lineNumber":56,"author":{"gitId":"sprintaway"},"content":"                int number \u003d parseInt(echo.substring(7));","lastModifiedDate":"2022-08-14"},{"lineNumber":57,"author":{"gitId":"sprintaway"},"content":"                if (number \u003e tasks.size() || number \u003c\u003d 0) {","lastModifiedDate":"2022-08-14"},{"lineNumber":58,"author":{"gitId":"sprintaway"},"content":"                    throw new DukeException(\"☹ OOPS!!! Task number does not exist.\");","lastModifiedDate":"2022-08-14"},{"lineNumber":59,"author":{"gitId":"sprintaway"},"content":"                } else {","lastModifiedDate":"2022-08-14"},{"lineNumber":60,"author":{"gitId":"sprintaway"},"content":"                    System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + tasks.get(number - 1).toString());","lastModifiedDate":"2022-08-14"},{"lineNumber":61,"author":{"gitId":"sprintaway"},"content":"                    tasks.remove(number - 1);","lastModifiedDate":"2022-08-14"},{"lineNumber":62,"author":{"gitId":"sprintaway"},"content":"                    System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2022-08-14"},{"lineNumber":63,"author":{"gitId":"sprintaway"},"content":"                }","lastModifiedDate":"2022-08-14"},{"lineNumber":64,"author":{"gitId":"sprintaway"},"content":"            } else if (echo.equals(\"todo\") || (echo.startsWith(\"todo\") \u0026\u0026 echo.substring(5).isBlank())) {","lastModifiedDate":"2022-08-14"},{"lineNumber":65,"author":{"gitId":"sprintaway"},"content":"                    throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2022-08-14"},{"lineNumber":66,"author":{"gitId":"sprintaway"},"content":"            } else if (echo.startsWith(\"todo\") \u0026\u0026 Character.isWhitespace(echo.charAt(4))) {","lastModifiedDate":"2022-08-14"},{"lineNumber":67,"author":{"gitId":"sprintaway"},"content":"                    System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2022-08-13"},{"lineNumber":68,"author":{"gitId":"sprintaway"},"content":"                    tasks.add(new ToDo(echo));","lastModifiedDate":"2022-08-13"},{"lineNumber":69,"author":{"gitId":"sprintaway"},"content":"                    System.out.println(tasks.get(tasks.size() - 1) + \"\\nNow you have \" + tasks.size() +","lastModifiedDate":"2022-08-14"},{"lineNumber":70,"author":{"gitId":"sprintaway"},"content":"                            \" tasks in the list.\");","lastModifiedDate":"2022-08-14"},{"lineNumber":71,"author":{"gitId":"sprintaway"},"content":"                //System.out.println(\"_________________________________________________\\nadded: \" + echo + \"\\n\" +","lastModifiedDate":"2022-08-14"},{"lineNumber":72,"author":{"gitId":"sprintaway"},"content":"                //        \"_________________________________________________\\n\");","lastModifiedDate":"2022-08-14"},{"lineNumber":73,"author":{"gitId":"sprintaway"},"content":"            } else if (echo.equals(\"deadline\") || (echo.startsWith(\"deadline\") \u0026\u0026 echo.substring(9).isBlank())) {","lastModifiedDate":"2022-08-14"},{"lineNumber":74,"author":{"gitId":"sprintaway"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2022-08-14"},{"lineNumber":75,"author":{"gitId":"sprintaway"},"content":"            } else if (echo.startsWith(\"deadline\") \u0026\u0026 Character.isWhitespace(echo.charAt(8))) {","lastModifiedDate":"2022-08-14"},{"lineNumber":76,"author":{"gitId":"sprintaway"},"content":"                if (!echo.contains(\"/by\")) {","lastModifiedDate":"2022-08-14"},{"lineNumber":77,"author":{"gitId":"sprintaway"},"content":"                    throw new DukeException(\"☹ OOPS!!! Please use the correct format!\");","lastModifiedDate":"2022-08-14"},{"lineNumber":78,"author":{"gitId":"sprintaway"},"content":"                } else {","lastModifiedDate":"2022-08-14"},{"lineNumber":79,"author":{"gitId":"sprintaway"},"content":"                    System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2022-08-14"},{"lineNumber":80,"author":{"gitId":"sprintaway"},"content":"                    tasks.add(new Deadline(echo));","lastModifiedDate":"2022-08-13"},{"lineNumber":81,"author":{"gitId":"sprintaway"},"content":"                    System.out.println(tasks.get(tasks.size() - 1) + \"\\nNow you have \" + tasks.size() +","lastModifiedDate":"2022-08-14"},{"lineNumber":82,"author":{"gitId":"sprintaway"},"content":"                            \" tasks in the list.\");","lastModifiedDate":"2022-08-14"},{"lineNumber":83,"author":{"gitId":"sprintaway"},"content":"                }","lastModifiedDate":"2022-08-13"},{"lineNumber":84,"author":{"gitId":"sprintaway"},"content":"            } else if (echo.equals(\"event\") || (echo.startsWith(\"event\") \u0026\u0026 echo.substring(6).isBlank())) {","lastModifiedDate":"2022-08-14"},{"lineNumber":85,"author":{"gitId":"sprintaway"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2022-08-14"},{"lineNumber":86,"author":{"gitId":"sprintaway"},"content":"            } else if (echo.startsWith(\"event\") \u0026\u0026 Character.isWhitespace(echo.charAt(5))) {","lastModifiedDate":"2022-08-14"},{"lineNumber":87,"author":{"gitId":"sprintaway"},"content":"                if (!echo.contains(\"/at\")) {","lastModifiedDate":"2022-08-14"},{"lineNumber":88,"author":{"gitId":"sprintaway"},"content":"                    throw new DukeException(\"☹ OOPS!!! Please use the correct format!\");","lastModifiedDate":"2022-08-14"},{"lineNumber":89,"author":{"gitId":"sprintaway"},"content":"                } else {","lastModifiedDate":"2022-08-14"},{"lineNumber":90,"author":{"gitId":"sprintaway"},"content":"                    System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2022-08-14"},{"lineNumber":91,"author":{"gitId":"sprintaway"},"content":"                    tasks.add(new Event(echo));","lastModifiedDate":"2022-08-13"},{"lineNumber":92,"author":{"gitId":"sprintaway"},"content":"                    System.out.println(tasks.get(tasks.size() - 1) + \"\\nNow you have \" + tasks.size() +","lastModifiedDate":"2022-08-14"},{"lineNumber":93,"author":{"gitId":"sprintaway"},"content":"                            \" tasks in the list.\");","lastModifiedDate":"2022-08-14"},{"lineNumber":94,"author":{"gitId":"sprintaway"},"content":"                }","lastModifiedDate":"2022-08-14"},{"lineNumber":95,"author":{"gitId":"sprintaway"},"content":"            } else {","lastModifiedDate":"2022-08-14"},{"lineNumber":96,"author":{"gitId":"sprintaway"},"content":"                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2022-08-14"},{"lineNumber":97,"author":{"gitId":"sprintaway"},"content":"            }","lastModifiedDate":"2022-08-13"},{"lineNumber":98,"author":{"gitId":"sprintaway"},"content":"            echo \u003d sc.nextLine();","lastModifiedDate":"2022-08-13"},{"lineNumber":99,"author":{"gitId":"sprintaway"},"content":"        }","lastModifiedDate":"2022-08-13"},{"lineNumber":100,"author":{"gitId":"sprintaway"},"content":"        System.out.println(\"_________________________________________________\\nBye. Hope to see you again soon!\\n\" +","lastModifiedDate":"2022-08-13"},{"lineNumber":101,"author":{"gitId":"sprintaway"},"content":"                \"_________________________________________________\\n\");","lastModifiedDate":"2022-08-13"},{"lineNumber":102,"author":{"gitId":"sprintaway"},"content":"        /*","lastModifiedDate":"2022-08-13"},{"lineNumber":103,"author":{"gitId":"sprintaway"},"content":"        String greetings \u003d \"_________________________________________________\\nHello! I\u0027m Duke\" +","lastModifiedDate":"2022-08-13"},{"lineNumber":104,"author":{"gitId":"sprintaway"},"content":"                \"\\nWhat can I do for you?\\n_________________________________________________\";","lastModifiedDate":"2022-08-13"},{"lineNumber":105,"author":{"gitId":"sprintaway"},"content":"        System.out.println(greetings);","lastModifiedDate":"2022-08-13"},{"lineNumber":106,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":107,"author":{"gitId":"sprintaway"},"content":"        String[] tasks \u003d new String[100];","lastModifiedDate":"2022-08-13"},{"lineNumber":108,"author":{"gitId":"sprintaway"},"content":"        int count \u003d 1;","lastModifiedDate":"2022-08-13"},{"lineNumber":109,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":110,"author":{"gitId":"sprintaway"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2022-08-13"},{"lineNumber":111,"author":{"gitId":"sprintaway"},"content":"        String echo \u003d sc.nextLine();","lastModifiedDate":"2022-08-13"},{"lineNumber":112,"author":{"gitId":"sprintaway"},"content":"        while (!Objects.equals(echo, \"bye\")) {","lastModifiedDate":"2022-08-13"},{"lineNumber":113,"author":{"gitId":"sprintaway"},"content":"            if (Objects.equals(echo, \"list\")) {","lastModifiedDate":"2022-08-13"},{"lineNumber":114,"author":{"gitId":"sprintaway"},"content":"                for (int i \u003d 1; i \u003c tasks.length; i++) {","lastModifiedDate":"2022-08-13"},{"lineNumber":115,"author":{"gitId":"sprintaway"},"content":"                    System.out.println(i + \". \" + tasks[i]);","lastModifiedDate":"2022-08-13"},{"lineNumber":116,"author":{"gitId":"sprintaway"},"content":"                }","lastModifiedDate":"2022-08-13"},{"lineNumber":117,"author":{"gitId":"sprintaway"},"content":"            }","lastModifiedDate":"2022-08-13"},{"lineNumber":118,"author":{"gitId":"sprintaway"},"content":"            System.out.println(\"_________________________________________________\\nadded: \" + echo + \"\\n\" +","lastModifiedDate":"2022-08-13"},{"lineNumber":119,"author":{"gitId":"sprintaway"},"content":"                    \"_________________________________________________\\n\");","lastModifiedDate":"2022-08-13"},{"lineNumber":120,"author":{"gitId":"sprintaway"},"content":"            tasks[count] \u003d echo;","lastModifiedDate":"2022-08-13"},{"lineNumber":121,"author":{"gitId":"sprintaway"},"content":"            count++;","lastModifiedDate":"2022-08-13"},{"lineNumber":122,"author":{"gitId":"sprintaway"},"content":"            echo \u003d sc.nextLine();","lastModifiedDate":"2022-08-13"},{"lineNumber":123,"author":{"gitId":"sprintaway"},"content":"        }","lastModifiedDate":"2022-08-13"},{"lineNumber":124,"author":{"gitId":"sprintaway"},"content":"        System.out.println(\"_________________________________________________\\nBye. Hope to see you again soon!\\n\" +","lastModifiedDate":"2022-08-13"},{"lineNumber":125,"author":{"gitId":"sprintaway"},"content":"                \"_________________________________________________\\n\");","lastModifiedDate":"2022-08-13"},{"lineNumber":126,"author":{"gitId":"sprintaway"},"content":"        */","lastModifiedDate":"2022-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"sprintaway":125,"-":3}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sprintaway"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-08-14"},{"lineNumber":2,"author":{"gitId":"sprintaway"},"content":"    public DukeException(String string) {","lastModifiedDate":"2022-08-14"},{"lineNumber":3,"author":{"gitId":"sprintaway"},"content":"        super(string);","lastModifiedDate":"2022-08-14"},{"lineNumber":4,"author":{"gitId":"sprintaway"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":5,"author":{"gitId":"sprintaway"},"content":"}","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"sprintaway":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sprintaway"},"content":"public class Event extends Task {","lastModifiedDate":"2022-08-13"},{"lineNumber":2,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":3,"author":{"gitId":"sprintaway"},"content":"    public Event(String description) {","lastModifiedDate":"2022-08-13"},{"lineNumber":4,"author":{"gitId":"sprintaway"},"content":"        super(description);","lastModifiedDate":"2022-08-13"},{"lineNumber":5,"author":{"gitId":"sprintaway"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":6,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":7,"author":{"gitId":"sprintaway"},"content":"    protected String at \u003d description.substring(description.lastIndexOf(\"/\") + 3);","lastModifiedDate":"2022-08-13"},{"lineNumber":8,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":9,"author":{"gitId":"sprintaway"},"content":"    @Override","lastModifiedDate":"2022-08-13"},{"lineNumber":10,"author":{"gitId":"sprintaway"},"content":"    public String toString() {","lastModifiedDate":"2022-08-13"},{"lineNumber":11,"author":{"gitId":"sprintaway"},"content":"        return \"[E]\" + super.toString().substring(0, 4) + getSubstring() +  \"(at:\" + at + \")\";","lastModifiedDate":"2022-08-13"},{"lineNumber":12,"author":{"gitId":"sprintaway"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":13,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":14,"author":{"gitId":"sprintaway"},"content":"    private String getSubstring() {","lastModifiedDate":"2022-08-14"},{"lineNumber":15,"author":{"gitId":"sprintaway"},"content":"        int index \u003d description.indexOf(\"/\");","lastModifiedDate":"2022-08-13"},{"lineNumber":16,"author":{"gitId":"sprintaway"},"content":"        if (index !\u003d - 1) {","lastModifiedDate":"2022-08-13"},{"lineNumber":17,"author":{"gitId":"sprintaway"},"content":"            return description.substring(6, index);","lastModifiedDate":"2022-08-13"},{"lineNumber":18,"author":{"gitId":"sprintaway"},"content":"        }","lastModifiedDate":"2022-08-13"},{"lineNumber":19,"author":{"gitId":"sprintaway"},"content":"        return null;","lastModifiedDate":"2022-08-13"},{"lineNumber":20,"author":{"gitId":"sprintaway"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":21,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":22,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":23,"author":{"gitId":"sprintaway"},"content":"}","lastModifiedDate":"2022-08-13"}],"authorContributionMap":{"sprintaway":23}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sprintaway"},"content":"public class Task {","lastModifiedDate":"2022-08-13"},{"lineNumber":2,"author":{"gitId":"sprintaway"},"content":"    protected String description;","lastModifiedDate":"2022-08-13"},{"lineNumber":3,"author":{"gitId":"sprintaway"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-08-13"},{"lineNumber":4,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":5,"author":{"gitId":"sprintaway"},"content":"    public Task(String description) {","lastModifiedDate":"2022-08-13"},{"lineNumber":6,"author":{"gitId":"sprintaway"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-08-13"},{"lineNumber":7,"author":{"gitId":"sprintaway"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-13"},{"lineNumber":8,"author":{"gitId":"sprintaway"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":9,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":10,"author":{"gitId":"sprintaway"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-08-13"},{"lineNumber":11,"author":{"gitId":"sprintaway"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2022-08-13"},{"lineNumber":12,"author":{"gitId":"sprintaway"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":13,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":14,"author":{"gitId":"sprintaway"},"content":"    public String toString() {","lastModifiedDate":"2022-08-13"},{"lineNumber":15,"author":{"gitId":"sprintaway"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2022-08-13"},{"lineNumber":16,"author":{"gitId":"sprintaway"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":17,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":18,"author":{"gitId":"sprintaway"},"content":"    public void markAsDone() {","lastModifiedDate":"2022-08-13"},{"lineNumber":19,"author":{"gitId":"sprintaway"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-08-13"},{"lineNumber":20,"author":{"gitId":"sprintaway"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":21,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":22,"author":{"gitId":"sprintaway"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2022-08-13"},{"lineNumber":23,"author":{"gitId":"sprintaway"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-13"},{"lineNumber":24,"author":{"gitId":"sprintaway"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":25,"author":{"gitId":"sprintaway"},"content":"}","lastModifiedDate":"2022-08-13"}],"authorContributionMap":{"sprintaway":25}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sprintaway"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-08-13"},{"lineNumber":2,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":3,"author":{"gitId":"sprintaway"},"content":"    public ToDo(String description) {","lastModifiedDate":"2022-08-13"},{"lineNumber":4,"author":{"gitId":"sprintaway"},"content":"        super(description);","lastModifiedDate":"2022-08-13"},{"lineNumber":5,"author":{"gitId":"sprintaway"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":6,"author":{"gitId":"sprintaway"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":7,"author":{"gitId":"sprintaway"},"content":"    @Override","lastModifiedDate":"2022-08-13"},{"lineNumber":8,"author":{"gitId":"sprintaway"},"content":"    public String toString() {","lastModifiedDate":"2022-08-13"},{"lineNumber":9,"author":{"gitId":"sprintaway"},"content":"        return \"[T]\" + super.toString().substring(0, 4) + super.toString().substring(9);","lastModifiedDate":"2022-08-13"},{"lineNumber":10,"author":{"gitId":"sprintaway"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":11,"author":{"gitId":"sprintaway"},"content":"}","lastModifiedDate":"2022-08-13"}],"authorContributionMap":{"sprintaway":11}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"sprintaway"},"content":"todo Cry over homework","lastModifiedDate":"2022-08-14"},{"lineNumber":2,"author":{"gitId":"sprintaway"},"content":"event meet friends /at Sunday, 12pm","lastModifiedDate":"2022-08-14"},{"lineNumber":3,"author":{"gitId":"sprintaway"},"content":"event Go to school /at Monday, 8am","lastModifiedDate":"2022-08-14"},{"lineNumber":4,"author":{"gitId":"sprintaway"},"content":"deadline Finish CS2103 iP Week 2 /by next Friday","lastModifiedDate":"2022-08-14"},{"lineNumber":5,"author":{"gitId":"sprintaway"},"content":"mark 3","lastModifiedDate":"2022-08-14"},{"lineNumber":6,"author":{"gitId":"sprintaway"},"content":"mark 4","lastModifiedDate":"2022-08-14"},{"lineNumber":7,"author":{"gitId":"sprintaway"},"content":"unmark 3","lastModifiedDate":"2022-08-14"},{"lineNumber":8,"author":{"gitId":"sprintaway"},"content":"list","lastModifiedDate":"2022-08-14"},{"lineNumber":9,"author":{"gitId":"sprintaway"},"content":"bye","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"sprintaway":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"sprintaway"},"content":"del ACTUAL.TXT","lastModifiedDate":"2022-08-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sprintaway":1,"-":20}}]
