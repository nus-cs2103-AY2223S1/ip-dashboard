[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Hikoya"},"content":"# Skylark project template","lastModifiedDate":"2022-08-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Hikoya"},"content":"3. After that, locate the `src/main/java/Skylark.java` file, right-click it, and choose `Run Skylark.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-08-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Hikoya":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"Hikoya"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"Hikoya"},"content":"}","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Hikoya"},"content":"checkstyle {","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"Hikoya"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"Hikoya"},"content":"    mainClassName \u003d \"skylark.Skylark\"","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"Hikoya"},"content":"    archiveBaseName \u003d \"skylark\"","lastModifiedDate":"2022-08-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Hikoya":7,"-":39}},{"path":"src/main/java/skylark/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hikoya"},"content":"package skylark;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Hikoya"},"content":"/**","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Hikoya"},"content":" * Represents a command based on user input. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"Hikoya"},"content":" * A \u003ccode\u003eCommand\u003c/code\u003e object corresponds to","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"Hikoya"},"content":" * a particular command selected by the user e.g., user selects \u003ccode\u003elist\u003c/code\u003e.","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Hikoya"},"content":" */","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Hikoya"},"content":"public abstract class Command {","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Hikoya"},"content":"    /** String representing the input keyed by the user. */","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Hikoya"},"content":"    private final String input;","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Hikoya"},"content":"    private Command(String input) {","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"Hikoya"},"content":"        this.input \u003d input;","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"Hikoya"},"content":"     * Interprets the command based on keywords.","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"Hikoya"},"content":"     * If there are no matching commands, a UnknownCommand is returned.","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"Hikoya"},"content":"     * @param command Input string from the user.","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"Hikoya"},"content":"     * @return A Command object based on interpreted input.","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"Hikoya"},"content":"    public static Command createCommand(String command) {","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Hikoya"},"content":"        if (command.equals(CommandList.COMMAND_BYE.toString())) {","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Hikoya"},"content":"            return new ByeCommand(command);","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"Hikoya"},"content":"        } else if (command.equals(skylark.CommandList.COMMAND_LIST.toString())) {","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"Hikoya"},"content":"            return new ListCommand(command);","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Hikoya"},"content":"        } else if (command.length() \u003e\u003d 4 \u0026\u0026 command.startsWith(CommandList.COMMAND_DONE.toString())) {","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"Hikoya"},"content":"            return new DoneCommand(command);","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Hikoya"},"content":"        } else if (command.length() \u003e\u003d 6 \u0026\u0026 command.startsWith(CommandList.COMMAND_UNDONE.toString())) {","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Hikoya"},"content":"            return new UndoneCommand(command);","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Hikoya"},"content":"        } else if (command.length() \u003e\u003d 4 \u0026\u0026 command.startsWith(CommandList.COMMAND_TODO.toString())) {","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"Hikoya"},"content":"            return new TodoCommand(command);","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"Hikoya"},"content":"        } else if (command.length() \u003e\u003d 8 \u0026\u0026 command.startsWith(CommandList.COMMAND_DEADLINE.toString())) {","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"Hikoya"},"content":"            return new DeadlineCommand(command);","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"Hikoya"},"content":"        } else if (command.length() \u003e\u003d 5 \u0026\u0026 command.startsWith(CommandList.COMMAND_EVENT.toString())) {","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"Hikoya"},"content":"            return new EventCommand(command);","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"Hikoya"},"content":"        } else if (command.length() \u003e\u003d 6 \u0026\u0026 command.startsWith(CommandList.COMMAND_DELETE.toString())) {","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"Hikoya"},"content":"            return new DeleteCommand(command);","lastModifiedDate":"2022-08-21"},{"lineNumber":41,"author":{"gitId":"Hikoya"},"content":"        } else if (command.length() \u003e\u003d 5 \u0026\u0026 command.startsWith(CommandList.COMMAND_FIND.toString())) {","lastModifiedDate":"2022-08-21"},{"lineNumber":42,"author":{"gitId":"Hikoya"},"content":"            return new FindCommand(command);","lastModifiedDate":"2022-08-21"},{"lineNumber":43,"author":{"gitId":"Hikoya"},"content":"        } else {","lastModifiedDate":"2022-08-21"},{"lineNumber":44,"author":{"gitId":"Hikoya"},"content":"            return new UnknownCommand(command);","lastModifiedDate":"2022-08-21"},{"lineNumber":45,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":46,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":47,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":48,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":49,"author":{"gitId":"Hikoya"},"content":"     * Executes the command.","lastModifiedDate":"2022-08-21"},{"lineNumber":50,"author":{"gitId":"Hikoya"},"content":"     * Throws a SkylarkException if there is an error.","lastModifiedDate":"2022-08-21"},{"lineNumber":51,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":52,"author":{"gitId":"Hikoya"},"content":"     * @param taskList List of Tasks that already exists.","lastModifiedDate":"2022-08-21"},{"lineNumber":53,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":54,"author":{"gitId":"Hikoya"},"content":"    public abstract void run(TaskList taskList) throws SkylarkException;","lastModifiedDate":"2022-08-21"},{"lineNumber":55,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":56,"author":{"gitId":"Hikoya"},"content":"    /** Returns the exact input keyed by the user. */","lastModifiedDate":"2022-08-21"},{"lineNumber":57,"author":{"gitId":"Hikoya"},"content":"    public String getInput() {","lastModifiedDate":"2022-08-21"},{"lineNumber":58,"author":{"gitId":"Hikoya"},"content":"        return this.input;","lastModifiedDate":"2022-08-21"},{"lineNumber":59,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":60,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":61,"author":{"gitId":"Hikoya"},"content":"    private static class ByeCommand extends Command {","lastModifiedDate":"2022-08-21"},{"lineNumber":62,"author":{"gitId":"Hikoya"},"content":"        /** Text that is displayed when the user issues the Bye command. */","lastModifiedDate":"2022-08-21"},{"lineNumber":63,"author":{"gitId":"Hikoya"},"content":"        private static final String TEXT \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2022-08-21"},{"lineNumber":64,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":65,"author":{"gitId":"Hikoya"},"content":"        /**","lastModifiedDate":"2022-08-21"},{"lineNumber":66,"author":{"gitId":"Hikoya"},"content":"         * Returns a ByeCommand object.","lastModifiedDate":"2022-08-21"},{"lineNumber":67,"author":{"gitId":"Hikoya"},"content":"         *","lastModifiedDate":"2022-08-21"},{"lineNumber":68,"author":{"gitId":"Hikoya"},"content":"         * @param input String that is input by the user.","lastModifiedDate":"2022-08-21"},{"lineNumber":69,"author":{"gitId":"Hikoya"},"content":"         */","lastModifiedDate":"2022-08-21"},{"lineNumber":70,"author":{"gitId":"Hikoya"},"content":"        public ByeCommand(String input) {","lastModifiedDate":"2022-08-21"},{"lineNumber":71,"author":{"gitId":"Hikoya"},"content":"            super(input);","lastModifiedDate":"2022-08-21"},{"lineNumber":72,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":73,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":74,"author":{"gitId":"Hikoya"},"content":"        @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":75,"author":{"gitId":"Hikoya"},"content":"        public void run(TaskList taskList) {","lastModifiedDate":"2022-08-21"},{"lineNumber":76,"author":{"gitId":"Hikoya"},"content":"            Printer.printText(ByeCommand.TEXT);","lastModifiedDate":"2022-08-21"},{"lineNumber":77,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":78,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":79,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":80,"author":{"gitId":"Hikoya"},"content":"    private static class ListCommand extends Command {","lastModifiedDate":"2022-08-21"},{"lineNumber":81,"author":{"gitId":"Hikoya"},"content":"        /**","lastModifiedDate":"2022-08-21"},{"lineNumber":82,"author":{"gitId":"Hikoya"},"content":"         * Returns a ListCommand object.","lastModifiedDate":"2022-08-21"},{"lineNumber":83,"author":{"gitId":"Hikoya"},"content":"         *","lastModifiedDate":"2022-08-21"},{"lineNumber":84,"author":{"gitId":"Hikoya"},"content":"         * @param input String that is input by the user.","lastModifiedDate":"2022-08-21"},{"lineNumber":85,"author":{"gitId":"Hikoya"},"content":"         */","lastModifiedDate":"2022-08-21"},{"lineNumber":86,"author":{"gitId":"Hikoya"},"content":"        public ListCommand(String input) {","lastModifiedDate":"2022-08-21"},{"lineNumber":87,"author":{"gitId":"Hikoya"},"content":"            super(input);","lastModifiedDate":"2022-08-21"},{"lineNumber":88,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":89,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":90,"author":{"gitId":"Hikoya"},"content":"        @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":91,"author":{"gitId":"Hikoya"},"content":"        public void run(TaskList taskList) {","lastModifiedDate":"2022-08-21"},{"lineNumber":92,"author":{"gitId":"Hikoya"},"content":"            Printer.printText(\"Here are the tasks in your list:\");","lastModifiedDate":"2022-08-21"},{"lineNumber":93,"author":{"gitId":"Hikoya"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2022-08-21"},{"lineNumber":94,"author":{"gitId":"Hikoya"},"content":"                Task currentTask \u003d taskList.get(i);","lastModifiedDate":"2022-08-21"},{"lineNumber":95,"author":{"gitId":"Hikoya"},"content":"                Printer.printText((i + 1) + \". \" + currentTask.toString());","lastModifiedDate":"2022-08-21"},{"lineNumber":96,"author":{"gitId":"Hikoya"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":97,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":98,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":99,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":100,"author":{"gitId":"Hikoya"},"content":"    private static class DoneCommand extends Command {","lastModifiedDate":"2022-08-21"},{"lineNumber":101,"author":{"gitId":"Hikoya"},"content":"        /**","lastModifiedDate":"2022-08-21"},{"lineNumber":102,"author":{"gitId":"Hikoya"},"content":"         * Returns a DoneCommand object.","lastModifiedDate":"2022-08-21"},{"lineNumber":103,"author":{"gitId":"Hikoya"},"content":"         *","lastModifiedDate":"2022-08-21"},{"lineNumber":104,"author":{"gitId":"Hikoya"},"content":"         * @param input String that is input by the user.","lastModifiedDate":"2022-08-21"},{"lineNumber":105,"author":{"gitId":"Hikoya"},"content":"         */","lastModifiedDate":"2022-08-21"},{"lineNumber":106,"author":{"gitId":"Hikoya"},"content":"        public DoneCommand(String input) {","lastModifiedDate":"2022-08-21"},{"lineNumber":107,"author":{"gitId":"Hikoya"},"content":"            super(input);","lastModifiedDate":"2022-08-21"},{"lineNumber":108,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":109,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":110,"author":{"gitId":"Hikoya"},"content":"        @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":111,"author":{"gitId":"Hikoya"},"content":"        public void run(TaskList taskList) throws SkylarkException {","lastModifiedDate":"2022-08-21"},{"lineNumber":112,"author":{"gitId":"Hikoya"},"content":"            int index \u003d Integer.parseInt(super.getInput().substring(5)) - 1;","lastModifiedDate":"2022-08-21"},{"lineNumber":113,"author":{"gitId":"Hikoya"},"content":"            if (taskList.doesIndexExist(index)) {","lastModifiedDate":"2022-08-21"},{"lineNumber":114,"author":{"gitId":"Hikoya"},"content":"                Task currentTask \u003d taskList.get(index);","lastModifiedDate":"2022-08-21"},{"lineNumber":115,"author":{"gitId":"Hikoya"},"content":"                currentTask.markAsDone();","lastModifiedDate":"2022-08-21"},{"lineNumber":116,"author":{"gitId":"Hikoya"},"content":"                Printer.printText(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2022-08-21"},{"lineNumber":117,"author":{"gitId":"Hikoya"},"content":"                Printer.printText(currentTask.toString());","lastModifiedDate":"2022-08-21"},{"lineNumber":118,"author":{"gitId":"Hikoya"},"content":"                taskList.saveToFile();","lastModifiedDate":"2022-08-21"},{"lineNumber":119,"author":{"gitId":"Hikoya"},"content":"            } else {","lastModifiedDate":"2022-08-21"},{"lineNumber":120,"author":{"gitId":"Hikoya"},"content":"                throw new SkylarkException(\"Sorry, index does not exist!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":121,"author":{"gitId":"Hikoya"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":122,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":123,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":124,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":125,"author":{"gitId":"Hikoya"},"content":"    private static class UndoneCommand extends Command {","lastModifiedDate":"2022-08-21"},{"lineNumber":126,"author":{"gitId":"Hikoya"},"content":"        /**","lastModifiedDate":"2022-08-21"},{"lineNumber":127,"author":{"gitId":"Hikoya"},"content":"         * Returns a UndoneCommand object.","lastModifiedDate":"2022-08-21"},{"lineNumber":128,"author":{"gitId":"Hikoya"},"content":"         *","lastModifiedDate":"2022-08-21"},{"lineNumber":129,"author":{"gitId":"Hikoya"},"content":"         * @param input String that is input by the user.","lastModifiedDate":"2022-08-21"},{"lineNumber":130,"author":{"gitId":"Hikoya"},"content":"         */","lastModifiedDate":"2022-08-21"},{"lineNumber":131,"author":{"gitId":"Hikoya"},"content":"        public UndoneCommand(String input) {","lastModifiedDate":"2022-08-21"},{"lineNumber":132,"author":{"gitId":"Hikoya"},"content":"            super(input);","lastModifiedDate":"2022-08-21"},{"lineNumber":133,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":134,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":135,"author":{"gitId":"Hikoya"},"content":"        @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":136,"author":{"gitId":"Hikoya"},"content":"        public void run(TaskList taskList) throws SkylarkException {","lastModifiedDate":"2022-08-21"},{"lineNumber":137,"author":{"gitId":"Hikoya"},"content":"            int index \u003d Integer.parseInt(super.getInput().substring(7)) - 1;","lastModifiedDate":"2022-08-21"},{"lineNumber":138,"author":{"gitId":"Hikoya"},"content":"            if (taskList.doesIndexExist(index)) {","lastModifiedDate":"2022-08-21"},{"lineNumber":139,"author":{"gitId":"Hikoya"},"content":"                Task currentTask \u003d taskList.get(index);","lastModifiedDate":"2022-08-21"},{"lineNumber":140,"author":{"gitId":"Hikoya"},"content":"                currentTask.markAsUndone();","lastModifiedDate":"2022-08-21"},{"lineNumber":141,"author":{"gitId":"Hikoya"},"content":"                Printer.printText(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2022-08-21"},{"lineNumber":142,"author":{"gitId":"Hikoya"},"content":"                Printer.printText(currentTask.toString());","lastModifiedDate":"2022-08-21"},{"lineNumber":143,"author":{"gitId":"Hikoya"},"content":"                taskList.saveToFile();","lastModifiedDate":"2022-08-21"},{"lineNumber":144,"author":{"gitId":"Hikoya"},"content":"            } else {","lastModifiedDate":"2022-08-21"},{"lineNumber":145,"author":{"gitId":"Hikoya"},"content":"                throw new SkylarkException(\"Sorry, index does not exist!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":146,"author":{"gitId":"Hikoya"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":147,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":148,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":149,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":150,"author":{"gitId":"Hikoya"},"content":"    private static class TodoCommand extends Command {","lastModifiedDate":"2022-08-21"},{"lineNumber":151,"author":{"gitId":"Hikoya"},"content":"        /**","lastModifiedDate":"2022-08-21"},{"lineNumber":152,"author":{"gitId":"Hikoya"},"content":"         * Returns a Todo object.","lastModifiedDate":"2022-08-21"},{"lineNumber":153,"author":{"gitId":"Hikoya"},"content":"         *","lastModifiedDate":"2022-08-21"},{"lineNumber":154,"author":{"gitId":"Hikoya"},"content":"         * @param input String that is input by the user.","lastModifiedDate":"2022-08-21"},{"lineNumber":155,"author":{"gitId":"Hikoya"},"content":"         */","lastModifiedDate":"2022-08-21"},{"lineNumber":156,"author":{"gitId":"Hikoya"},"content":"        public TodoCommand(String input) {","lastModifiedDate":"2022-08-21"},{"lineNumber":157,"author":{"gitId":"Hikoya"},"content":"            super(input);","lastModifiedDate":"2022-08-21"},{"lineNumber":158,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":159,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":160,"author":{"gitId":"Hikoya"},"content":"        @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":161,"author":{"gitId":"Hikoya"},"content":"        public void run(TaskList taskList) throws SkylarkException {","lastModifiedDate":"2022-08-21"},{"lineNumber":162,"author":{"gitId":"Hikoya"},"content":"            if (super.getInput().equals(CommandList.COMMAND_TODO.toString())) {","lastModifiedDate":"2022-08-21"},{"lineNumber":163,"author":{"gitId":"Hikoya"},"content":"                throw new SkylarkException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2022-08-21"},{"lineNumber":164,"author":{"gitId":"Hikoya"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":165,"author":{"gitId":"Hikoya"},"content":"            ToDo toDoTask \u003d new ToDo(super.getInput().substring(5));","lastModifiedDate":"2022-08-21"},{"lineNumber":166,"author":{"gitId":"Hikoya"},"content":"            taskList.add(toDoTask);","lastModifiedDate":"2022-08-21"},{"lineNumber":167,"author":{"gitId":"Hikoya"},"content":"            Printer.printText(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2022-08-21"},{"lineNumber":168,"author":{"gitId":"Hikoya"},"content":"            Printer.printText(toDoTask.toString());","lastModifiedDate":"2022-08-21"},{"lineNumber":169,"author":{"gitId":"Hikoya"},"content":"            Printer.printText(\"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2022-08-21"},{"lineNumber":170,"author":{"gitId":"Hikoya"},"content":"            taskList.saveToFile();","lastModifiedDate":"2022-08-21"},{"lineNumber":171,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":172,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":173,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":174,"author":{"gitId":"Hikoya"},"content":"    private static class DeadlineCommand extends Command {","lastModifiedDate":"2022-08-21"},{"lineNumber":175,"author":{"gitId":"Hikoya"},"content":"        /**","lastModifiedDate":"2022-08-21"},{"lineNumber":176,"author":{"gitId":"Hikoya"},"content":"         * Returns a DeadlineCommand object.","lastModifiedDate":"2022-08-21"},{"lineNumber":177,"author":{"gitId":"Hikoya"},"content":"         *","lastModifiedDate":"2022-08-21"},{"lineNumber":178,"author":{"gitId":"Hikoya"},"content":"         * @param input String that is input by the user.","lastModifiedDate":"2022-08-21"},{"lineNumber":179,"author":{"gitId":"Hikoya"},"content":"         */","lastModifiedDate":"2022-08-21"},{"lineNumber":180,"author":{"gitId":"Hikoya"},"content":"        public DeadlineCommand(String input) {","lastModifiedDate":"2022-08-21"},{"lineNumber":181,"author":{"gitId":"Hikoya"},"content":"            super(input);","lastModifiedDate":"2022-08-21"},{"lineNumber":182,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":183,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":184,"author":{"gitId":"Hikoya"},"content":"        @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":185,"author":{"gitId":"Hikoya"},"content":"        public void run(TaskList taskList) throws SkylarkException {","lastModifiedDate":"2022-08-21"},{"lineNumber":186,"author":{"gitId":"Hikoya"},"content":"            String command \u003d super.getInput();","lastModifiedDate":"2022-08-21"},{"lineNumber":187,"author":{"gitId":"Hikoya"},"content":"            int slashIndex \u003d command.lastIndexOf(\"/\");","lastModifiedDate":"2022-08-21"},{"lineNumber":188,"author":{"gitId":"Hikoya"},"content":"            String desc \u003d command.substring(9, slashIndex - 1);","lastModifiedDate":"2022-08-21"},{"lineNumber":189,"author":{"gitId":"Hikoya"},"content":"            String endDate \u003d command.substring(slashIndex + 4);","lastModifiedDate":"2022-08-21"},{"lineNumber":190,"author":{"gitId":"Hikoya"},"content":"            if (desc.isEmpty() || endDate.isEmpty()) {","lastModifiedDate":"2022-08-21"},{"lineNumber":191,"author":{"gitId":"Hikoya"},"content":"                throw new SkylarkException(\"☹ OOPS!!! \"","lastModifiedDate":"2022-08-21"},{"lineNumber":192,"author":{"gitId":"Hikoya"},"content":"                        + \"The description or end date of a deadline cannot be empty.\");","lastModifiedDate":"2022-08-21"},{"lineNumber":193,"author":{"gitId":"Hikoya"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":194,"author":{"gitId":"Hikoya"},"content":"            Deadline deadlineTask \u003d new Deadline(desc, endDate);","lastModifiedDate":"2022-08-21"},{"lineNumber":195,"author":{"gitId":"Hikoya"},"content":"            taskList.add(deadlineTask);","lastModifiedDate":"2022-08-21"},{"lineNumber":196,"author":{"gitId":"Hikoya"},"content":"            Printer.printText(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2022-08-21"},{"lineNumber":197,"author":{"gitId":"Hikoya"},"content":"            Printer.printText(deadlineTask.toString());","lastModifiedDate":"2022-08-21"},{"lineNumber":198,"author":{"gitId":"Hikoya"},"content":"            Printer.printText(\"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2022-08-21"},{"lineNumber":199,"author":{"gitId":"Hikoya"},"content":"            taskList.saveToFile();","lastModifiedDate":"2022-08-21"},{"lineNumber":200,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":201,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":202,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":203,"author":{"gitId":"Hikoya"},"content":"    private static class EventCommand extends Command {","lastModifiedDate":"2022-08-21"},{"lineNumber":204,"author":{"gitId":"Hikoya"},"content":"        /**","lastModifiedDate":"2022-08-21"},{"lineNumber":205,"author":{"gitId":"Hikoya"},"content":"         * Returns a EventCommand object.","lastModifiedDate":"2022-08-21"},{"lineNumber":206,"author":{"gitId":"Hikoya"},"content":"         *","lastModifiedDate":"2022-08-21"},{"lineNumber":207,"author":{"gitId":"Hikoya"},"content":"         * @param input String that is input by the user.","lastModifiedDate":"2022-08-21"},{"lineNumber":208,"author":{"gitId":"Hikoya"},"content":"         */","lastModifiedDate":"2022-08-21"},{"lineNumber":209,"author":{"gitId":"Hikoya"},"content":"        public EventCommand(String input) {","lastModifiedDate":"2022-08-21"},{"lineNumber":210,"author":{"gitId":"Hikoya"},"content":"            super(input);","lastModifiedDate":"2022-08-21"},{"lineNumber":211,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":212,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":213,"author":{"gitId":"Hikoya"},"content":"        @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":214,"author":{"gitId":"Hikoya"},"content":"        public void run(TaskList taskList) throws SkylarkException {","lastModifiedDate":"2022-08-21"},{"lineNumber":215,"author":{"gitId":"Hikoya"},"content":"            String command \u003d super.getInput();","lastModifiedDate":"2022-08-21"},{"lineNumber":216,"author":{"gitId":"Hikoya"},"content":"            int slashIndex \u003d command.lastIndexOf(\"/\");","lastModifiedDate":"2022-08-21"},{"lineNumber":217,"author":{"gitId":"Hikoya"},"content":"            String desc \u003d command.substring(6, slashIndex - 1);","lastModifiedDate":"2022-08-21"},{"lineNumber":218,"author":{"gitId":"Hikoya"},"content":"            String timing \u003d command.substring(slashIndex + 4);","lastModifiedDate":"2022-08-21"},{"lineNumber":219,"author":{"gitId":"Hikoya"},"content":"            if (desc.isEmpty() || timing.isEmpty()) {","lastModifiedDate":"2022-08-21"},{"lineNumber":220,"author":{"gitId":"Hikoya"},"content":"                throw new SkylarkException(\"☹ OOPS!!! \"","lastModifiedDate":"2022-08-21"},{"lineNumber":221,"author":{"gitId":"Hikoya"},"content":"                        + \"The description or timing of an event cannot be empty.\");","lastModifiedDate":"2022-08-21"},{"lineNumber":222,"author":{"gitId":"Hikoya"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":223,"author":{"gitId":"Hikoya"},"content":"            Event eventTask \u003d new Event(desc, timing);","lastModifiedDate":"2022-08-21"},{"lineNumber":224,"author":{"gitId":"Hikoya"},"content":"            taskList.add(eventTask);","lastModifiedDate":"2022-08-21"},{"lineNumber":225,"author":{"gitId":"Hikoya"},"content":"            Printer.printText(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2022-08-21"},{"lineNumber":226,"author":{"gitId":"Hikoya"},"content":"            Printer.printText(eventTask.toString());","lastModifiedDate":"2022-08-21"},{"lineNumber":227,"author":{"gitId":"Hikoya"},"content":"            Printer.printText(\"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2022-08-21"},{"lineNumber":228,"author":{"gitId":"Hikoya"},"content":"            taskList.saveToFile();","lastModifiedDate":"2022-08-21"},{"lineNumber":229,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":230,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":231,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":232,"author":{"gitId":"Hikoya"},"content":"    private static class DeleteCommand extends Command {","lastModifiedDate":"2022-08-21"},{"lineNumber":233,"author":{"gitId":"Hikoya"},"content":"        /**","lastModifiedDate":"2022-08-21"},{"lineNumber":234,"author":{"gitId":"Hikoya"},"content":"         * Returns a DeleteCommand object.","lastModifiedDate":"2022-08-21"},{"lineNumber":235,"author":{"gitId":"Hikoya"},"content":"         *","lastModifiedDate":"2022-08-21"},{"lineNumber":236,"author":{"gitId":"Hikoya"},"content":"         * @param input String that is input by the user.","lastModifiedDate":"2022-08-21"},{"lineNumber":237,"author":{"gitId":"Hikoya"},"content":"         */","lastModifiedDate":"2022-08-21"},{"lineNumber":238,"author":{"gitId":"Hikoya"},"content":"        public DeleteCommand(String input) {","lastModifiedDate":"2022-08-21"},{"lineNumber":239,"author":{"gitId":"Hikoya"},"content":"            super(input);","lastModifiedDate":"2022-08-21"},{"lineNumber":240,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":241,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":242,"author":{"gitId":"Hikoya"},"content":"        @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":243,"author":{"gitId":"Hikoya"},"content":"        public void run(TaskList taskList) throws SkylarkException {","lastModifiedDate":"2022-08-21"},{"lineNumber":244,"author":{"gitId":"Hikoya"},"content":"            String command \u003d super.getInput();","lastModifiedDate":"2022-08-21"},{"lineNumber":245,"author":{"gitId":"Hikoya"},"content":"            int index \u003d Integer.parseInt(command.substring(7)) - 1;","lastModifiedDate":"2022-08-21"},{"lineNumber":246,"author":{"gitId":"Hikoya"},"content":"            if (taskList.doesIndexExist(index)) {","lastModifiedDate":"2022-08-21"},{"lineNumber":247,"author":{"gitId":"Hikoya"},"content":"                Task currentTask \u003d taskList.get(index);","lastModifiedDate":"2022-08-21"},{"lineNumber":248,"author":{"gitId":"Hikoya"},"content":"                taskList.remove(index);","lastModifiedDate":"2022-08-21"},{"lineNumber":249,"author":{"gitId":"Hikoya"},"content":"                Printer.printText(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2022-08-21"},{"lineNumber":250,"author":{"gitId":"Hikoya"},"content":"                Printer.printText(currentTask.toString());","lastModifiedDate":"2022-08-21"},{"lineNumber":251,"author":{"gitId":"Hikoya"},"content":"                Printer.printText(\"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2022-08-21"},{"lineNumber":252,"author":{"gitId":"Hikoya"},"content":"                taskList.saveToFile();","lastModifiedDate":"2022-08-21"},{"lineNumber":253,"author":{"gitId":"Hikoya"},"content":"            } else {","lastModifiedDate":"2022-08-21"},{"lineNumber":254,"author":{"gitId":"Hikoya"},"content":"                throw new SkylarkException(\"Sorry, index does not exist!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":255,"author":{"gitId":"Hikoya"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":256,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":257,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":258,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":259,"author":{"gitId":"Hikoya"},"content":"    private static class FindCommand extends Command {","lastModifiedDate":"2022-08-21"},{"lineNumber":260,"author":{"gitId":"Hikoya"},"content":"        public FindCommand(String input) {","lastModifiedDate":"2022-08-21"},{"lineNumber":261,"author":{"gitId":"Hikoya"},"content":"            super(input);","lastModifiedDate":"2022-08-21"},{"lineNumber":262,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":263,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":264,"author":{"gitId":"Hikoya"},"content":"        @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":265,"author":{"gitId":"Hikoya"},"content":"        public void run(TaskList taskList) throws SkylarkException {","lastModifiedDate":"2022-08-21"},{"lineNumber":266,"author":{"gitId":"Hikoya"},"content":"            String command \u003d super.getInput();","lastModifiedDate":"2022-08-21"},{"lineNumber":267,"author":{"gitId":"Hikoya"},"content":"            String query \u003d command.substring(5);","lastModifiedDate":"2022-08-21"},{"lineNumber":268,"author":{"gitId":"Hikoya"},"content":"            if (query.isEmpty()) {","lastModifiedDate":"2022-08-21"},{"lineNumber":269,"author":{"gitId":"Hikoya"},"content":"                throw new SkylarkException(\"☹ OOPS!!! \"","lastModifiedDate":"2022-08-21"},{"lineNumber":270,"author":{"gitId":"Hikoya"},"content":"                        + \"The find query cannot be empty.\");","lastModifiedDate":"2022-08-21"},{"lineNumber":271,"author":{"gitId":"Hikoya"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":272,"author":{"gitId":"Hikoya"},"content":"            Printer.printText(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2022-08-21"},{"lineNumber":273,"author":{"gitId":"Hikoya"},"content":"            int count \u003d 1;","lastModifiedDate":"2022-08-21"},{"lineNumber":274,"author":{"gitId":"Hikoya"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2022-08-21"},{"lineNumber":275,"author":{"gitId":"Hikoya"},"content":"                Task currentTask \u003d taskList.get(i);","lastModifiedDate":"2022-08-21"},{"lineNumber":276,"author":{"gitId":"Hikoya"},"content":"                if (currentTask.toString().contains(query)) {","lastModifiedDate":"2022-08-21"},{"lineNumber":277,"author":{"gitId":"Hikoya"},"content":"                    Printer.printText((count) + \". \" + currentTask);","lastModifiedDate":"2022-08-21"},{"lineNumber":278,"author":{"gitId":"Hikoya"},"content":"                    count +\u003d 1;","lastModifiedDate":"2022-08-21"},{"lineNumber":279,"author":{"gitId":"Hikoya"},"content":"                }","lastModifiedDate":"2022-08-21"},{"lineNumber":280,"author":{"gitId":"Hikoya"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":281,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":282,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":283,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":284,"author":{"gitId":"Hikoya"},"content":"    private static class UnknownCommand extends Command {","lastModifiedDate":"2022-08-21"},{"lineNumber":285,"author":{"gitId":"Hikoya"},"content":"        /** Text that is displayed when the user issues an unknown command. */","lastModifiedDate":"2022-08-21"},{"lineNumber":286,"author":{"gitId":"Hikoya"},"content":"        private static final String TEXT \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2022-08-21"},{"lineNumber":287,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":288,"author":{"gitId":"Hikoya"},"content":"        /**","lastModifiedDate":"2022-08-21"},{"lineNumber":289,"author":{"gitId":"Hikoya"},"content":"         * Returns a UnknownCommand object.","lastModifiedDate":"2022-08-21"},{"lineNumber":290,"author":{"gitId":"Hikoya"},"content":"         *","lastModifiedDate":"2022-08-21"},{"lineNumber":291,"author":{"gitId":"Hikoya"},"content":"         * @param input String that is input by the user.","lastModifiedDate":"2022-08-21"},{"lineNumber":292,"author":{"gitId":"Hikoya"},"content":"         */","lastModifiedDate":"2022-08-21"},{"lineNumber":293,"author":{"gitId":"Hikoya"},"content":"        public UnknownCommand(String input) {","lastModifiedDate":"2022-08-21"},{"lineNumber":294,"author":{"gitId":"Hikoya"},"content":"            super(input);","lastModifiedDate":"2022-08-21"},{"lineNumber":295,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":296,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":297,"author":{"gitId":"Hikoya"},"content":"        @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":298,"author":{"gitId":"Hikoya"},"content":"        public void run(TaskList taskList) throws SkylarkException {","lastModifiedDate":"2022-08-21"},{"lineNumber":299,"author":{"gitId":"Hikoya"},"content":"            throw new SkylarkException(TEXT);","lastModifiedDate":"2022-08-21"},{"lineNumber":300,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":301,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":302,"author":{"gitId":"Hikoya"},"content":"}","lastModifiedDate":"2022-08-21"},{"lineNumber":303,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"}],"authorContributionMap":{"Hikoya":303}},{"path":"src/main/java/skylark/CommandList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hikoya"},"content":"package skylark;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Hikoya"},"content":"/** List of commands available for the user. */","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Hikoya"},"content":"enum CommandList {","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"Hikoya"},"content":"    COMMAND_BYE, COMMAND_LIST, COMMAND_DONE,","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"Hikoya"},"content":"    COMMAND_UNDONE, COMMAND_DEADLINE,","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Hikoya"},"content":"    COMMAND_TODO, COMMAND_EVENT, COMMAND_DELETE, COMMAND_FIND;","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"Hikoya"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Hikoya"},"content":"    public String toString() {","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Hikoya"},"content":"        switch (this) {","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Hikoya"},"content":"        case COMMAND_BYE:","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Hikoya"},"content":"            return \"bye\";","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"Hikoya"},"content":"        case COMMAND_LIST:","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"Hikoya"},"content":"            return \"list\";","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"Hikoya"},"content":"        case COMMAND_DONE:","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"Hikoya"},"content":"            return \"mark\";","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"Hikoya"},"content":"        case COMMAND_UNDONE:","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"Hikoya"},"content":"            return \"unmark\";","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"Hikoya"},"content":"        case COMMAND_DEADLINE:","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"Hikoya"},"content":"            return \"deadline\";","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"Hikoya"},"content":"        case COMMAND_TODO:","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"Hikoya"},"content":"            return \"todo\";","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"Hikoya"},"content":"        case COMMAND_EVENT:","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Hikoya"},"content":"            return \"event\";","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Hikoya"},"content":"        case COMMAND_DELETE:","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"Hikoya"},"content":"            return \"delete\";","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"Hikoya"},"content":"        case COMMAND_FIND:","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Hikoya"},"content":"            return \"find\";","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"Hikoya"},"content":"        default:","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Hikoya"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"Hikoya"},"content":"}","lastModifiedDate":"2022-08-21"}],"authorContributionMap":{"Hikoya":34}},{"path":"src/main/java/skylark/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hikoya"},"content":"package skylark;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Hikoya"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Hikoya"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"Hikoya"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":7,"author":{"gitId":"Hikoya"},"content":"/** Represents a Deadline Task. */","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Hikoya"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-08-14"},{"lineNumber":9,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Hikoya"},"content":"     * Symbol that represents a Deadline task.","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Hikoya"},"content":"    private static final char SYMBOL_DEADLINE \u003d \u0027D\u0027;","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":14,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"Hikoya"},"content":"     * Input format required when parsing input from the user.","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"Hikoya"},"content":"    private final String inputFormat \u003d \"yyyy-MM-dd HHmm\"; // 2019-10-15 1800","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"Hikoya"},"content":"     * Date-time object that represents the end date of the task.","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"Hikoya"},"content":"    private final LocalDateTime endDate;","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":24,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Hikoya"},"content":"     * Returns a Deadline object.","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Hikoya"},"content":"     * Throws a SkylarkException if the endDate is not parsable.","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"Hikoya"},"content":"     * @param description Description of the Task","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Hikoya"},"content":"     * @param endDate     Date in yyyy-MM-dd HHmm format","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"Hikoya"},"content":"     * @throws SkylarkException If date is not parsable","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Hikoya"},"content":"    public Deadline(String description, String endDate) throws SkylarkException {","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Hikoya"},"content":"        super(description);","lastModifiedDate":"2022-08-14"},{"lineNumber":34,"author":{"gitId":"Hikoya"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"Hikoya"},"content":"            this.endDate \u003d LocalDateTime.parse(endDate, DateTimeFormatter.ofPattern(inputFormat));","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"Hikoya"},"content":"        } catch (DateTimeParseException dateTimeParseException) {","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"Hikoya"},"content":"            throw new SkylarkException(\"Cannot parse date\");","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":40,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":41,"author":{"gitId":"Hikoya"},"content":"    @Override","lastModifiedDate":"2022-08-14"},{"lineNumber":42,"author":{"gitId":"Hikoya"},"content":"    public String toString() {","lastModifiedDate":"2022-08-14"},{"lineNumber":43,"author":{"gitId":"Hikoya"},"content":"        // Oct 15 2019","lastModifiedDate":"2022-08-21"},{"lineNumber":44,"author":{"gitId":"Hikoya"},"content":"        String outputFormat \u003d \"MMM dd yyyy\";","lastModifiedDate":"2022-08-21"},{"lineNumber":45,"author":{"gitId":"Hikoya"},"content":"        return String.format(\"[%c] %s (by: %s)\",","lastModifiedDate":"2022-08-21"},{"lineNumber":46,"author":{"gitId":"Hikoya"},"content":"                Deadline.SYMBOL_DEADLINE, super.toString(),","lastModifiedDate":"2022-08-21"},{"lineNumber":47,"author":{"gitId":"Hikoya"},"content":"                this.endDate.format(DateTimeFormatter.ofPattern(outputFormat)));","lastModifiedDate":"2022-08-21"},{"lineNumber":48,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":49,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":50,"author":{"gitId":"Hikoya"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":51,"author":{"gitId":"Hikoya"},"content":"    public String toStringFile() {","lastModifiedDate":"2022-08-21"},{"lineNumber":52,"author":{"gitId":"Hikoya"},"content":"        return String.format(\"%c | %d | %s | %s\", Deadline.SYMBOL_DEADLINE,","lastModifiedDate":"2022-08-21"},{"lineNumber":53,"author":{"gitId":"Hikoya"},"content":"                super.getStatusIcon().equals(\"X\") ? 1 : 0, super.getDescription(),","lastModifiedDate":"2022-08-21"},{"lineNumber":54,"author":{"gitId":"Hikoya"},"content":"                this.endDate.format(DateTimeFormatter.ofPattern(inputFormat)));","lastModifiedDate":"2022-08-21"},{"lineNumber":55,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":56,"author":{"gitId":"Hikoya"},"content":"}","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"Hikoya":56}},{"path":"src/main/java/skylark/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hikoya"},"content":"package skylark;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Hikoya"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Hikoya"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"Hikoya"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":7,"author":{"gitId":"Hikoya"},"content":"/** Represents a Deadline Task. */","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Hikoya"},"content":"public class Event extends Task {","lastModifiedDate":"2022-08-14"},{"lineNumber":9,"author":{"gitId":"Hikoya"},"content":"    /** Symbol that represents a Deadline task. */","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Hikoya"},"content":"    private static final char SYMBOL_EVENT \u003d \u0027E\u0027;","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":12,"author":{"gitId":"Hikoya"},"content":"    /** Input format required when parsing input from the user. */","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Hikoya"},"content":"    private final String inputFormat \u003d \"yyyy-MM-dd HHmm\"; // 2019-10-15 1800","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"Hikoya"},"content":"    /** Date-time object that represents the end date of the task. */","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"Hikoya"},"content":"    private final LocalDateTime timing;","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":18,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"Hikoya"},"content":"     * Returns a Event object.","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"Hikoya"},"content":"     * Throws a SkylarkException if the timing is not parsable.","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"Hikoya"},"content":"     * @param description Description of the Task","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"Hikoya"},"content":"     * @param timing Date in yyyy-MM-dd HHmm format","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"Hikoya"},"content":"     * @throws SkylarkException If date is not parsable","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Hikoya"},"content":"    public Event(String description, String timing) throws SkylarkException {","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"Hikoya"},"content":"        super(description);","lastModifiedDate":"2022-08-14"},{"lineNumber":28,"author":{"gitId":"Hikoya"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Hikoya"},"content":"            this.timing \u003d LocalDateTime.parse(timing, DateTimeFormatter.ofPattern(inputFormat));","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"Hikoya"},"content":"        } catch (DateTimeParseException dateTimeParseException) {","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Hikoya"},"content":"            throw new SkylarkException(\"Cannot parse date\");","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":34,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":35,"author":{"gitId":"Hikoya"},"content":"    @Override","lastModifiedDate":"2022-08-14"},{"lineNumber":36,"author":{"gitId":"Hikoya"},"content":"    public String toString() {","lastModifiedDate":"2022-08-14"},{"lineNumber":37,"author":{"gitId":"Hikoya"},"content":"        String outputFormat \u003d \"MMM dd yyyy\"; // Oct 15 2019","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"Hikoya"},"content":"        return String.format(\"[%c] %s (at: %s)\", Event.SYMBOL_EVENT,","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"Hikoya"},"content":"                super.toString(), this.timing.format(DateTimeFormatter.ofPattern(outputFormat)));","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":41,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":42,"author":{"gitId":"Hikoya"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":43,"author":{"gitId":"Hikoya"},"content":"    public String toStringFile() {","lastModifiedDate":"2022-08-21"},{"lineNumber":44,"author":{"gitId":"Hikoya"},"content":"        return String.format(\"%c | %d | %s | %s\", Event.SYMBOL_EVENT,","lastModifiedDate":"2022-08-21"},{"lineNumber":45,"author":{"gitId":"Hikoya"},"content":"                super.getStatusIcon().equals(\"X\") ? 1 : 0,","lastModifiedDate":"2022-08-21"},{"lineNumber":46,"author":{"gitId":"Hikoya"},"content":"                super.getDescription(), this.timing.format(DateTimeFormatter.ofPattern(inputFormat)));","lastModifiedDate":"2022-08-21"},{"lineNumber":47,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":48,"author":{"gitId":"Hikoya"},"content":"}","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"Hikoya":48}},{"path":"src/main/java/skylark/Printer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hikoya"},"content":"package skylark;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Hikoya"},"content":"/** Prints the input text into the System output. */","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Hikoya"},"content":"public class Printer {","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Hikoya"},"content":"     * Prints out the text into the System outputStream.","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"Hikoya"},"content":"     * @param text Text that is to be printed out","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Hikoya"},"content":"    public static void printText(String text) {","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Hikoya"},"content":"        System.out.println(text);","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"Hikoya"},"content":"}","lastModifiedDate":"2022-08-21"}],"authorContributionMap":{"Hikoya":14}},{"path":"src/main/java/skylark/Skylark.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hikoya"},"content":"package skylark;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Hikoya"},"content":"import java.io.File;","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Hikoya"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-14"},{"lineNumber":5,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":6,"author":{"gitId":"Hikoya"},"content":"/** Represents the main entry point of Skylark. */","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Hikoya"},"content":"public class Skylark {","lastModifiedDate":"2022-08-14"},{"lineNumber":8,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":9,"author":{"gitId":"Hikoya"},"content":"    /** Text that is shown to the user when they first access Skylark. */","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Hikoya"},"content":"    private static final String TEXT_HELLO \u003d \"Hello, I am Skylark, how can I help you today?\";","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Hikoya"},"content":"    /** Represents a Scanner object that retrieves user input from the command line. */","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Hikoya"},"content":"    private final Scanner scan;","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"Hikoya"},"content":"    /** Represents the TaskList object that stores the list of Tasks created by the user. */","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"Hikoya"},"content":"    private final TaskList taskList;","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"Hikoya"},"content":"     * Represents a Skylark object. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"Hikoya"},"content":"     * Initialises the scanner to retrieve user input from the command line,","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"Hikoya"},"content":"     * and creates a new TaskList object to read the current list of the tasks stored in a file path","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"Hikoya"},"content":"     * specified. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"Hikoya"},"content":"     * Prints a hello message to the user.","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Hikoya"},"content":"    public Skylark() {","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Hikoya"},"content":"        this.scan \u003d new Scanner(System.in);","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"Hikoya"},"content":"        String filePath \u003d System.getProperty(\"user.dir\")","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"Hikoya"},"content":"                + File.separator + \"data\" + File.separator + \"text.txt\";","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Hikoya"},"content":"        this.taskList \u003d new TaskList(filePath);","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Hikoya"},"content":"        Printer.printText(Skylark.TEXT_HELLO);","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"Hikoya"},"content":"     * Starts Skylark until the user issues the Bye command.","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"Hikoya"},"content":"    public void startRunning() {","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"Hikoya"},"content":"        while (true) {","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"Hikoya"},"content":"            try {","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"Hikoya"},"content":"                boolean isBye \u003d response(scan, taskList);","lastModifiedDate":"2022-08-21"},{"lineNumber":41,"author":{"gitId":"Hikoya"},"content":"                if (isBye) {","lastModifiedDate":"2022-08-21"},{"lineNumber":42,"author":{"gitId":"Hikoya"},"content":"                    break;","lastModifiedDate":"2022-08-21"},{"lineNumber":43,"author":{"gitId":"Hikoya"},"content":"                }","lastModifiedDate":"2022-08-21"},{"lineNumber":44,"author":{"gitId":"Hikoya"},"content":"            } catch (SkylarkException exception) {","lastModifiedDate":"2022-08-21"},{"lineNumber":45,"author":{"gitId":"Hikoya"},"content":"                Printer.printText(exception.toString());","lastModifiedDate":"2022-08-21"},{"lineNumber":46,"author":{"gitId":"Hikoya"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":47,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":48,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":49,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":50,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":51,"author":{"gitId":"Hikoya"},"content":"     * Parses the next line inputted by the user in the command line. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-08-21"},{"lineNumber":52,"author":{"gitId":"Hikoya"},"content":"     * Parses the command input and creates the relevant Command object. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-08-21"},{"lineNumber":53,"author":{"gitId":"Hikoya"},"content":"     * Runs the command by executing the run function of the Command object.","lastModifiedDate":"2022-08-21"},{"lineNumber":54,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":55,"author":{"gitId":"Hikoya"},"content":"     * @param scan Scanner object.","lastModifiedDate":"2022-08-21"},{"lineNumber":56,"author":{"gitId":"Hikoya"},"content":"     * @param taskList TaskList object.","lastModifiedDate":"2022-08-21"},{"lineNumber":57,"author":{"gitId":"Hikoya"},"content":"     * @return Boolean whether the command parsed is equals to the Bye command.","lastModifiedDate":"2022-08-21"},{"lineNumber":58,"author":{"gitId":"Hikoya"},"content":"     * @throws SkylarkException If there is an exception that occurred when running the command.","lastModifiedDate":"2022-08-21"},{"lineNumber":59,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":60,"author":{"gitId":"Hikoya"},"content":"    private boolean response(Scanner scan, TaskList taskList) throws SkylarkException {","lastModifiedDate":"2022-08-21"},{"lineNumber":61,"author":{"gitId":"Hikoya"},"content":"        String input \u003d scan.nextLine();","lastModifiedDate":"2022-08-21"},{"lineNumber":62,"author":{"gitId":"Hikoya"},"content":"        Command command \u003d Command.createCommand(input);","lastModifiedDate":"2022-08-21"},{"lineNumber":63,"author":{"gitId":"Hikoya"},"content":"        command.run(taskList);","lastModifiedDate":"2022-08-21"},{"lineNumber":64,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":65,"author":{"gitId":"Hikoya"},"content":"        return command.getInput().equals(CommandList.COMMAND_BYE.toString());","lastModifiedDate":"2022-08-21"},{"lineNumber":66,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":67,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":68,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":69,"author":{"gitId":"Hikoya"},"content":"     * Represents the main entry point of the Skylark program. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-08-21"},{"lineNumber":70,"author":{"gitId":"Hikoya"},"content":"     * Creates a new Skylark object and calls the startRunning function to create the input loop.","lastModifiedDate":"2022-08-21"},{"lineNumber":71,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":72,"author":{"gitId":"Hikoya"},"content":"     * @param args Command-line parameters that can be passed into Skylark.","lastModifiedDate":"2022-08-21"},{"lineNumber":73,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":74,"author":{"gitId":"Hikoya"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-08-14"},{"lineNumber":75,"author":{"gitId":"Hikoya"},"content":"        Skylark skylark \u003d new Skylark();","lastModifiedDate":"2022-08-21"},{"lineNumber":76,"author":{"gitId":"Hikoya"},"content":"        skylark.startRunning();","lastModifiedDate":"2022-08-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":78,"author":{"gitId":"Hikoya"},"content":"}","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"Hikoya":77,"-":1}},{"path":"src/main/java/skylark/SkylarkException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hikoya"},"content":"package skylark;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Hikoya"},"content":"/** Represents an Exception whenever an error occurs in Skylark. */","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Hikoya"},"content":"public class SkylarkException extends Exception {","lastModifiedDate":"2022-08-14"},{"lineNumber":5,"author":{"gitId":"Hikoya"},"content":"    /** Description of the Exception that occurs. */","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"Hikoya"},"content":"    private final String description;","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":8,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"Hikoya"},"content":"     * Represents a SkylarkException object.","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Hikoya"},"content":"     * @param description Description of the Exception that occurred.","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Hikoya"},"content":"    public SkylarkException(String description) {","lastModifiedDate":"2022-08-14"},{"lineNumber":14,"author":{"gitId":"Hikoya"},"content":"        super(description);","lastModifiedDate":"2022-08-14"},{"lineNumber":15,"author":{"gitId":"Hikoya"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-08-14"},{"lineNumber":16,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":17,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":18,"author":{"gitId":"Hikoya"},"content":"    @Override","lastModifiedDate":"2022-08-14"},{"lineNumber":19,"author":{"gitId":"Hikoya"},"content":"    public String toString() {","lastModifiedDate":"2022-08-14"},{"lineNumber":20,"author":{"gitId":"Hikoya"},"content":"        return this.description;","lastModifiedDate":"2022-08-14"},{"lineNumber":21,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":22,"author":{"gitId":"Hikoya"},"content":"}","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"Hikoya":22}},{"path":"src/main/java/skylark/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hikoya"},"content":"package skylark;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Hikoya"},"content":"import java.io.File;","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Hikoya"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"Hikoya"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"Hikoya"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Hikoya"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Hikoya"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Hikoya"},"content":"/** Represents a Storage object used for file operations such as read and write. */","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Hikoya"},"content":"public class Storage {","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Hikoya"},"content":"    /** File path of the text file used for storage. */","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Hikoya"},"content":"    private final String filePath;","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"Hikoya"},"content":"     * Returns a Storage object.","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"Hikoya"},"content":"     * @param filePath File path of the text file used for storage.","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"Hikoya"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"Hikoya"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Hikoya"},"content":"     * Reads from the text file in the file path specified. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Hikoya"},"content":"     * Creates the relevant Task objects based on the symbols.","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"Hikoya"},"content":"     * @return An ArrayList of Task objects.","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"Hikoya"},"content":"    public ArrayList\u003cTask\u003e readFromFile() {","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Hikoya"},"content":"        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Hikoya"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"Hikoya"},"content":"            File file \u003d new File(this.filePath);","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"Hikoya"},"content":"            if (file.isDirectory()) {","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"Hikoya"},"content":"                throw new SkylarkException(\"This path is a directory!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"Hikoya"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"Hikoya"},"content":"            if (!file.exists()) {","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"Hikoya"},"content":"                try {","lastModifiedDate":"2022-08-21"},{"lineNumber":41,"author":{"gitId":"Hikoya"},"content":"                    // https://stackoverflow.com/questions/9620683/java-fileoutputstream-create-file-if-not-exists","lastModifiedDate":"2022-08-21"},{"lineNumber":42,"author":{"gitId":"Hikoya"},"content":"                    // https://stackoverflow.com/a/4040667","lastModifiedDate":"2022-08-21"},{"lineNumber":43,"author":{"gitId":"Hikoya"},"content":"                    File parent \u003d file.getParentFile();","lastModifiedDate":"2022-08-21"},{"lineNumber":44,"author":{"gitId":"Hikoya"},"content":"                    if (parent !\u003d null \u0026\u0026 !parent.exists() \u0026\u0026 !parent.mkdirs()) {","lastModifiedDate":"2022-08-21"},{"lineNumber":45,"author":{"gitId":"Hikoya"},"content":"                        throw new SkylarkException(\"Error creating directory!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":46,"author":{"gitId":"Hikoya"},"content":"                    }","lastModifiedDate":"2022-08-21"},{"lineNumber":47,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":48,"author":{"gitId":"Hikoya"},"content":"                    if (!file.createNewFile()) {","lastModifiedDate":"2022-08-21"},{"lineNumber":49,"author":{"gitId":"Hikoya"},"content":"                        throw new SkylarkException(\"Error creating new file!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":50,"author":{"gitId":"Hikoya"},"content":"                    }","lastModifiedDate":"2022-08-21"},{"lineNumber":51,"author":{"gitId":"Hikoya"},"content":"                } catch (IOException ioException) {","lastModifiedDate":"2022-08-21"},{"lineNumber":52,"author":{"gitId":"Hikoya"},"content":"                    throw new SkylarkException(\"IOException occurred when creating new file\");","lastModifiedDate":"2022-08-21"},{"lineNumber":53,"author":{"gitId":"Hikoya"},"content":"                }","lastModifiedDate":"2022-08-21"},{"lineNumber":54,"author":{"gitId":"Hikoya"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":55,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":56,"author":{"gitId":"Hikoya"},"content":"            try {","lastModifiedDate":"2022-08-21"},{"lineNumber":57,"author":{"gitId":"Hikoya"},"content":"                Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2022-08-21"},{"lineNumber":58,"author":{"gitId":"Hikoya"},"content":"                while (scanner.hasNextLine()) {","lastModifiedDate":"2022-08-21"},{"lineNumber":59,"author":{"gitId":"Hikoya"},"content":"                    String nextLine \u003d scanner.nextLine();","lastModifiedDate":"2022-08-21"},{"lineNumber":60,"author":{"gitId":"Hikoya"},"content":"                    String[] splitString \u003d nextLine.split(\" \\\\| \", -1);","lastModifiedDate":"2022-08-21"},{"lineNumber":61,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":62,"author":{"gitId":"Hikoya"},"content":"                    if (splitString.length \u003c 3) {","lastModifiedDate":"2022-08-21"},{"lineNumber":63,"author":{"gitId":"Hikoya"},"content":"                        throw new SkylarkException(\"Not enough parameters!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":64,"author":{"gitId":"Hikoya"},"content":"                    }","lastModifiedDate":"2022-08-21"},{"lineNumber":65,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":66,"author":{"gitId":"Hikoya"},"content":"                    Task currentTask;","lastModifiedDate":"2022-08-21"},{"lineNumber":67,"author":{"gitId":"Hikoya"},"content":"                    switch (splitString[0]) {","lastModifiedDate":"2022-08-21"},{"lineNumber":68,"author":{"gitId":"Hikoya"},"content":"                    case \"T\":","lastModifiedDate":"2022-08-21"},{"lineNumber":69,"author":{"gitId":"Hikoya"},"content":"                        currentTask \u003d new ToDo(splitString[2]);","lastModifiedDate":"2022-08-21"},{"lineNumber":70,"author":{"gitId":"Hikoya"},"content":"                        break;","lastModifiedDate":"2022-08-21"},{"lineNumber":71,"author":{"gitId":"Hikoya"},"content":"                    case \"D\": {","lastModifiedDate":"2022-08-21"},{"lineNumber":72,"author":{"gitId":"Hikoya"},"content":"                        String desc \u003d splitString[2];","lastModifiedDate":"2022-08-21"},{"lineNumber":73,"author":{"gitId":"Hikoya"},"content":"                        String endDate \u003d splitString[3];","lastModifiedDate":"2022-08-21"},{"lineNumber":74,"author":{"gitId":"Hikoya"},"content":"                        currentTask \u003d new Deadline(desc, endDate);","lastModifiedDate":"2022-08-21"},{"lineNumber":75,"author":{"gitId":"Hikoya"},"content":"                        break;","lastModifiedDate":"2022-08-21"},{"lineNumber":76,"author":{"gitId":"Hikoya"},"content":"                    }","lastModifiedDate":"2022-08-21"},{"lineNumber":77,"author":{"gitId":"Hikoya"},"content":"                    case \"E\": {","lastModifiedDate":"2022-08-21"},{"lineNumber":78,"author":{"gitId":"Hikoya"},"content":"                        String desc \u003d splitString[2];","lastModifiedDate":"2022-08-21"},{"lineNumber":79,"author":{"gitId":"Hikoya"},"content":"                        String timing \u003d splitString[3];","lastModifiedDate":"2022-08-21"},{"lineNumber":80,"author":{"gitId":"Hikoya"},"content":"                        currentTask \u003d new Event(desc, timing);","lastModifiedDate":"2022-08-21"},{"lineNumber":81,"author":{"gitId":"Hikoya"},"content":"                        break;","lastModifiedDate":"2022-08-21"},{"lineNumber":82,"author":{"gitId":"Hikoya"},"content":"                    }","lastModifiedDate":"2022-08-21"},{"lineNumber":83,"author":{"gitId":"Hikoya"},"content":"                    default:","lastModifiedDate":"2022-08-21"},{"lineNumber":84,"author":{"gitId":"Hikoya"},"content":"                        throw new SkylarkException(\"No suitable task found!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":85,"author":{"gitId":"Hikoya"},"content":"                    }","lastModifiedDate":"2022-08-21"},{"lineNumber":86,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":87,"author":{"gitId":"Hikoya"},"content":"                    boolean isDone \u003d Integer.parseInt(splitString[1]) \u003d\u003d 1;","lastModifiedDate":"2022-08-21"},{"lineNumber":88,"author":{"gitId":"Hikoya"},"content":"                    if (isDone) {","lastModifiedDate":"2022-08-21"},{"lineNumber":89,"author":{"gitId":"Hikoya"},"content":"                        currentTask.markAsDone();","lastModifiedDate":"2022-08-21"},{"lineNumber":90,"author":{"gitId":"Hikoya"},"content":"                    } else {","lastModifiedDate":"2022-08-21"},{"lineNumber":91,"author":{"gitId":"Hikoya"},"content":"                        currentTask.markAsUndone();","lastModifiedDate":"2022-08-21"},{"lineNumber":92,"author":{"gitId":"Hikoya"},"content":"                    }","lastModifiedDate":"2022-08-21"},{"lineNumber":93,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":94,"author":{"gitId":"Hikoya"},"content":"                    taskArrayList.add(currentTask);","lastModifiedDate":"2022-08-21"},{"lineNumber":95,"author":{"gitId":"Hikoya"},"content":"                }","lastModifiedDate":"2022-08-21"},{"lineNumber":96,"author":{"gitId":"Hikoya"},"content":"            } catch (FileNotFoundException fileNotFoundException) {","lastModifiedDate":"2022-08-21"},{"lineNumber":97,"author":{"gitId":"Hikoya"},"content":"                throw new SkylarkException(\"Cannot find file!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":98,"author":{"gitId":"Hikoya"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":99,"author":{"gitId":"Hikoya"},"content":"        } catch (SkylarkException skylarkException) {","lastModifiedDate":"2022-08-21"},{"lineNumber":100,"author":{"gitId":"Hikoya"},"content":"            Printer.printText(skylarkException.toString());","lastModifiedDate":"2022-08-21"},{"lineNumber":101,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":102,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":103,"author":{"gitId":"Hikoya"},"content":"        return taskArrayList;","lastModifiedDate":"2022-08-21"},{"lineNumber":104,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":105,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":106,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":107,"author":{"gitId":"Hikoya"},"content":"     * Saves the current TaskList into the file path specified by the user.","lastModifiedDate":"2022-08-21"},{"lineNumber":108,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":109,"author":{"gitId":"Hikoya"},"content":"     * @param taskArrayList ArrayList of Task objects.","lastModifiedDate":"2022-08-21"},{"lineNumber":110,"author":{"gitId":"Hikoya"},"content":"     * @throws SkylarkException If an exception is thrown while performing file operations.","lastModifiedDate":"2022-08-21"},{"lineNumber":111,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":112,"author":{"gitId":"Hikoya"},"content":"    public void saveToFile(ArrayList\u003cTask\u003e taskArrayList) throws SkylarkException {","lastModifiedDate":"2022-08-21"},{"lineNumber":113,"author":{"gitId":"Hikoya"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":114,"author":{"gitId":"Hikoya"},"content":"            File file \u003d new File(this.filePath);","lastModifiedDate":"2022-08-21"},{"lineNumber":115,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":116,"author":{"gitId":"Hikoya"},"content":"            if (file.exists() \u0026\u0026 !file.canWrite()) {","lastModifiedDate":"2022-08-21"},{"lineNumber":117,"author":{"gitId":"Hikoya"},"content":"                boolean isWritable \u003d file.setWritable(true);","lastModifiedDate":"2022-08-21"},{"lineNumber":118,"author":{"gitId":"Hikoya"},"content":"                if (!isWritable) {","lastModifiedDate":"2022-08-21"},{"lineNumber":119,"author":{"gitId":"Hikoya"},"content":"                    throw new SkylarkException(\"File is not writable!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":120,"author":{"gitId":"Hikoya"},"content":"                }","lastModifiedDate":"2022-08-21"},{"lineNumber":121,"author":{"gitId":"Hikoya"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":122,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":123,"author":{"gitId":"Hikoya"},"content":"            FileWriter fileWriter \u003d new FileWriter(file);","lastModifiedDate":"2022-08-21"},{"lineNumber":124,"author":{"gitId":"Hikoya"},"content":"            for (Task currentTask : taskArrayList) {","lastModifiedDate":"2022-08-21"},{"lineNumber":125,"author":{"gitId":"Hikoya"},"content":"                // Reference: https://www.baeldung.com/java-string-newline","lastModifiedDate":"2022-08-21"},{"lineNumber":126,"author":{"gitId":"Hikoya"},"content":"                fileWriter.write(currentTask.toStringFile() + System.lineSeparator());","lastModifiedDate":"2022-08-21"},{"lineNumber":127,"author":{"gitId":"Hikoya"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":128,"author":{"gitId":"Hikoya"},"content":"            fileWriter.close();","lastModifiedDate":"2022-08-21"},{"lineNumber":129,"author":{"gitId":"Hikoya"},"content":"        } catch (IOException ioException) {","lastModifiedDate":"2022-08-21"},{"lineNumber":130,"author":{"gitId":"Hikoya"},"content":"            throw new SkylarkException(\"IOException occurred when writing to file: \"","lastModifiedDate":"2022-08-21"},{"lineNumber":131,"author":{"gitId":"Hikoya"},"content":"                    + ioException.getMessage());","lastModifiedDate":"2022-08-21"},{"lineNumber":132,"author":{"gitId":"Hikoya"},"content":"        } catch (SecurityException securityException) {","lastModifiedDate":"2022-08-21"},{"lineNumber":133,"author":{"gitId":"Hikoya"},"content":"            throw new SkylarkException(\"SecurityException occurred when writing to file: \"","lastModifiedDate":"2022-08-21"},{"lineNumber":134,"author":{"gitId":"Hikoya"},"content":"                    + securityException.getMessage());","lastModifiedDate":"2022-08-21"},{"lineNumber":135,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":136,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":137,"author":{"gitId":"Hikoya"},"content":"}","lastModifiedDate":"2022-08-21"}],"authorContributionMap":{"Hikoya":137}},{"path":"src/main/java/skylark/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hikoya"},"content":"package skylark;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Hikoya"},"content":"/** Represents a Task that is created by the user. */","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Hikoya"},"content":"public abstract class Task {","lastModifiedDate":"2022-08-18"},{"lineNumber":5,"author":{"gitId":"Hikoya"},"content":"    /** Description of the task inputted by the user. */","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"Hikoya"},"content":"    private final String description;","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Hikoya"},"content":"    /** Represents whether the task is marked as done. */","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"Hikoya"},"content":"    private boolean isDone;","lastModifiedDate":"2022-08-14"},{"lineNumber":10,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":11,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Hikoya"},"content":"     * Returns a Task object.","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Hikoya"},"content":"     * Initialises the description variable and marks the Task as undone.","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"Hikoya"},"content":"     * @param description Description of the task inputted by the user.","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"Hikoya"},"content":"    public Task(String description) {","lastModifiedDate":"2022-08-14"},{"lineNumber":18,"author":{"gitId":"Hikoya"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-08-14"},{"lineNumber":19,"author":{"gitId":"Hikoya"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-14"},{"lineNumber":20,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":21,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":22,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"Hikoya"},"content":"     * Returns a string representation on whether the task is done.","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Hikoya"},"content":"     * @return \"X\" if the task is done, \" \" if the task is undone.","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"Hikoya"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-08-14"},{"lineNumber":28,"author":{"gitId":"Hikoya"},"content":"        return (this.isDone ? \"X\" : \" \");","lastModifiedDate":"2022-08-14"},{"lineNumber":29,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":30,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":31,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Hikoya"},"content":"     * Marks the task as done.","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"Hikoya"},"content":"    public void markAsDone() {","lastModifiedDate":"2022-08-14"},{"lineNumber":35,"author":{"gitId":"Hikoya"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-08-14"},{"lineNumber":36,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":37,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":38,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"Hikoya"},"content":"     * Marks the task as undone.","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":41,"author":{"gitId":"Hikoya"},"content":"    public void markAsUndone() {","lastModifiedDate":"2022-08-14"},{"lineNumber":42,"author":{"gitId":"Hikoya"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-14"},{"lineNumber":43,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":44,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":45,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":46,"author":{"gitId":"Hikoya"},"content":"     * Returns the description of the Task.","lastModifiedDate":"2022-08-21"},{"lineNumber":47,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":48,"author":{"gitId":"Hikoya"},"content":"     * @return Description inputted by the user.","lastModifiedDate":"2022-08-21"},{"lineNumber":49,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":50,"author":{"gitId":"Hikoya"},"content":"    public String getDescription() {","lastModifiedDate":"2022-08-21"},{"lineNumber":51,"author":{"gitId":"Hikoya"},"content":"        return this.description;","lastModifiedDate":"2022-08-21"},{"lineNumber":52,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":53,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":54,"author":{"gitId":"Hikoya"},"content":"    @Override","lastModifiedDate":"2022-08-14"},{"lineNumber":55,"author":{"gitId":"Hikoya"},"content":"    public String toString() {","lastModifiedDate":"2022-08-14"},{"lineNumber":56,"author":{"gitId":"Hikoya"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2022-08-21"},{"lineNumber":57,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":58,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":59,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":60,"author":{"gitId":"Hikoya"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2022-08-21"},{"lineNumber":61,"author":{"gitId":"Hikoya"},"content":"     * This string is used to save the task into the file for storage.","lastModifiedDate":"2022-08-21"},{"lineNumber":62,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":63,"author":{"gitId":"Hikoya"},"content":"     * @return String representation of the task that is parsable by the Storage object.","lastModifiedDate":"2022-08-21"},{"lineNumber":64,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":65,"author":{"gitId":"Hikoya"},"content":"    public abstract String toStringFile();","lastModifiedDate":"2022-08-21"},{"lineNumber":66,"author":{"gitId":"Hikoya"},"content":"}","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"Hikoya":66}},{"path":"src/main/java/skylark/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hikoya"},"content":"package skylark;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Hikoya"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"Hikoya"},"content":"/** Represents a list of Tasks that is stored in the system. */","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"Hikoya"},"content":"public class TaskList {","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Hikoya"},"content":"    /** Data structure that is used to store the Tasks */","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Hikoya"},"content":"    private final ArrayList\u003cTask\u003e taskArrayList;","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Hikoya"},"content":"    /** Represents a Storage object used for file operations */","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Hikoya"},"content":"    private final Storage storage;","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"Hikoya"},"content":"     * Represents a TaskList object. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"Hikoya"},"content":"     * Initialises a new Storage object and call its readFromFile function to store","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"Hikoya"},"content":"     * tasks into the TaskList.","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"Hikoya"},"content":"     * @param filePath File path to the text file that contains the stored tasks.","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"Hikoya"},"content":"    public TaskList(String filePath) {","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"Hikoya"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"Hikoya"},"content":"        this.taskArrayList \u003d this.storage.readFromFile();","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Hikoya"},"content":"     * Returns the size of the TaskList.","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"Hikoya"},"content":"     * The number represents the number of tasks currently stored in the system.","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Hikoya"},"content":"     * @return Size of the TaskList.","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Hikoya"},"content":"    public int size() {","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Hikoya"},"content":"        return this.taskArrayList.size();","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"Hikoya"},"content":"     * Returns the Task object stored at the particular index of the TaskList.","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"Hikoya"},"content":"     * @param index Index of the Task object.","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"Hikoya"},"content":"     * @return Task object that is stored at the index.","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":41,"author":{"gitId":"Hikoya"},"content":"    public Task get(int index) {","lastModifiedDate":"2022-08-21"},{"lineNumber":42,"author":{"gitId":"Hikoya"},"content":"        return this.taskArrayList.get(index);","lastModifiedDate":"2022-08-21"},{"lineNumber":43,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":44,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":45,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":46,"author":{"gitId":"Hikoya"},"content":"     * Adds the Task object into the TaskList.","lastModifiedDate":"2022-08-21"},{"lineNumber":47,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":48,"author":{"gitId":"Hikoya"},"content":"     * @param task Task object that is to be added.","lastModifiedDate":"2022-08-21"},{"lineNumber":49,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":50,"author":{"gitId":"Hikoya"},"content":"    public void add(Task task) {","lastModifiedDate":"2022-08-21"},{"lineNumber":51,"author":{"gitId":"Hikoya"},"content":"        this.taskArrayList.add(task);","lastModifiedDate":"2022-08-21"},{"lineNumber":52,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":53,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":54,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":55,"author":{"gitId":"Hikoya"},"content":"     * Remove the Task object from the TaskList.","lastModifiedDate":"2022-08-21"},{"lineNumber":56,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":57,"author":{"gitId":"Hikoya"},"content":"     * @param index Index of the Task object in the TaskList.","lastModifiedDate":"2022-08-21"},{"lineNumber":58,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":59,"author":{"gitId":"Hikoya"},"content":"    public void remove(int index) {","lastModifiedDate":"2022-08-21"},{"lineNumber":60,"author":{"gitId":"Hikoya"},"content":"        this.taskArrayList.remove(index);","lastModifiedDate":"2022-08-21"},{"lineNumber":61,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":62,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":63,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":64,"author":{"gitId":"Hikoya"},"content":"     * Returns whether the particular index exists in the TaskList.","lastModifiedDate":"2022-08-21"},{"lineNumber":65,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":66,"author":{"gitId":"Hikoya"},"content":"     * @param index Index of the Task object in the TaskList.","lastModifiedDate":"2022-08-21"},{"lineNumber":67,"author":{"gitId":"Hikoya"},"content":"     * @return Boolean whether the index exists in the TaskList.","lastModifiedDate":"2022-08-21"},{"lineNumber":68,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":69,"author":{"gitId":"Hikoya"},"content":"    public boolean doesIndexExist(int index) {","lastModifiedDate":"2022-08-21"},{"lineNumber":70,"author":{"gitId":"Hikoya"},"content":"        return index \u003e\u003d 0 \u0026\u0026 index \u003c this.taskArrayList.size();","lastModifiedDate":"2022-08-21"},{"lineNumber":71,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":72,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":73,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":74,"author":{"gitId":"Hikoya"},"content":"     * Save the current TaskList into the storage file.","lastModifiedDate":"2022-08-21"},{"lineNumber":75,"author":{"gitId":"Hikoya"},"content":"     * Throws a SkylarkException in an event of a file operation exception.","lastModifiedDate":"2022-08-21"},{"lineNumber":76,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":77,"author":{"gitId":"Hikoya"},"content":"     * @throws SkylarkException If file operation fails.","lastModifiedDate":"2022-08-21"},{"lineNumber":78,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":79,"author":{"gitId":"Hikoya"},"content":"    public void saveToFile() throws SkylarkException {","lastModifiedDate":"2022-08-21"},{"lineNumber":80,"author":{"gitId":"Hikoya"},"content":"        this.storage.saveToFile(this.taskArrayList);","lastModifiedDate":"2022-08-21"},{"lineNumber":81,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":82,"author":{"gitId":"Hikoya"},"content":"}","lastModifiedDate":"2022-08-21"}],"authorContributionMap":{"Hikoya":82}},{"path":"src/main/java/skylark/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hikoya"},"content":"package skylark;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Hikoya"},"content":"/** Represents a ToDo Task. */","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Hikoya"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-08-14"},{"lineNumber":5,"author":{"gitId":"Hikoya"},"content":"    /** Symbol that represents a ToDo task. */","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"Hikoya"},"content":"    private static final char SYMBOL_TODO \u003d \u0027T\u0027;","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":8,"author":{"gitId":"Hikoya"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"Hikoya"},"content":"     * Returns a ToDo object.","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Hikoya"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Hikoya"},"content":"     * @param description Description of the Task","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Hikoya"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Hikoya"},"content":"    public ToDo(String description) {","lastModifiedDate":"2022-08-14"},{"lineNumber":14,"author":{"gitId":"Hikoya"},"content":"        super(description);","lastModifiedDate":"2022-08-14"},{"lineNumber":15,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":16,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":17,"author":{"gitId":"Hikoya"},"content":"    @Override","lastModifiedDate":"2022-08-14"},{"lineNumber":18,"author":{"gitId":"Hikoya"},"content":"    public String toString() {","lastModifiedDate":"2022-08-14"},{"lineNumber":19,"author":{"gitId":"Hikoya"},"content":"        return String.format(\"[%c] %s\", ToDo.SYMBOL_TODO, super.toString());","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"Hikoya"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"Hikoya"},"content":"    public String toStringFile() {","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"Hikoya"},"content":"        return String.format(\"%c | %d | %s\", ToDo.SYMBOL_TODO,","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Hikoya"},"content":"                super.getStatusIcon().equals(\"X\") ? 1 : 0, super.getDescription());","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":27,"author":{"gitId":"Hikoya"},"content":"}","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"Hikoya":27}},{"path":"src/test/java/skylark/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hikoya"},"content":"package skylark;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Hikoya"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Hikoya"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"Hikoya"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Hikoya"},"content":"public class DeadlineTest {","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Hikoya"},"content":"    @Test","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Hikoya"},"content":"    public void instantiate_dateTime_exceptionThrown() {","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Hikoya"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Hikoya"},"content":"            new Deadline(\"Make tea\", \"Invalid time\");","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"Hikoya"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"Hikoya"},"content":"        } catch (SkylarkException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"Hikoya"},"content":"            assertEquals(\"Cannot parse date\", e.getMessage());","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"Hikoya"},"content":"    @Test","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"Hikoya"},"content":"    public void toString_dateTime_success() throws SkylarkException {","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"Hikoya"},"content":"        Deadline task \u003d new Deadline(\"Make tea\", \"2019-10-15 1800\");","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"Hikoya"},"content":"        assertEquals(\"[D] [ ] Make tea (by: Oct 15 2019)\", task.toString());","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Hikoya"},"content":"    @Test","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"Hikoya"},"content":"    public void toStringFile_dateTime_success() throws SkylarkException {","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"Hikoya"},"content":"        Deadline task \u003d new Deadline(\"Make tea\", \"2019-10-15 1800\");","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Hikoya"},"content":"        assertEquals(\"D | 0 | Make tea | 2019-10-15 1800\", task.toStringFile());","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"Hikoya"},"content":"        task.markAsDone();","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Hikoya"},"content":"        assertEquals(\"D | 1 | Make tea | 2019-10-15 1800\", task.toStringFile());","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Hikoya"},"content":"}","lastModifiedDate":"2022-08-21"}],"authorContributionMap":{"Hikoya":33}},{"path":"src/test/java/skylark/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hikoya"},"content":"package skylark;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Hikoya"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Hikoya"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"Hikoya"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Hikoya"},"content":"public class EventTest {","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Hikoya"},"content":"    @Test","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Hikoya"},"content":"    public void instantiate_dateTime_exceptionThrown() {","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Hikoya"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Hikoya"},"content":"            new Event(\"Make tea\", \"Invalid time\");","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"Hikoya"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"Hikoya"},"content":"        } catch (SkylarkException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"Hikoya"},"content":"            assertEquals(\"Cannot parse date\", e.getMessage());","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"Hikoya"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"Hikoya"},"content":"    @Test","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"Hikoya"},"content":"    public void toString_dateTime_success() throws SkylarkException {","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"Hikoya"},"content":"        Event task \u003d new Event(\"Make tea\", \"2019-10-15 1800\");","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"Hikoya"},"content":"        assertEquals(\"[E] [ ] Make tea (at: Oct 15 2019)\", task.toString());","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Hikoya"},"content":"    @Test","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"Hikoya"},"content":"    public void toStringFile_dateTime_success() throws SkylarkException {","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"Hikoya"},"content":"        Event task \u003d new Event(\"Make tea\", \"2019-10-15 1800\");","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Hikoya"},"content":"        assertEquals(\"E | 0 | Make tea | 2019-10-15 1800\", task.toStringFile());","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"Hikoya"},"content":"        task.markAsDone();","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Hikoya"},"content":"        assertEquals(\"E | 1 | Make tea | 2019-10-15 1800\", task.toStringFile());","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Hikoya"},"content":"}","lastModifiedDate":"2022-08-21"}],"authorContributionMap":{"Hikoya":33}},{"path":"src/test/java/skylark/PrinterTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hikoya"},"content":"package skylark;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Hikoya"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"Hikoya"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"Hikoya"},"content":"import java.io.PrintStream;","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Hikoya"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"Hikoya"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Hikoya"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Hikoya"},"content":"// Reference: https://www.baeldung.com/java-testing-system-out-println","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Hikoya"},"content":"public class PrinterTest {","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"Hikoya"},"content":"    private final PrintStream standardOut \u003d System.out;","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"Hikoya"},"content":"    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"Hikoya"},"content":"    @BeforeEach","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"Hikoya"},"content":"    public void setUp() {","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"Hikoya"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"Hikoya"},"content":"    @Test","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"Hikoya"},"content":"    public void printText_whenInvokePrintln_success() {","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Hikoya"},"content":"        Printer.printText(\"This is text from Printer Text!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"Hikoya"},"content":"        assertEquals(\"This is text from Printer Text!\", outputStreamCaptor.toString()","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"Hikoya"},"content":"                .trim());","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Hikoya"},"content":"    @AfterEach","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Hikoya"},"content":"    public void tearDown() {","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Hikoya"},"content":"        System.setOut(standardOut);","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"Hikoya"},"content":"}","lastModifiedDate":"2022-08-21"}],"authorContributionMap":{"Hikoya":35}},{"path":"src/test/java/skylark/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hikoya"},"content":"package skylark;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Hikoya"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"Hikoya"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Hikoya"},"content":"public class TodoTest {","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"Hikoya"},"content":"    @Test","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Hikoya"},"content":"    public void toString_description_success() {","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Hikoya"},"content":"        ToDo toDoTask \u003d new ToDo(\"Make tea\");","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Hikoya"},"content":"        assertEquals(\"[T] [ ] Make tea\", toDoTask.toString());","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"Hikoya"},"content":"    @Test","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"Hikoya"},"content":"    public void toStringFile_description_success() {","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"Hikoya"},"content":"        ToDo toDoTask \u003d new ToDo(\"Make tea\");","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"Hikoya"},"content":"        assertEquals(\"T | 0 | Make tea\", toDoTask.toStringFile());","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"Hikoya"},"content":"        toDoTask.markAsDone();","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"Hikoya"},"content":"        assertEquals(\"T | 1 | Make tea\", toDoTask.toStringFile());","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"Hikoya"},"content":"        toDoTask.markAsUndone();","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"Hikoya"},"content":"        assertEquals(\"T | 0 | Make tea\", toDoTask.toStringFile());","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Hikoya"},"content":"    @Test","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Hikoya"},"content":"    public void getStatusIcon_description_success() {","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"Hikoya"},"content":"        ToDo toDoTask \u003d new ToDo(\"Make tea\");","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"Hikoya"},"content":"        assertEquals(\" \", toDoTask.getStatusIcon());","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Hikoya"},"content":"        toDoTask.markAsDone();","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"Hikoya"},"content":"        assertEquals(\"X\", toDoTask.getStatusIcon());","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Hikoya"},"content":"        toDoTask.markAsUndone();","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Hikoya"},"content":"        assertEquals(\" \", toDoTask.getStatusIcon());","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"Hikoya"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"Hikoya"},"content":"    @Test","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"Hikoya"},"content":"    public void getDescription_description_success() {","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"Hikoya"},"content":"        ToDo toDoTask \u003d new ToDo(\"Make tea\");","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"Hikoya"},"content":"        assertEquals(\"Make tea\", toDoTask.getDescription());","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"Hikoya"},"content":"        ToDo toDoTask2 \u003d new ToDo(\"Make coffee\");","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"Hikoya"},"content":"        assertEquals(\"Make coffee\", toDoTask2.getDescription());","lastModifiedDate":"2022-08-21"},{"lineNumber":41,"author":{"gitId":"Hikoya"},"content":"        ToDo toDoTask3 \u003d new ToDo(\"Make cereal\");","lastModifiedDate":"2022-08-21"},{"lineNumber":42,"author":{"gitId":"Hikoya"},"content":"        assertEquals(\"Make cereal\", toDoTask3.getDescription());","lastModifiedDate":"2022-08-21"},{"lineNumber":43,"author":{"gitId":"Hikoya"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":44,"author":{"gitId":"Hikoya"},"content":"}","lastModifiedDate":"2022-08-21"}],"authorContributionMap":{"Hikoya":44}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Hikoya"},"content":"todo borrow book","lastModifiedDate":"2022-08-14"},{"lineNumber":2,"author":{"gitId":"Hikoya"},"content":"deadline return book /by Sunday","lastModifiedDate":"2022-08-14"},{"lineNumber":3,"author":{"gitId":"Hikoya"},"content":"event project meeting /at Mon 2-4","lastModifiedDate":"2022-08-14"},{"lineNumber":4,"author":{"gitId":"Hikoya"},"content":"bye","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"Hikoya":4}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"Hikoya"},"content":"javac  -cp ..\\src\\skylark\\skylark -Xlint:none -d ..\\bin ..\\src\\skylark\\skylark\\*.java","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Hikoya"},"content":"java -classpath ..\\bin Skylark \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-08-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Hikoya":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"Hikoya"},"content":"java -classpath ../bin Skylark \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-08-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Hikoya":1,"-":37}}]
