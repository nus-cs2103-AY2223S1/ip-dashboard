[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"# duke.Duke project template","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-08-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"zsiggg":2,"-":22}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import duke.command.Command;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-16"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":" * A program that keeps track of a task list defined by the user.","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":" * This task list is stored in an output file, and loaded on program start.","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"    private Storage storage;","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"    private Ui ui;","lastModifiedDate":"2022-08-26"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"     * Constructor for Duke that initialises Storage, TaskList and Ui.","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"     * @param fileName name of output file for task list.","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"     * @param directories output file path\u0027s directory names in order.","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"    public Duke(String fileName, String... directories) {","lastModifiedDate":"2022-08-27"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2022-08-26"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"        this.storage \u003d new Storage(ui, fileName, directories);","lastModifiedDate":"2022-08-27"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"        this.taskList \u003d new TaskList();","lastModifiedDate":"2022-08-26"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"        ui.showWelcome();","lastModifiedDate":"2022-08-26"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-28"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"            storage.load(taskList, ui);","lastModifiedDate":"2022-08-26"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-28"},{"lineNumber":31,"author":{"gitId":"zsiggg"},"content":"            ui.showLoadingError();","lastModifiedDate":"2022-08-28"},{"lineNumber":32,"author":{"gitId":"zsiggg"},"content":"            this.taskList \u003d new TaskList();     // if error loading, use an empty task list","lastModifiedDate":"2022-08-28"},{"lineNumber":33,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":34,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":36,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":37,"author":{"gitId":"zsiggg"},"content":"     * Starts parsing user input as commands from System.in, line by line.","lastModifiedDate":"2022-08-29"},{"lineNumber":38,"author":{"gitId":"zsiggg"},"content":"     * Returns when a Command\u0027s isExit field is true.","lastModifiedDate":"2022-08-29"},{"lineNumber":39,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":40,"author":{"gitId":"zsiggg"},"content":"    public void run() {","lastModifiedDate":"2022-08-26"},{"lineNumber":41,"author":{"gitId":"zsiggg"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2022-08-22"},{"lineNumber":42,"author":{"gitId":"zsiggg"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2022-08-27"},{"lineNumber":43,"author":{"gitId":"zsiggg"},"content":"        while (!isExit \u0026\u0026 scanner.hasNext()) {","lastModifiedDate":"2022-08-27"},{"lineNumber":44,"author":{"gitId":"zsiggg"},"content":"            String commandString \u003d scanner.nextLine();","lastModifiedDate":"2022-08-26"},{"lineNumber":45,"author":{"gitId":"zsiggg"},"content":"            Command command;","lastModifiedDate":"2022-08-28"},{"lineNumber":46,"author":{"gitId":"zsiggg"},"content":"            try {","lastModifiedDate":"2022-08-28"},{"lineNumber":47,"author":{"gitId":"zsiggg"},"content":"                command \u003d Parser.parse(commandString, taskList);","lastModifiedDate":"2022-08-28"},{"lineNumber":48,"author":{"gitId":"zsiggg"},"content":"            } catch (IllegalArgumentException e) {","lastModifiedDate":"2022-08-28"},{"lineNumber":49,"author":{"gitId":"zsiggg"},"content":"                ui.println(e.getMessage());","lastModifiedDate":"2022-08-28"},{"lineNumber":50,"author":{"gitId":"zsiggg"},"content":"                continue;","lastModifiedDate":"2022-08-28"},{"lineNumber":51,"author":{"gitId":"zsiggg"},"content":"            }","lastModifiedDate":"2022-08-28"},{"lineNumber":52,"author":{"gitId":"zsiggg"},"content":"            command.execute(this.taskList, this.storage, this.ui);","lastModifiedDate":"2022-08-28"},{"lineNumber":53,"author":{"gitId":"zsiggg"},"content":"            isExit \u003d command.getIsExit();","lastModifiedDate":"2022-08-27"},{"lineNumber":54,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-17"},{"lineNumber":55,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":56,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":57,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":58,"author":{"gitId":"zsiggg"},"content":"     * Initialises and runs Duke.","lastModifiedDate":"2022-08-29"},{"lineNumber":59,"author":{"gitId":"zsiggg"},"content":"     * @param args command line arguments.","lastModifiedDate":"2022-08-29"},{"lineNumber":60,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":61,"author":{"gitId":"zsiggg"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-08-26"},{"lineNumber":62,"author":{"gitId":"zsiggg"},"content":"        new Duke(\"data.txt\", \"data\").run();","lastModifiedDate":"2022-08-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"zsiggg":61,"-":3}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import duke.command.*;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"import java.util.Objects;","lastModifiedDate":"2022-08-25"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":" * Contains methods to parse user input.","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":"public abstract class Parser {","lastModifiedDate":"2022-08-25"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"     * Parses the input string from user and if valid, returns a Command,","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"     * else throws IllegalArgumentException.","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"     * @param commandString input string from user.","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"     * @param taskList TaskList containing current tasks.","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"     * @return Command instance representing the commandString.","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"     * @throws IllegalArgumentException if input string from user is invalid.","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"    public static Command parse(String commandString, TaskList taskList) throws IllegalArgumentException {","lastModifiedDate":"2022-08-25"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"        String[] commandArr \u003d commandString.split(\" \");","lastModifiedDate":"2022-08-25"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"        Command.Commands commandWord \u003d null;","lastModifiedDate":"2022-08-25"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"        Command command \u003d null;","lastModifiedDate":"2022-08-25"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-25"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"            commandWord \u003d Command.Commands.valueOf(commandArr[0]);","lastModifiedDate":"2022-08-25"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2022-08-25"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"            throw new IllegalArgumentException(\"🙁 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\");","lastModifiedDate":"2022-08-25"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"        if (!Objects.isNull(commandWord)) {","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"zsiggg"},"content":"            switch(commandWord) {","lastModifiedDate":"2022-08-25"},{"lineNumber":32,"author":{"gitId":"zsiggg"},"content":"                case mark:","lastModifiedDate":"2022-08-25"},{"lineNumber":33,"author":{"gitId":"zsiggg"},"content":"                    command \u003d UpdateMarkCommand.of(commandString, taskList);","lastModifiedDate":"2022-08-25"},{"lineNumber":34,"author":{"gitId":"zsiggg"},"content":"                    break;","lastModifiedDate":"2022-08-25"},{"lineNumber":35,"author":{"gitId":"zsiggg"},"content":"                case unmark:","lastModifiedDate":"2022-08-25"},{"lineNumber":36,"author":{"gitId":"zsiggg"},"content":"                    command \u003d UpdateUnmarkCommand.of(commandString, taskList);","lastModifiedDate":"2022-08-25"},{"lineNumber":37,"author":{"gitId":"zsiggg"},"content":"                    break;","lastModifiedDate":"2022-08-25"},{"lineNumber":38,"author":{"gitId":"zsiggg"},"content":"                case todo:","lastModifiedDate":"2022-08-25"},{"lineNumber":39,"author":{"gitId":"zsiggg"},"content":"                    command \u003d AddTodoCommand.of(commandString);","lastModifiedDate":"2022-08-25"},{"lineNumber":40,"author":{"gitId":"zsiggg"},"content":"                    break;","lastModifiedDate":"2022-08-25"},{"lineNumber":41,"author":{"gitId":"zsiggg"},"content":"                case deadline:","lastModifiedDate":"2022-08-25"},{"lineNumber":42,"author":{"gitId":"zsiggg"},"content":"                    command \u003d AddDeadlineCommand.of(commandString);","lastModifiedDate":"2022-08-25"},{"lineNumber":43,"author":{"gitId":"zsiggg"},"content":"                    break;","lastModifiedDate":"2022-08-25"},{"lineNumber":44,"author":{"gitId":"zsiggg"},"content":"                case event:","lastModifiedDate":"2022-08-25"},{"lineNumber":45,"author":{"gitId":"zsiggg"},"content":"                    command \u003d AddEventCommand.of(commandString);","lastModifiedDate":"2022-08-25"},{"lineNumber":46,"author":{"gitId":"zsiggg"},"content":"                    break;","lastModifiedDate":"2022-08-25"},{"lineNumber":47,"author":{"gitId":"zsiggg"},"content":"                case delete:","lastModifiedDate":"2022-08-25"},{"lineNumber":48,"author":{"gitId":"zsiggg"},"content":"                    command \u003d DeleteCommand.of(commandString, taskList);","lastModifiedDate":"2022-08-25"},{"lineNumber":49,"author":{"gitId":"zsiggg"},"content":"                    break;","lastModifiedDate":"2022-08-25"},{"lineNumber":50,"author":{"gitId":"zsiggg"},"content":"                case bye:","lastModifiedDate":"2022-08-25"},{"lineNumber":51,"author":{"gitId":"zsiggg"},"content":"                    command \u003d new ByeCommand(commandString);","lastModifiedDate":"2022-08-25"},{"lineNumber":52,"author":{"gitId":"zsiggg"},"content":"                    break;","lastModifiedDate":"2022-08-25"},{"lineNumber":53,"author":{"gitId":"zsiggg"},"content":"                case list:","lastModifiedDate":"2022-08-25"},{"lineNumber":54,"author":{"gitId":"zsiggg"},"content":"                    command \u003d new ListCommand(commandString);","lastModifiedDate":"2022-08-27"},{"lineNumber":55,"author":{"gitId":"zsiggg"},"content":"                    break;","lastModifiedDate":"2022-08-25"},{"lineNumber":56,"author":{"gitId":"zsiggg"},"content":"                case find:","lastModifiedDate":"2022-08-29"},{"lineNumber":57,"author":{"gitId":"zsiggg"},"content":"                    command \u003d FindCommand.of(commandString);","lastModifiedDate":"2022-08-29"},{"lineNumber":58,"author":{"gitId":"zsiggg"},"content":"                    break;","lastModifiedDate":"2022-08-29"},{"lineNumber":59,"author":{"gitId":"zsiggg"},"content":"            }","lastModifiedDate":"2022-08-25"},{"lineNumber":60,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":61,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":62,"author":{"gitId":"zsiggg"},"content":"        return command;","lastModifiedDate":"2022-08-25"},{"lineNumber":63,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":64,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":65,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":66,"author":{"gitId":"zsiggg"},"content":"     * Parses the second word of the input string from user as an integer, and returns -1 of that value","lastModifiedDate":"2022-08-29"},{"lineNumber":67,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":68,"author":{"gitId":"zsiggg"},"content":"     * @param command input string from user.","lastModifiedDate":"2022-08-29"},{"lineNumber":69,"author":{"gitId":"zsiggg"},"content":"     * @return integer representing a 0-based task index from the 1-based task index given.","lastModifiedDate":"2022-08-29"},{"lineNumber":70,"author":{"gitId":"zsiggg"},"content":"     * @throws IllegalArgumentException if second word is not an integer.","lastModifiedDate":"2022-08-29"},{"lineNumber":71,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":72,"author":{"gitId":"zsiggg"},"content":"    public static int getTaskIndex(String command) throws IllegalArgumentException {","lastModifiedDate":"2022-08-29"},{"lineNumber":73,"author":{"gitId":"zsiggg"},"content":"        int i;","lastModifiedDate":"2022-08-25"},{"lineNumber":74,"author":{"gitId":"zsiggg"},"content":"        String[] commandArr \u003d command.split(\" \");","lastModifiedDate":"2022-08-25"},{"lineNumber":75,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-25"},{"lineNumber":76,"author":{"gitId":"zsiggg"},"content":"            i \u003d Integer.parseInt(commandArr[1]);","lastModifiedDate":"2022-08-25"},{"lineNumber":77,"author":{"gitId":"zsiggg"},"content":"        } catch (NumberFormatException e) {     // if second word not integer","lastModifiedDate":"2022-08-25"},{"lineNumber":78,"author":{"gitId":"zsiggg"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2022-08-25"},{"lineNumber":79,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":80,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":81,"author":{"gitId":"zsiggg"},"content":"        return i - 1;","lastModifiedDate":"2022-08-28"},{"lineNumber":82,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":83,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"zsiggg":83}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import duke.command.*;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"import java.io.File;","lastModifiedDate":"2022-08-26"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-08-26"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-08-27"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"import java.util.Objects;","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":" * Interacts with output file that saves the task list.","lastModifiedDate":"2022-08-28"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"public class Storage {","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"    private File file;","lastModifiedDate":"2022-08-28"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"    private Scanner scanner;","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"     * Constructor for Storage.","lastModifiedDate":"2022-08-29"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"     * Creates the output file and its parent directories if not present yet.","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"     * @param ui Ui to print messages for user if IOException occurs.","lastModifiedDate":"2022-08-29"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"     * @param fileName name of output file.","lastModifiedDate":"2022-08-29"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"     * @param directories output file path\u0027s directory names in order.","lastModifiedDate":"2022-08-29"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"    public Storage(Ui ui, String fileName, String... directories) {","lastModifiedDate":"2022-08-27"},{"lineNumber":31,"author":{"gitId":"zsiggg"},"content":"        // platform independent paths","lastModifiedDate":"2022-08-27"},{"lineNumber":32,"author":{"gitId":"zsiggg"},"content":"        String directoriesString \u003d Arrays","lastModifiedDate":"2022-08-27"},{"lineNumber":33,"author":{"gitId":"zsiggg"},"content":"                .stream(directories)","lastModifiedDate":"2022-08-27"},{"lineNumber":34,"author":{"gitId":"zsiggg"},"content":"                .reduce(\"\", (prev, curr) -\u003e prev + curr + File.separator);","lastModifiedDate":"2022-08-27"},{"lineNumber":35,"author":{"gitId":"zsiggg"},"content":"        String pathString \u003d directoriesString + fileName;","lastModifiedDate":"2022-08-27"},{"lineNumber":36,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":37,"author":{"gitId":"zsiggg"},"content":"        // create file and directory if does not exist","lastModifiedDate":"2022-08-26"},{"lineNumber":38,"author":{"gitId":"zsiggg"},"content":"        if (!Files.exists(Paths.get(pathString))) {","lastModifiedDate":"2022-08-27"},{"lineNumber":39,"author":{"gitId":"zsiggg"},"content":"            try {","lastModifiedDate":"2022-08-26"},{"lineNumber":40,"author":{"gitId":"zsiggg"},"content":"                Files.createDirectories(Paths.get(directoriesString));","lastModifiedDate":"2022-08-27"},{"lineNumber":41,"author":{"gitId":"zsiggg"},"content":"            } catch (IOException e) {","lastModifiedDate":"2022-08-26"},{"lineNumber":42,"author":{"gitId":"zsiggg"},"content":"                ui.printWithDivider(\"There was a problem creating the output file directory.\");","lastModifiedDate":"2022-08-26"},{"lineNumber":43,"author":{"gitId":"zsiggg"},"content":"                System.exit(1);","lastModifiedDate":"2022-08-26"},{"lineNumber":44,"author":{"gitId":"zsiggg"},"content":"            }","lastModifiedDate":"2022-08-26"},{"lineNumber":45,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":46,"author":{"gitId":"zsiggg"},"content":"            try {","lastModifiedDate":"2022-08-26"},{"lineNumber":47,"author":{"gitId":"zsiggg"},"content":"                Files.createFile(Paths.get(pathString));","lastModifiedDate":"2022-08-27"},{"lineNumber":48,"author":{"gitId":"zsiggg"},"content":"            } catch (IOException e) {","lastModifiedDate":"2022-08-26"},{"lineNumber":49,"author":{"gitId":"zsiggg"},"content":"                ui.printWithDivider(\"There was a problem creating the output file.\");","lastModifiedDate":"2022-08-26"},{"lineNumber":50,"author":{"gitId":"zsiggg"},"content":"                System.exit(1);","lastModifiedDate":"2022-08-26"},{"lineNumber":51,"author":{"gitId":"zsiggg"},"content":"            }","lastModifiedDate":"2022-08-26"},{"lineNumber":52,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":53,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":54,"author":{"gitId":"zsiggg"},"content":"        // initialise the scanner for the file","lastModifiedDate":"2022-08-26"},{"lineNumber":55,"author":{"gitId":"zsiggg"},"content":"        this.file \u003d new File(pathString);","lastModifiedDate":"2022-08-28"},{"lineNumber":56,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-26"},{"lineNumber":57,"author":{"gitId":"zsiggg"},"content":"            this.scanner \u003d new Scanner(file);","lastModifiedDate":"2022-08-26"},{"lineNumber":58,"author":{"gitId":"zsiggg"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-08-26"},{"lineNumber":59,"author":{"gitId":"zsiggg"},"content":"            ui.printWithDivider(\"There was a problem creating the output file.\");","lastModifiedDate":"2022-08-26"},{"lineNumber":60,"author":{"gitId":"zsiggg"},"content":"            System.exit(1);","lastModifiedDate":"2022-08-26"},{"lineNumber":61,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":62,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":63,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":64,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":65,"author":{"gitId":"zsiggg"},"content":"     * Loads the TaskList by treating the text from output file","lastModifiedDate":"2022-08-29"},{"lineNumber":66,"author":{"gitId":"zsiggg"},"content":"     * as input strings from user to be parsed, and its resulting commands executed.","lastModifiedDate":"2022-08-29"},{"lineNumber":67,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":68,"author":{"gitId":"zsiggg"},"content":"     * @param taskList TaskList with no tasks, to be initialised with previous tasks from output file.","lastModifiedDate":"2022-08-29"},{"lineNumber":69,"author":{"gitId":"zsiggg"},"content":"     * @param ui Ui to print messages to user.","lastModifiedDate":"2022-08-29"},{"lineNumber":70,"author":{"gitId":"zsiggg"},"content":"     * @throws IOException if writing change to output file is unsuccessful while executing a command.","lastModifiedDate":"2022-08-29"},{"lineNumber":71,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":72,"author":{"gitId":"zsiggg"},"content":"    public void load(TaskList taskList, Ui ui) throws IOException {","lastModifiedDate":"2022-08-28"},{"lineNumber":73,"author":{"gitId":"zsiggg"},"content":"        if (!this.scanner.hasNext()) {","lastModifiedDate":"2022-08-26"},{"lineNumber":74,"author":{"gitId":"zsiggg"},"content":"            ui.printWithDivider(\"No previous tasks found, starting with empty task list!\");","lastModifiedDate":"2022-08-26"},{"lineNumber":75,"author":{"gitId":"zsiggg"},"content":"            return;","lastModifiedDate":"2022-08-26"},{"lineNumber":76,"author":{"gitId":"zsiggg"},"content":"        } else {","lastModifiedDate":"2022-08-26"},{"lineNumber":77,"author":{"gitId":"zsiggg"},"content":"            ui.printDivider();","lastModifiedDate":"2022-08-26"},{"lineNumber":78,"author":{"gitId":"zsiggg"},"content":"            ui.println(\"Reading previous tasks...\");","lastModifiedDate":"2022-08-27"},{"lineNumber":79,"author":{"gitId":"zsiggg"},"content":"            while (this.scanner.hasNext()) {","lastModifiedDate":"2022-08-26"},{"lineNumber":80,"author":{"gitId":"zsiggg"},"content":"                String commandString \u003d this.scanner.nextLine();","lastModifiedDate":"2022-08-26"},{"lineNumber":81,"author":{"gitId":"zsiggg"},"content":"                String[] commandArr \u003d commandString.split(\" \");","lastModifiedDate":"2022-08-26"},{"lineNumber":82,"author":{"gitId":"zsiggg"},"content":"                Command.Commands commandWord \u003d null;","lastModifiedDate":"2022-08-26"},{"lineNumber":83,"author":{"gitId":"zsiggg"},"content":"                try {","lastModifiedDate":"2022-08-26"},{"lineNumber":84,"author":{"gitId":"zsiggg"},"content":"                    commandWord \u003d Command.Commands.valueOf(commandArr[0]);","lastModifiedDate":"2022-08-26"},{"lineNumber":85,"author":{"gitId":"zsiggg"},"content":"                } catch (IllegalArgumentException e) {","lastModifiedDate":"2022-08-26"},{"lineNumber":86,"author":{"gitId":"zsiggg"},"content":"                    ui.println(String.format(\"Error reading command in output file: %s\", commandString));","lastModifiedDate":"2022-08-26"},{"lineNumber":87,"author":{"gitId":"zsiggg"},"content":"                    break;  // move to next command if error reading this line","lastModifiedDate":"2022-08-26"},{"lineNumber":88,"author":{"gitId":"zsiggg"},"content":"                }","lastModifiedDate":"2022-08-26"},{"lineNumber":89,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":90,"author":{"gitId":"zsiggg"},"content":"                Command command \u003d null;","lastModifiedDate":"2022-08-26"},{"lineNumber":91,"author":{"gitId":"zsiggg"},"content":"                switch(commandWord) {","lastModifiedDate":"2022-08-26"},{"lineNumber":92,"author":{"gitId":"zsiggg"},"content":"                case todo:","lastModifiedDate":"2022-08-26"},{"lineNumber":93,"author":{"gitId":"zsiggg"},"content":"                    command \u003d AddTodoCommand.of(commandString);","lastModifiedDate":"2022-08-26"},{"lineNumber":94,"author":{"gitId":"zsiggg"},"content":"                    break;","lastModifiedDate":"2022-08-26"},{"lineNumber":95,"author":{"gitId":"zsiggg"},"content":"                case deadline:","lastModifiedDate":"2022-08-26"},{"lineNumber":96,"author":{"gitId":"zsiggg"},"content":"                    command \u003d AddDeadlineCommand.of(commandString);","lastModifiedDate":"2022-08-26"},{"lineNumber":97,"author":{"gitId":"zsiggg"},"content":"                    break;","lastModifiedDate":"2022-08-26"},{"lineNumber":98,"author":{"gitId":"zsiggg"},"content":"                case event:","lastModifiedDate":"2022-08-26"},{"lineNumber":99,"author":{"gitId":"zsiggg"},"content":"                    command \u003d AddEventCommand.of(commandString);","lastModifiedDate":"2022-08-26"},{"lineNumber":100,"author":{"gitId":"zsiggg"},"content":"                    break;","lastModifiedDate":"2022-08-26"},{"lineNumber":101,"author":{"gitId":"zsiggg"},"content":"                default:","lastModifiedDate":"2022-08-26"},{"lineNumber":102,"author":{"gitId":"zsiggg"},"content":"                    ui.println(String.format(","lastModifiedDate":"2022-08-26"},{"lineNumber":103,"author":{"gitId":"zsiggg"},"content":"                            \"Invalid command in output file (should only contain add command): %s\",","lastModifiedDate":"2022-08-26"},{"lineNumber":104,"author":{"gitId":"zsiggg"},"content":"                            commandString));","lastModifiedDate":"2022-08-26"},{"lineNumber":105,"author":{"gitId":"zsiggg"},"content":"                    break;","lastModifiedDate":"2022-08-26"},{"lineNumber":106,"author":{"gitId":"zsiggg"},"content":"                }","lastModifiedDate":"2022-08-26"},{"lineNumber":107,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":108,"author":{"gitId":"zsiggg"},"content":"                if (!Objects.isNull(command)) {","lastModifiedDate":"2022-08-26"},{"lineNumber":109,"author":{"gitId":"zsiggg"},"content":"                    command.execute(taskList, this);","lastModifiedDate":"2022-08-28"},{"lineNumber":110,"author":{"gitId":"zsiggg"},"content":"                }","lastModifiedDate":"2022-08-26"},{"lineNumber":111,"author":{"gitId":"zsiggg"},"content":"            }","lastModifiedDate":"2022-08-26"},{"lineNumber":112,"author":{"gitId":"zsiggg"},"content":"            ui.println(\"Successfully read previous tasks.\");","lastModifiedDate":"2022-08-28"},{"lineNumber":113,"author":{"gitId":"zsiggg"},"content":"            ui.printDivider();","lastModifiedDate":"2022-08-26"},{"lineNumber":114,"author":{"gitId":"zsiggg"},"content":"            ui.println(\"\");","lastModifiedDate":"2022-08-28"},{"lineNumber":115,"author":{"gitId":"zsiggg"},"content":"            new ListCommand(\"list\").execute(taskList, this, ui);","lastModifiedDate":"2022-08-28"},{"lineNumber":116,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":117,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":118,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":119,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":120,"author":{"gitId":"zsiggg"},"content":"     * Writes the given string to the output file.","lastModifiedDate":"2022-08-29"},{"lineNumber":121,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":122,"author":{"gitId":"zsiggg"},"content":"     * @param s string to be written.","lastModifiedDate":"2022-08-29"},{"lineNumber":123,"author":{"gitId":"zsiggg"},"content":"     * @throws IOException if an error occurs while writing to the output file.","lastModifiedDate":"2022-08-29"},{"lineNumber":124,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":125,"author":{"gitId":"zsiggg"},"content":"    public void write(String s) throws IOException {","lastModifiedDate":"2022-08-28"},{"lineNumber":126,"author":{"gitId":"zsiggg"},"content":"        FileWriter fw \u003d new FileWriter(file);","lastModifiedDate":"2022-08-28"},{"lineNumber":127,"author":{"gitId":"zsiggg"},"content":"        fw.write(s);","lastModifiedDate":"2022-08-28"},{"lineNumber":128,"author":{"gitId":"zsiggg"},"content":"        fw.close();","lastModifiedDate":"2022-08-28"},{"lineNumber":129,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":130,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":131,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"zsiggg":131}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import duke.task.Task;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-25"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"import java.util.StringJoiner;","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-08-29"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":"import java.util.stream.IntStream;","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":" * Stores taskList and the list of addCommands to be written into output file.","lastModifiedDate":"2022-08-28"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"public class TaskList {","lastModifiedDate":"2022-08-25"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2022-08-25"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"    private ArrayList\u003cString\u003e addCommands;   // running these commands will always give the tasks array","lastModifiedDate":"2022-08-25"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"     * Constructor for TaskList that initialises an empty task list.","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"    public TaskList() {","lastModifiedDate":"2022-08-26"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-08-26"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"        this.addCommands \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-08-26"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"    private TaskList(ArrayList\u003cTask\u003e tasks, ArrayList\u003cString\u003e addCommands) {","lastModifiedDate":"2022-08-29"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2022-08-29"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"        this.addCommands \u003d addCommands;","lastModifiedDate":"2022-08-29"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":31,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":32,"author":{"gitId":"zsiggg"},"content":"     * Adds a task to the task list, and writes the change to the output file.","lastModifiedDate":"2022-08-29"},{"lineNumber":33,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":34,"author":{"gitId":"zsiggg"},"content":"     * @param task Task to be added.","lastModifiedDate":"2022-08-29"},{"lineNumber":35,"author":{"gitId":"zsiggg"},"content":"     * @param command input string from user, that returns the Task\u0027s AddCommand when passed into Parser.parse().","lastModifiedDate":"2022-08-29"},{"lineNumber":36,"author":{"gitId":"zsiggg"},"content":"     * @param storage Storage to write the changes after adding.","lastModifiedDate":"2022-08-29"},{"lineNumber":37,"author":{"gitId":"zsiggg"},"content":"     * @throws IOException if an error occurs while writing to the output file.","lastModifiedDate":"2022-08-29"},{"lineNumber":38,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":39,"author":{"gitId":"zsiggg"},"content":"    public void add(Task task, String command, Storage storage) throws IOException {","lastModifiedDate":"2022-08-28"},{"lineNumber":40,"author":{"gitId":"zsiggg"},"content":"        this.tasks.add(task);","lastModifiedDate":"2022-08-25"},{"lineNumber":41,"author":{"gitId":"zsiggg"},"content":"        this.addCommands.add(command);","lastModifiedDate":"2022-08-25"},{"lineNumber":42,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":43,"author":{"gitId":"zsiggg"},"content":"        StringJoiner sj \u003d new StringJoiner(\"\\n\", \"\", \"\\n\");","lastModifiedDate":"2022-08-28"},{"lineNumber":44,"author":{"gitId":"zsiggg"},"content":"        this.addCommands.stream().forEach(c -\u003e sj.add(c));","lastModifiedDate":"2022-08-28"},{"lineNumber":45,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-28"},{"lineNumber":46,"author":{"gitId":"zsiggg"},"content":"            storage.write(sj.toString());","lastModifiedDate":"2022-08-28"},{"lineNumber":47,"author":{"gitId":"zsiggg"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-28"},{"lineNumber":48,"author":{"gitId":"zsiggg"},"content":"            this.tasks.remove(task);","lastModifiedDate":"2022-08-28"},{"lineNumber":49,"author":{"gitId":"zsiggg"},"content":"            this.addCommands.remove(command);","lastModifiedDate":"2022-08-28"},{"lineNumber":50,"author":{"gitId":"zsiggg"},"content":"            throw new IOException(\"There was a problem writing the change to the file. duke.task.Task not added.\");","lastModifiedDate":"2022-08-28"},{"lineNumber":51,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":52,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":53,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":54,"author":{"gitId":"zsiggg"},"content":"    public Task get(int i) throws IndexOutOfBoundsException {","lastModifiedDate":"2022-08-25"},{"lineNumber":55,"author":{"gitId":"zsiggg"},"content":"        return this.tasks.get(i);","lastModifiedDate":"2022-08-25"},{"lineNumber":56,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":57,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":58,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":59,"author":{"gitId":"zsiggg"},"content":"     * Returns the length of the task list.","lastModifiedDate":"2022-08-29"},{"lineNumber":60,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":61,"author":{"gitId":"zsiggg"},"content":"    public int size() {","lastModifiedDate":"2022-08-25"},{"lineNumber":62,"author":{"gitId":"zsiggg"},"content":"        return this.tasks.size();","lastModifiedDate":"2022-08-25"},{"lineNumber":63,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":64,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":65,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":66,"author":{"gitId":"zsiggg"},"content":"     * Removes a task from the task list, and writes the change to the output file.","lastModifiedDate":"2022-08-29"},{"lineNumber":67,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":68,"author":{"gitId":"zsiggg"},"content":"     * @param i 0-based index of task to be removed.","lastModifiedDate":"2022-08-29"},{"lineNumber":69,"author":{"gitId":"zsiggg"},"content":"     * @param storage Storage to write the changes after removing.","lastModifiedDate":"2022-08-29"},{"lineNumber":70,"author":{"gitId":"zsiggg"},"content":"     * @throws IOException if an error occurs while writing to the output file.","lastModifiedDate":"2022-08-29"},{"lineNumber":71,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":72,"author":{"gitId":"zsiggg"},"content":"    public void remove(int i, Storage storage) throws IOException {","lastModifiedDate":"2022-08-28"},{"lineNumber":73,"author":{"gitId":"zsiggg"},"content":"        Task task \u003d this.get(i);","lastModifiedDate":"2022-08-28"},{"lineNumber":74,"author":{"gitId":"zsiggg"},"content":"        String commandString \u003d this.addCommands.get(i);","lastModifiedDate":"2022-08-28"},{"lineNumber":75,"author":{"gitId":"zsiggg"},"content":"        this.tasks.remove(i);","lastModifiedDate":"2022-08-25"},{"lineNumber":76,"author":{"gitId":"zsiggg"},"content":"        this.addCommands.remove(i);","lastModifiedDate":"2022-08-25"},{"lineNumber":77,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":78,"author":{"gitId":"zsiggg"},"content":"        StringJoiner sj \u003d new StringJoiner(\"\\n\", \"\", \"\\n\");","lastModifiedDate":"2022-08-28"},{"lineNumber":79,"author":{"gitId":"zsiggg"},"content":"        this.addCommands.stream().forEach(c -\u003e sj.add(c));","lastModifiedDate":"2022-08-28"},{"lineNumber":80,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-28"},{"lineNumber":81,"author":{"gitId":"zsiggg"},"content":"            storage.write(sj.toString());","lastModifiedDate":"2022-08-28"},{"lineNumber":82,"author":{"gitId":"zsiggg"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-28"},{"lineNumber":83,"author":{"gitId":"zsiggg"},"content":"            this.tasks.add(i, task);","lastModifiedDate":"2022-08-28"},{"lineNumber":84,"author":{"gitId":"zsiggg"},"content":"            this.addCommands.add(i, commandString);","lastModifiedDate":"2022-08-28"},{"lineNumber":85,"author":{"gitId":"zsiggg"},"content":"            throw new IOException(\"There was a problem writing the change to the file. duke.task.Task not removed.\");","lastModifiedDate":"2022-08-28"},{"lineNumber":86,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":87,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":88,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":89,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":90,"author":{"gitId":"zsiggg"},"content":"     * Marks a task from the task list, and writes the change to the output file.","lastModifiedDate":"2022-08-29"},{"lineNumber":91,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":92,"author":{"gitId":"zsiggg"},"content":"     * @param i 0-based index of task to be marked.","lastModifiedDate":"2022-08-29"},{"lineNumber":93,"author":{"gitId":"zsiggg"},"content":"     * @param storage Storage to write the changes after marked.","lastModifiedDate":"2022-08-29"},{"lineNumber":94,"author":{"gitId":"zsiggg"},"content":"     * @throws IOException if an error occurs while writing to the output file.","lastModifiedDate":"2022-08-29"},{"lineNumber":95,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":96,"author":{"gitId":"zsiggg"},"content":"    public void mark(int i, Storage storage) throws IOException {","lastModifiedDate":"2022-08-28"},{"lineNumber":97,"author":{"gitId":"zsiggg"},"content":"        this.get(i).mark();","lastModifiedDate":"2022-08-28"},{"lineNumber":98,"author":{"gitId":"zsiggg"},"content":"        String commandString \u003d this.addCommands.get(i);","lastModifiedDate":"2022-08-28"},{"lineNumber":99,"author":{"gitId":"zsiggg"},"content":"        if (!commandString.contains(\"/done\")) {","lastModifiedDate":"2022-08-28"},{"lineNumber":100,"author":{"gitId":"zsiggg"},"content":"            this.addCommands.set(i, commandString + \" /done\");","lastModifiedDate":"2022-08-28"},{"lineNumber":101,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":102,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":103,"author":{"gitId":"zsiggg"},"content":"        StringJoiner sj \u003d new StringJoiner(\"\\n\", \"\", \"\\n\");","lastModifiedDate":"2022-08-28"},{"lineNumber":104,"author":{"gitId":"zsiggg"},"content":"        this.addCommands.stream().forEach(c -\u003e sj.add(c));","lastModifiedDate":"2022-08-28"},{"lineNumber":105,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-28"},{"lineNumber":106,"author":{"gitId":"zsiggg"},"content":"            storage.write(sj.toString());","lastModifiedDate":"2022-08-28"},{"lineNumber":107,"author":{"gitId":"zsiggg"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-28"},{"lineNumber":108,"author":{"gitId":"zsiggg"},"content":"            this.get(i).unmark();","lastModifiedDate":"2022-08-28"},{"lineNumber":109,"author":{"gitId":"zsiggg"},"content":"            this.addCommands.set(i, commandString);","lastModifiedDate":"2022-08-28"},{"lineNumber":110,"author":{"gitId":"zsiggg"},"content":"            throw new IOException(\"There was a problem writing the change to the file. duke.task.Task not marked.\");","lastModifiedDate":"2022-08-28"},{"lineNumber":111,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":112,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":113,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":114,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":115,"author":{"gitId":"zsiggg"},"content":"     * Unmarks a task from the task list, and writes the change to the output file.","lastModifiedDate":"2022-08-29"},{"lineNumber":116,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":117,"author":{"gitId":"zsiggg"},"content":"     * @param i 0-based index of task to be unmarked.","lastModifiedDate":"2022-08-29"},{"lineNumber":118,"author":{"gitId":"zsiggg"},"content":"     * @param storage Storage to write the changes after unmarked.","lastModifiedDate":"2022-08-29"},{"lineNumber":119,"author":{"gitId":"zsiggg"},"content":"     * @throws IOException if an error occurs while writing to the output file.","lastModifiedDate":"2022-08-29"},{"lineNumber":120,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":121,"author":{"gitId":"zsiggg"},"content":"    public void unmark(int i, Storage storage) throws IOException {","lastModifiedDate":"2022-08-28"},{"lineNumber":122,"author":{"gitId":"zsiggg"},"content":"        this.get(i).unmark();","lastModifiedDate":"2022-08-28"},{"lineNumber":123,"author":{"gitId":"zsiggg"},"content":"        String commandString \u003d this.addCommands.get(i);","lastModifiedDate":"2022-08-28"},{"lineNumber":124,"author":{"gitId":"zsiggg"},"content":"        if (commandString.contains(\"/done\")) {","lastModifiedDate":"2022-08-28"},{"lineNumber":125,"author":{"gitId":"zsiggg"},"content":"            this.addCommands.set(i, commandString.replace(\"/done\", \"\"));","lastModifiedDate":"2022-08-28"},{"lineNumber":126,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":127,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":128,"author":{"gitId":"zsiggg"},"content":"        StringJoiner sj \u003d new StringJoiner(\"\\n\", \"\", \"\\n\");","lastModifiedDate":"2022-08-28"},{"lineNumber":129,"author":{"gitId":"zsiggg"},"content":"        this.addCommands.stream().forEach(c -\u003e sj.add(c));","lastModifiedDate":"2022-08-28"},{"lineNumber":130,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-28"},{"lineNumber":131,"author":{"gitId":"zsiggg"},"content":"            storage.write(sj.toString());","lastModifiedDate":"2022-08-28"},{"lineNumber":132,"author":{"gitId":"zsiggg"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-28"},{"lineNumber":133,"author":{"gitId":"zsiggg"},"content":"            this.get(i).mark();","lastModifiedDate":"2022-08-28"},{"lineNumber":134,"author":{"gitId":"zsiggg"},"content":"            this.addCommands.set(i, commandString);","lastModifiedDate":"2022-08-28"},{"lineNumber":135,"author":{"gitId":"zsiggg"},"content":"            throw new IOException(\"There was a problem writing the change to the file. duke.task.Task not unmarked.\");","lastModifiedDate":"2022-08-28"},{"lineNumber":136,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":137,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":138,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":139,"author":{"gitId":"zsiggg"},"content":"    public TaskList search(String keyword) {","lastModifiedDate":"2022-08-29"},{"lineNumber":140,"author":{"gitId":"zsiggg"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-08-29"},{"lineNumber":141,"author":{"gitId":"zsiggg"},"content":"        ArrayList\u003cString\u003e matchingAddCommands \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-08-29"},{"lineNumber":142,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":143,"author":{"gitId":"zsiggg"},"content":"        IntStream.range(0, tasks.size())","lastModifiedDate":"2022-08-29"},{"lineNumber":144,"author":{"gitId":"zsiggg"},"content":"                .filter(i -\u003e tasks.get(i).textContains(keyword))","lastModifiedDate":"2022-08-29"},{"lineNumber":145,"author":{"gitId":"zsiggg"},"content":"                .forEach(i -\u003e {","lastModifiedDate":"2022-08-29"},{"lineNumber":146,"author":{"gitId":"zsiggg"},"content":"                    matchingTasks.add(tasks.get(i));","lastModifiedDate":"2022-08-29"},{"lineNumber":147,"author":{"gitId":"zsiggg"},"content":"                    matchingAddCommands.add(addCommands.get(i));","lastModifiedDate":"2022-08-29"},{"lineNumber":148,"author":{"gitId":"zsiggg"},"content":"                });","lastModifiedDate":"2022-08-29"},{"lineNumber":149,"author":{"gitId":"zsiggg"},"content":"        return new TaskList(matchingTasks, matchingAddCommands);","lastModifiedDate":"2022-08-29"},{"lineNumber":150,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":151,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":152,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-25"},{"lineNumber":153,"author":{"gitId":"zsiggg"},"content":"    public String toString() {","lastModifiedDate":"2022-08-25"},{"lineNumber":154,"author":{"gitId":"zsiggg"},"content":"        return String.join(\"\\n\",","lastModifiedDate":"2022-08-28"},{"lineNumber":155,"author":{"gitId":"zsiggg"},"content":"                IntStream.range(1, this.size() + 1)","lastModifiedDate":"2022-08-28"},{"lineNumber":156,"author":{"gitId":"zsiggg"},"content":"                    .mapToObj(i -\u003e String.format(\"%d. %s\", i, this.get(i - 1).toString()))","lastModifiedDate":"2022-08-28"},{"lineNumber":157,"author":{"gitId":"zsiggg"},"content":"                    .toArray(String[]::new));","lastModifiedDate":"2022-08-28"},{"lineNumber":158,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":159,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"zsiggg":159}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import java.io.PrintStream;","lastModifiedDate":"2022-08-26"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":" * Prints messages for user.","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"public class Ui {","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":"    private final PrintStream OUTPUT \u003d System.out;","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"     * Prints 30 \"-\" that act as a divider.","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"    public void printDivider() {","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"        OUTPUT.println(\"------------------------------\");","lastModifiedDate":"2022-08-26"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"     * Prints a string within two dividers, and a new line after that.","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"     * @param s string to be printed within the dividers.","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"    public void printWithDivider(String s) {","lastModifiedDate":"2022-08-26"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"        this.printDivider();","lastModifiedDate":"2022-08-26"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"        OUTPUT.printf(\"%s\\n\", s);","lastModifiedDate":"2022-08-27"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"        this.printDivider();","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"        OUTPUT.print(\"\\n\");","lastModifiedDate":"2022-08-28"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"     * Prints the string.","lastModifiedDate":"2022-08-29"},{"lineNumber":31,"author":{"gitId":"zsiggg"},"content":"     * @param s string.","lastModifiedDate":"2022-08-29"},{"lineNumber":32,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":33,"author":{"gitId":"zsiggg"},"content":"    public void println(String s) {","lastModifiedDate":"2022-08-26"},{"lineNumber":34,"author":{"gitId":"zsiggg"},"content":"        OUTPUT.println(s);","lastModifiedDate":"2022-08-26"},{"lineNumber":35,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":36,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":37,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":38,"author":{"gitId":"zsiggg"},"content":"     * Prints the welcome message.","lastModifiedDate":"2022-08-29"},{"lineNumber":39,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":40,"author":{"gitId":"zsiggg"},"content":"    public void showWelcome() {","lastModifiedDate":"2022-08-26"},{"lineNumber":41,"author":{"gitId":"zsiggg"},"content":"        this.printWithDivider(\"Hello! I\u0027m duke.Duke\\nWhat can I do for you?\");","lastModifiedDate":"2022-08-28"},{"lineNumber":42,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":43,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":44,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":45,"author":{"gitId":"zsiggg"},"content":"     * Prints the message shown upon an error in loading tasks from output file.","lastModifiedDate":"2022-08-29"},{"lineNumber":46,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":47,"author":{"gitId":"zsiggg"},"content":"    public void showLoadingError() {","lastModifiedDate":"2022-08-28"},{"lineNumber":48,"author":{"gitId":"zsiggg"},"content":"        this.printWithDivider(","lastModifiedDate":"2022-08-28"},{"lineNumber":49,"author":{"gitId":"zsiggg"},"content":"                \"There was a problem loading the tasks from the output file. Starting with empty list.\");","lastModifiedDate":"2022-08-28"},{"lineNumber":50,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":51,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"zsiggg":51}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke.command;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"import duke.task.Task;","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"import duke.TaskList;","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"import duke.Ui;","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":" * A command that adds tasks to the task list.","lastModifiedDate":"2022-08-28"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"public abstract class AddCommand extends Command {","lastModifiedDate":"2022-08-25"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"    protected Task task;","lastModifiedDate":"2022-08-25"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"     * Constructor that takes in the command string and the task to be added.","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"     * @param command input string from user","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"     * @param task task to be added","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"    public AddCommand(String command, Task task) {","lastModifiedDate":"2022-08-25"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"        super(command);","lastModifiedDate":"2022-08-25"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"        this.task \u003d task;","lastModifiedDate":"2022-08-25"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-27"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"    public void execute(TaskList taskList, Storage storage) throws IOException {","lastModifiedDate":"2022-08-28"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"        taskList.add(this.task, super.command, storage);","lastModifiedDate":"2022-08-28"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":31,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":32,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-27"},{"lineNumber":33,"author":{"gitId":"zsiggg"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) {","lastModifiedDate":"2022-08-28"},{"lineNumber":34,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-28"},{"lineNumber":35,"author":{"gitId":"zsiggg"},"content":"            this.execute(taskList, storage);","lastModifiedDate":"2022-08-28"},{"lineNumber":36,"author":{"gitId":"zsiggg"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-28"},{"lineNumber":37,"author":{"gitId":"zsiggg"},"content":"            ui.println(e.getMessage());","lastModifiedDate":"2022-08-28"},{"lineNumber":38,"author":{"gitId":"zsiggg"},"content":"            return;","lastModifiedDate":"2022-08-28"},{"lineNumber":39,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":40,"author":{"gitId":"zsiggg"},"content":"        ui.printWithDivider(String.format(\"Got it. I\u0027ve added this task:\\n  %s\", this.task.toString()));","lastModifiedDate":"2022-08-28"},{"lineNumber":41,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":42,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"zsiggg":42}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke.command;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-25"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-25"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-08-25"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":" * A command that adds a Deadline to the task list.","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"public class AddDeadlineCommand extends AddCommand {","lastModifiedDate":"2022-08-25"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"    private AddDeadlineCommand(String command, Deadline deadline) {","lastModifiedDate":"2022-08-25"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"        super(command, deadline);","lastModifiedDate":"2022-08-25"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"     * Factory method taking in input string from user.","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"     * Throws IllegalArgumentException if the deadline\u0027s description is not given,","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"     * or a time is not given after \"/by\", or the time given is in the incorrect format.","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"     * @param command input string from user, prefixed with \"deadline\".","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"     * @return AddDeadlineCommand instance that adds a deadline to the task list when executed.","lastModifiedDate":"2022-08-29"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"     * @throws IllegalArgumentException if input string from user is invalid.","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"    public static AddDeadlineCommand of(String command) throws IllegalArgumentException {","lastModifiedDate":"2022-08-25"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"        boolean isDone \u003d command.contains(\"/done\");","lastModifiedDate":"2022-08-25"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"        if (isDone) {","lastModifiedDate":"2022-08-25"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"            command \u003d command.replace(\"/done\", \"\");","lastModifiedDate":"2022-08-25"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"zsiggg"},"content":"        String[] c1 \u003d command.split(\"/by\");","lastModifiedDate":"2022-08-25"},{"lineNumber":32,"author":{"gitId":"zsiggg"},"content":"        String text \u003d c1[0].replaceFirst(\"deadline\", \"\").strip();","lastModifiedDate":"2022-08-25"},{"lineNumber":33,"author":{"gitId":"zsiggg"},"content":"        String time \u003d c1.length \u003e 1 ? c1[1].strip() : \"\";","lastModifiedDate":"2022-08-25"},{"lineNumber":34,"author":{"gitId":"zsiggg"},"content":"        if (text.isEmpty()) {","lastModifiedDate":"2022-08-25"},{"lineNumber":35,"author":{"gitId":"zsiggg"},"content":"            throw new IllegalArgumentException(\"🙁 OOPS!!! The description of a deadline cannot be empty.\\n\");","lastModifiedDate":"2022-08-25"},{"lineNumber":36,"author":{"gitId":"zsiggg"},"content":"        } else if (time.isEmpty()) {","lastModifiedDate":"2022-08-25"},{"lineNumber":37,"author":{"gitId":"zsiggg"},"content":"            throw new IllegalArgumentException(\"🙁 OOPS!!! Provide a time for the deadline.\\n\");","lastModifiedDate":"2022-08-25"},{"lineNumber":38,"author":{"gitId":"zsiggg"},"content":"        } else {","lastModifiedDate":"2022-08-25"},{"lineNumber":39,"author":{"gitId":"zsiggg"},"content":"            LocalDateTime timeObj \u003d null;","lastModifiedDate":"2022-08-25"},{"lineNumber":40,"author":{"gitId":"zsiggg"},"content":"            try {","lastModifiedDate":"2022-08-25"},{"lineNumber":41,"author":{"gitId":"zsiggg"},"content":"                timeObj \u003d LocalDateTime.parse(time, DateTimeFormatter.ofPattern(\"dd/MM/yy HHmm\"));","lastModifiedDate":"2022-08-25"},{"lineNumber":42,"author":{"gitId":"zsiggg"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2022-08-25"},{"lineNumber":43,"author":{"gitId":"zsiggg"},"content":"                throw new IllegalArgumentException(\"🙁 OOPS!!! Provide a valid time (dd/MM/yy HHmm) for the deadline.\\n\");","lastModifiedDate":"2022-08-25"},{"lineNumber":44,"author":{"gitId":"zsiggg"},"content":"            }","lastModifiedDate":"2022-08-25"},{"lineNumber":45,"author":{"gitId":"zsiggg"},"content":"            return new AddDeadlineCommand(command, new Deadline(isDone, text, timeObj));","lastModifiedDate":"2022-08-28"},{"lineNumber":46,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":47,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":48,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"zsiggg":48}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke.command;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import duke.task.Event;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-25"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-25"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-08-25"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":" * A command that adds an Event to the task list.","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"public class AddEventCommand extends AddCommand {","lastModifiedDate":"2022-08-25"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"    private AddEventCommand(String command, Event event) {","lastModifiedDate":"2022-08-25"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"        super(command, event);","lastModifiedDate":"2022-08-25"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"     * Factory method taking in input string from user.","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"     * Throws IllegalArgumentException if the event\u0027s description is not given,","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"     * or a time is not given after \"/at\", or the time given is in the incorrect format.","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"     * @param command input string from user, prefixed with \"event\".","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"     * @return AddEventCommand instance that adds an event to the task list when executed.","lastModifiedDate":"2022-08-29"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"     * @throws IllegalArgumentException if input string from user is invalid.","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"    public static AddEventCommand of(String command) throws IllegalArgumentException {","lastModifiedDate":"2022-08-25"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"        boolean isDone \u003d command.contains(\"/done\");","lastModifiedDate":"2022-08-25"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"        if (isDone) {","lastModifiedDate":"2022-08-25"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"            command \u003d command.replace(\"/done\", \"\");","lastModifiedDate":"2022-08-25"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"zsiggg"},"content":"        String[] c2 \u003d command.split(\"/at\");","lastModifiedDate":"2022-08-25"},{"lineNumber":32,"author":{"gitId":"zsiggg"},"content":"        String text \u003d c2[0].replaceFirst(\"event\", \"\").strip();","lastModifiedDate":"2022-08-25"},{"lineNumber":33,"author":{"gitId":"zsiggg"},"content":"        String time \u003d c2.length \u003e 1 ? c2[1].strip() : \"\";","lastModifiedDate":"2022-08-25"},{"lineNumber":34,"author":{"gitId":"zsiggg"},"content":"        if (text.isEmpty()) {","lastModifiedDate":"2022-08-25"},{"lineNumber":35,"author":{"gitId":"zsiggg"},"content":"            throw new IllegalArgumentException(\"🙁 OOPS!!! The description of an event cannot be empty.\\n\");","lastModifiedDate":"2022-08-25"},{"lineNumber":36,"author":{"gitId":"zsiggg"},"content":"        } else if (time.isEmpty()) {","lastModifiedDate":"2022-08-25"},{"lineNumber":37,"author":{"gitId":"zsiggg"},"content":"            throw new IllegalArgumentException(\"🙁 OOPS!!! Provide a time for the event.\\n\");","lastModifiedDate":"2022-08-25"},{"lineNumber":38,"author":{"gitId":"zsiggg"},"content":"        } else {","lastModifiedDate":"2022-08-25"},{"lineNumber":39,"author":{"gitId":"zsiggg"},"content":"            LocalDateTime timeObj \u003d null;","lastModifiedDate":"2022-08-25"},{"lineNumber":40,"author":{"gitId":"zsiggg"},"content":"            try {","lastModifiedDate":"2022-08-25"},{"lineNumber":41,"author":{"gitId":"zsiggg"},"content":"                timeObj \u003d LocalDateTime.parse(time, DateTimeFormatter.ofPattern(\"dd/MM/yy HHmm\"));","lastModifiedDate":"2022-08-25"},{"lineNumber":42,"author":{"gitId":"zsiggg"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2022-08-25"},{"lineNumber":43,"author":{"gitId":"zsiggg"},"content":"                throw new IllegalArgumentException(\"🙁 OOPS!!! Provide a valid time (dd/MM/yy HHmm) for the event.\\n\");","lastModifiedDate":"2022-08-25"},{"lineNumber":44,"author":{"gitId":"zsiggg"},"content":"            }","lastModifiedDate":"2022-08-25"},{"lineNumber":45,"author":{"gitId":"zsiggg"},"content":"            return new AddEventCommand(command, new Event(isDone, text, timeObj));","lastModifiedDate":"2022-08-28"},{"lineNumber":46,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":47,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":48,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"zsiggg":48}},{"path":"src/main/java/duke/command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke.command;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":" * A command that adds a Todo to the task list.","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"public class AddTodoCommand extends AddCommand {","lastModifiedDate":"2022-08-25"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":"    private AddTodoCommand(String command, Todo todo) {","lastModifiedDate":"2022-08-25"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":"        super(command, todo);","lastModifiedDate":"2022-08-25"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"     * Factory method taking in input string from user.","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"     * Throws IllegalArgumentException if the todo\u0027s description is not given.","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"     * @param command input string from user, prefixed with \"todo\".","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"     * @return AddTodoCommand instance that adds a todo to the task list when executed.","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"     * @throws IllegalArgumentException if input string from user is invalid.","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"    public static AddTodoCommand of(String command) throws IllegalArgumentException {","lastModifiedDate":"2022-08-25"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"        boolean isDone \u003d command.contains(\"/done\");","lastModifiedDate":"2022-08-25"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"        if (isDone) {","lastModifiedDate":"2022-08-25"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"            command \u003d command.replace(\"/done\", \"\");","lastModifiedDate":"2022-08-25"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"        String text \u003d command.replaceFirst(\"todo\", \"\").strip();","lastModifiedDate":"2022-08-25"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"        if (text.isEmpty()) {","lastModifiedDate":"2022-08-25"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"            throw new IllegalArgumentException(\"🙁 OOPS!!! The description of a todo cannot be empty.\\n\");","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"zsiggg"},"content":"        } else {","lastModifiedDate":"2022-08-25"},{"lineNumber":32,"author":{"gitId":"zsiggg"},"content":"            return new AddTodoCommand(command, new Todo(isDone, text));","lastModifiedDate":"2022-08-28"},{"lineNumber":33,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":34,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":35,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"zsiggg":35}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke.command;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"import duke.TaskList;","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"import duke.Ui;","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":" * A command that exits the program.","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2022-08-25"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"     * Constructor for ByeCommand.","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"     * @param command \"bye\".","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"    public ByeCommand(String command) {","lastModifiedDate":"2022-08-25"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"        super(command);","lastModifiedDate":"2022-08-25"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-25"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"    public void execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2022-08-28"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"        super.isExit \u003d true;","lastModifiedDate":"2022-08-27"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-27"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) {","lastModifiedDate":"2022-08-28"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"        this.execute(taskList, storage);","lastModifiedDate":"2022-08-28"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"        ui.printWithDivider(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2022-08-27"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"zsiggg":30}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke.command;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"import duke.TaskList;","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"import duke.Ui;","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":" * A command encapsulates the required actions of a valid command made by the user.","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":" * This action can then be executed with execute().","lastModifiedDate":"2022-08-28"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"public abstract class Command {","lastModifiedDate":"2022-08-25"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"     * All possible command words that user can use.","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"    public enum Commands {","lastModifiedDate":"2022-08-25"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"        mark, unmark, todo, deadline, event, delete, bye, list, find","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"    protected String command;","lastModifiedDate":"2022-08-25"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"    protected boolean isExit \u003d false;","lastModifiedDate":"2022-08-27"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"     * Constructor for Command.","lastModifiedDate":"2022-08-29"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"     * @param command input string from user.","lastModifiedDate":"2022-08-29"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"    public Command(String command) {","lastModifiedDate":"2022-08-25"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"        this.command \u003d command;","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":32,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":33,"author":{"gitId":"zsiggg"},"content":"    public boolean getIsExit() {","lastModifiedDate":"2022-08-27"},{"lineNumber":34,"author":{"gitId":"zsiggg"},"content":"        return isExit;","lastModifiedDate":"2022-08-27"},{"lineNumber":35,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":36,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":37,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":38,"author":{"gitId":"zsiggg"},"content":"     * Executes the actions associated with the Command.","lastModifiedDate":"2022-08-29"},{"lineNumber":39,"author":{"gitId":"zsiggg"},"content":"     * IOException will not be thrown, but instead have its message printed.","lastModifiedDate":"2022-08-29"},{"lineNumber":40,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":41,"author":{"gitId":"zsiggg"},"content":"     * @param taskList TaskList containing current tasks.","lastModifiedDate":"2022-08-29"},{"lineNumber":42,"author":{"gitId":"zsiggg"},"content":"     * @param storage Storage initialised with output file path.","lastModifiedDate":"2022-08-29"},{"lineNumber":43,"author":{"gitId":"zsiggg"},"content":"     * @param ui Ui to print messages for user.","lastModifiedDate":"2022-08-29"},{"lineNumber":44,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":45,"author":{"gitId":"zsiggg"},"content":"    public abstract void execute(TaskList taskList, Storage storage, Ui ui);","lastModifiedDate":"2022-08-28"},{"lineNumber":46,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":47,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":48,"author":{"gitId":"zsiggg"},"content":"     * Executes the actions associated with the Command, without printing messages for user.","lastModifiedDate":"2022-08-29"},{"lineNumber":49,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":50,"author":{"gitId":"zsiggg"},"content":"     * @param taskList TaskList containing current tasks.","lastModifiedDate":"2022-08-29"},{"lineNumber":51,"author":{"gitId":"zsiggg"},"content":"     * @param storage Storage initialised with output file path.","lastModifiedDate":"2022-08-29"},{"lineNumber":52,"author":{"gitId":"zsiggg"},"content":"     * @throws IOException if writing change to output file is unsuccessful.","lastModifiedDate":"2022-08-29"},{"lineNumber":53,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":54,"author":{"gitId":"zsiggg"},"content":"    public abstract void execute(TaskList taskList, Storage storage) throws IOException;","lastModifiedDate":"2022-08-28"},{"lineNumber":55,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"zsiggg":55}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke.command;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import duke.*;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"import duke.task.Task;","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":" * A command that deletes a task from the task list.","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2022-08-25"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"    private Task task;","lastModifiedDate":"2022-08-27"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"    private int taskIndex;","lastModifiedDate":"2022-08-25"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-08-25"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"    private DeleteCommand(String command, Task task, int taskIndex, TaskList taskList) {","lastModifiedDate":"2022-08-27"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"        super(command);","lastModifiedDate":"2022-08-25"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"        this.task \u003d task;","lastModifiedDate":"2022-08-27"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2022-08-25"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2022-08-25"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"     * Factory method taking in input string from user and a TaskList.","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"     * Throws IllegalArgumentException if the index for the task to be deleted is not given,","lastModifiedDate":"2022-08-29"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"     * or if the index is out of bounds of the task list.","lastModifiedDate":"2022-08-29"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"     * @param command \"delete k\", where k is the 1-based index of the task to be deleted in the task list.","lastModifiedDate":"2022-08-29"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"     * @param taskList TaskList containing the current tasks.","lastModifiedDate":"2022-08-29"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"     * @return DeleteCommand instance that deletes a task from the task list when executed.","lastModifiedDate":"2022-08-29"},{"lineNumber":31,"author":{"gitId":"zsiggg"},"content":"     * @throws IllegalArgumentException if input string from user is invalid.","lastModifiedDate":"2022-08-29"},{"lineNumber":32,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":33,"author":{"gitId":"zsiggg"},"content":"    public static DeleteCommand of(String command, TaskList taskList) throws IllegalArgumentException {","lastModifiedDate":"2022-08-25"},{"lineNumber":34,"author":{"gitId":"zsiggg"},"content":"        int taskIndex;","lastModifiedDate":"2022-08-25"},{"lineNumber":35,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-25"},{"lineNumber":36,"author":{"gitId":"zsiggg"},"content":"            taskIndex \u003d Parser.getTaskIndex(command);","lastModifiedDate":"2022-08-29"},{"lineNumber":37,"author":{"gitId":"zsiggg"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2022-08-25"},{"lineNumber":38,"author":{"gitId":"zsiggg"},"content":"            throw new IllegalArgumentException(\"🙁 OOPS!!! Provide a number to delete a task.\\n\");","lastModifiedDate":"2022-08-25"},{"lineNumber":39,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":40,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":41,"author":{"gitId":"zsiggg"},"content":"        Task task;","lastModifiedDate":"2022-08-27"},{"lineNumber":42,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-25"},{"lineNumber":43,"author":{"gitId":"zsiggg"},"content":"            task \u003d taskList.get(taskIndex);","lastModifiedDate":"2022-08-27"},{"lineNumber":44,"author":{"gitId":"zsiggg"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-08-25"},{"lineNumber":45,"author":{"gitId":"zsiggg"},"content":"            throw new IllegalArgumentException(","lastModifiedDate":"2022-08-25"},{"lineNumber":46,"author":{"gitId":"zsiggg"},"content":"                    String.format(","lastModifiedDate":"2022-08-25"},{"lineNumber":47,"author":{"gitId":"zsiggg"},"content":"                            \"🙁 OOPS!!! Provide a valid number (from 1 to %d) to delete a task.\\n\", taskList.size())","lastModifiedDate":"2022-08-25"},{"lineNumber":48,"author":{"gitId":"zsiggg"},"content":"            );","lastModifiedDate":"2022-08-25"},{"lineNumber":49,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":50,"author":{"gitId":"zsiggg"},"content":"        return new DeleteCommand(command, task, taskIndex, taskList);","lastModifiedDate":"2022-08-27"},{"lineNumber":51,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":52,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":53,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-25"},{"lineNumber":54,"author":{"gitId":"zsiggg"},"content":"    public void execute(TaskList tasklist, Storage storage) throws IOException {","lastModifiedDate":"2022-08-28"},{"lineNumber":55,"author":{"gitId":"zsiggg"},"content":"        this.taskList.remove(taskIndex, storage);","lastModifiedDate":"2022-08-28"},{"lineNumber":56,"author":{"gitId":"zsiggg"},"content":"    };","lastModifiedDate":"2022-08-25"},{"lineNumber":57,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":58,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-27"},{"lineNumber":59,"author":{"gitId":"zsiggg"},"content":"    public void execute(TaskList tasklist, Storage storage, Ui ui) {","lastModifiedDate":"2022-08-28"},{"lineNumber":60,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-28"},{"lineNumber":61,"author":{"gitId":"zsiggg"},"content":"            this.execute(tasklist, storage);","lastModifiedDate":"2022-08-28"},{"lineNumber":62,"author":{"gitId":"zsiggg"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-28"},{"lineNumber":63,"author":{"gitId":"zsiggg"},"content":"            ui.println(e.getMessage());","lastModifiedDate":"2022-08-28"},{"lineNumber":64,"author":{"gitId":"zsiggg"},"content":"            return;","lastModifiedDate":"2022-08-28"},{"lineNumber":65,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":66,"author":{"gitId":"zsiggg"},"content":"        ui.printWithDivider(String.format(\"Noted. I\u0027ve removed this task:\\n  %s\", this.task.toString()));","lastModifiedDate":"2022-08-27"},{"lineNumber":67,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":68,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"zsiggg":68}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke.command;","lastModifiedDate":"2022-08-29"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-29"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"import duke.TaskList;","lastModifiedDate":"2022-08-29"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"import duke.Ui;","lastModifiedDate":"2022-08-29"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"/**","lastModifiedDate":"2022-08-29"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":" * A Command that finds the tasks in the task list with a description that matches a given keyword.","lastModifiedDate":"2022-08-29"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":" */","lastModifiedDate":"2022-08-29"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2022-08-29"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"    private String keyword;","lastModifiedDate":"2022-08-29"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"    private FindCommand(String command, String keyword) {","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"        super(command);","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"     * Factory method taking in input string from user.","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"     * Keyword is taken as the string after \"find\" with leading and trailing whitespace trimmed.","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"     * Throws IllegalArgument Exception if no keyword is given.","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"     * @param command input string from user.","lastModifiedDate":"2022-08-29"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"     * @return FindCommand instance that finds matching tasks from the task list when executed.","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"     * @throws IllegalArgumentException if input string from user is invalid.","lastModifiedDate":"2022-08-29"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"    public static FindCommand of(String command) throws IllegalArgumentException {","lastModifiedDate":"2022-08-29"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"        String keyword \u003d command.replace(\"find\", \"\").trim();","lastModifiedDate":"2022-08-29"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"        if (keyword.isEmpty()) {","lastModifiedDate":"2022-08-29"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"            throw new IllegalArgumentException(\"🙁 OOPS!!! Provide a keyword to find tasks.\\n\");","lastModifiedDate":"2022-08-29"},{"lineNumber":31,"author":{"gitId":"zsiggg"},"content":"        } else {","lastModifiedDate":"2022-08-29"},{"lineNumber":32,"author":{"gitId":"zsiggg"},"content":"            return new FindCommand(command, keyword);","lastModifiedDate":"2022-08-29"},{"lineNumber":33,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-29"},{"lineNumber":34,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":35,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":36,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-29"},{"lineNumber":37,"author":{"gitId":"zsiggg"},"content":"    public void execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2022-08-29"},{"lineNumber":38,"author":{"gitId":"zsiggg"},"content":"        return;","lastModifiedDate":"2022-08-29"},{"lineNumber":39,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":40,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":41,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-29"},{"lineNumber":42,"author":{"gitId":"zsiggg"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) {","lastModifiedDate":"2022-08-29"},{"lineNumber":43,"author":{"gitId":"zsiggg"},"content":"        TaskList matchingTasks \u003d taskList.search(this.keyword);","lastModifiedDate":"2022-08-29"},{"lineNumber":44,"author":{"gitId":"zsiggg"},"content":"        String s \u003d matchingTasks.toString();","lastModifiedDate":"2022-08-29"},{"lineNumber":45,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":46,"author":{"gitId":"zsiggg"},"content":"        if (s.isEmpty()) {","lastModifiedDate":"2022-08-29"},{"lineNumber":47,"author":{"gitId":"zsiggg"},"content":"            ui.println(\"🙁 OOPS!!! There are no matching tasks in your list.\");","lastModifiedDate":"2022-08-29"},{"lineNumber":48,"author":{"gitId":"zsiggg"},"content":"        } else {","lastModifiedDate":"2022-08-29"},{"lineNumber":49,"author":{"gitId":"zsiggg"},"content":"            ui.printWithDivider(String.format(\"Here are the matching tasks in your list:\\n%s\", s));","lastModifiedDate":"2022-08-29"},{"lineNumber":50,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-29"},{"lineNumber":51,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":52,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-29"}],"authorContributionMap":{"zsiggg":52}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke.command;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"import duke.TaskList;","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"import duke.Ui;","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"import duke.command.Command;","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":" * A command that reads and prints all of the tasks in the task list.","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2022-08-25"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"     * Constructor for ListCommand.","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"     * @param command \"list\".","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"    public ListCommand(String command) {","lastModifiedDate":"2022-08-27"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"        super(command);","lastModifiedDate":"2022-08-25"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-27"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"    public void execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2022-08-28"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"        return;","lastModifiedDate":"2022-08-27"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-27"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) {","lastModifiedDate":"2022-08-28"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"        String s \u003d taskList.toString();","lastModifiedDate":"2022-08-27"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"        if (s.isEmpty()) {","lastModifiedDate":"2022-08-25"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"            ui.println(\"🙁 OOPS!!! There are no tasks in your list yet.\");","lastModifiedDate":"2022-08-27"},{"lineNumber":31,"author":{"gitId":"zsiggg"},"content":"        } else {","lastModifiedDate":"2022-08-25"},{"lineNumber":32,"author":{"gitId":"zsiggg"},"content":"            ui.printWithDivider(String.format(\"Here are the tasks in your list:\\n%s\", s));","lastModifiedDate":"2022-08-27"},{"lineNumber":33,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":34,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":35,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"zsiggg":35}},{"path":"src/main/java/duke/command/UpdateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke.command;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import duke.task.Task;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":" * A command that updates a task in the task list.","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"public abstract class UpdateCommand extends Command {","lastModifiedDate":"2022-08-25"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":"    protected Task task;","lastModifiedDate":"2022-08-25"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":"    protected int taskIndex;","lastModifiedDate":"2022-08-29"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"     * Constructor for UpdateCommand.","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"     * @param command input string from user.","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"     * @param task Task to be updated.","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"     * @param taskIndex 0-based index of task to be updated in task list.","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"    public UpdateCommand(String command, Task task, int taskIndex) {","lastModifiedDate":"2022-08-28"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"        super(command);","lastModifiedDate":"2022-08-25"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"        this.task \u003d task;","lastModifiedDate":"2022-08-25"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2022-08-28"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"zsiggg":24}},{"path":"src/main/java/duke/command/UpdateMarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke.command;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import duke.*;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"import duke.task.Task;","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":" * A command that marks a task in the task list.","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"public class UpdateMarkCommand extends UpdateCommand {","lastModifiedDate":"2022-08-25"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"    private UpdateMarkCommand(String command, Task task, int taskIndex) {","lastModifiedDate":"2022-08-28"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"        super(command, task, taskIndex);","lastModifiedDate":"2022-08-28"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"     * Factory method taking in input string from user and a TaskList.","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"     * Throws IllegalArgumentException if the index for the task to be marked is not given,","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"     * or if the index is out of bounds of the task list.","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"     * @param command \"mark k\", where k is the 1-based index of the task to be marked in the task list.","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"     * @param taskList TaskList containing the current tasks.","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"     * @return UpdateMarkCommand instance that marks a task from the task list when executed.","lastModifiedDate":"2022-08-29"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"     * @throws IllegalArgumentException if input string from user is invalid.","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"    public static UpdateMarkCommand of(String command, TaskList taskList) throws IllegalArgumentException {","lastModifiedDate":"2022-08-25"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"        int taskIndex;","lastModifiedDate":"2022-08-25"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-25"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"            taskIndex \u003d Parser.getTaskIndex(command);","lastModifiedDate":"2022-08-29"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"zsiggg"},"content":"            throw new IllegalArgumentException(\"🙁 OOPS!!! Provide a number to mark a task.\\n\");","lastModifiedDate":"2022-08-25"},{"lineNumber":32,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":33,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":34,"author":{"gitId":"zsiggg"},"content":"        Task task;","lastModifiedDate":"2022-08-25"},{"lineNumber":35,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-25"},{"lineNumber":36,"author":{"gitId":"zsiggg"},"content":"            task \u003d taskList.get(taskIndex);","lastModifiedDate":"2022-08-25"},{"lineNumber":37,"author":{"gitId":"zsiggg"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-08-25"},{"lineNumber":38,"author":{"gitId":"zsiggg"},"content":"            throw new IllegalArgumentException(","lastModifiedDate":"2022-08-25"},{"lineNumber":39,"author":{"gitId":"zsiggg"},"content":"                    String.format(","lastModifiedDate":"2022-08-25"},{"lineNumber":40,"author":{"gitId":"zsiggg"},"content":"                            \"🙁 OOPS!!! Provide a valid number (from 1 to %d) to mark a task.\\n\", taskList.size())","lastModifiedDate":"2022-08-25"},{"lineNumber":41,"author":{"gitId":"zsiggg"},"content":"            );","lastModifiedDate":"2022-08-25"},{"lineNumber":42,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":43,"author":{"gitId":"zsiggg"},"content":"        return new UpdateMarkCommand(command, task, taskIndex);","lastModifiedDate":"2022-08-28"},{"lineNumber":44,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":45,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":46,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-25"},{"lineNumber":47,"author":{"gitId":"zsiggg"},"content":"    public void execute(TaskList taskList, Storage storage) throws IOException {","lastModifiedDate":"2022-08-28"},{"lineNumber":48,"author":{"gitId":"zsiggg"},"content":"        taskList.mark(super.taskIndex, storage);","lastModifiedDate":"2022-08-28"},{"lineNumber":49,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":50,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":51,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-27"},{"lineNumber":52,"author":{"gitId":"zsiggg"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) {","lastModifiedDate":"2022-08-28"},{"lineNumber":53,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-28"},{"lineNumber":54,"author":{"gitId":"zsiggg"},"content":"            this.execute(taskList, storage);","lastModifiedDate":"2022-08-28"},{"lineNumber":55,"author":{"gitId":"zsiggg"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-28"},{"lineNumber":56,"author":{"gitId":"zsiggg"},"content":"            ui.println(e.getMessage());","lastModifiedDate":"2022-08-28"},{"lineNumber":57,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":58,"author":{"gitId":"zsiggg"},"content":"        ui.printWithDivider(String.format(\"Nice! I\u0027ve marked this task as done:\\n  %s\", super.task.toString()));","lastModifiedDate":"2022-08-27"},{"lineNumber":59,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":60,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"zsiggg":60}},{"path":"src/main/java/duke/command/UpdateUnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke.command;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import duke.*;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"import duke.task.Task;","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":" * A command that unmarks a task in the task list.","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"public class UpdateUnmarkCommand extends UpdateCommand {","lastModifiedDate":"2022-08-25"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"    private UpdateUnmarkCommand(String command, Task task, int taskIndex) {","lastModifiedDate":"2022-08-28"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"        super(command, task, taskIndex);","lastModifiedDate":"2022-08-28"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"     * Factory method taking in input string from user and a TaskList.","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"     * Throws IllegalArgumentException if the index for the task to be unmarked is not given,","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"     * or if the index is out of bounds of the task list.","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"     * @param command \"unmark k\", where k is the 1-based index of the task to be unmarked in the task list.","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"     * @param taskList TaskList containing the current tasks.","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"     * @return UpdateUnmarkCommand instance that unmarks a task from the task list when executed.","lastModifiedDate":"2022-08-29"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"     * @throws IllegalArgumentException if input string from user is invalid.","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"    public static UpdateUnmarkCommand of(String command, TaskList taskList) throws IllegalArgumentException {","lastModifiedDate":"2022-08-25"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"        int taskIndex;","lastModifiedDate":"2022-08-25"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-25"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"            taskIndex \u003d Parser.getTaskIndex(command);","lastModifiedDate":"2022-08-29"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"zsiggg"},"content":"            throw new IllegalArgumentException(\"🙁 OOPS!!! Provide a number to unmark a task.\\n\");","lastModifiedDate":"2022-08-25"},{"lineNumber":32,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":33,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":34,"author":{"gitId":"zsiggg"},"content":"        Task task;","lastModifiedDate":"2022-08-25"},{"lineNumber":35,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-25"},{"lineNumber":36,"author":{"gitId":"zsiggg"},"content":"            task \u003d taskList.get(taskIndex);","lastModifiedDate":"2022-08-25"},{"lineNumber":37,"author":{"gitId":"zsiggg"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-08-25"},{"lineNumber":38,"author":{"gitId":"zsiggg"},"content":"            throw new IllegalArgumentException(","lastModifiedDate":"2022-08-25"},{"lineNumber":39,"author":{"gitId":"zsiggg"},"content":"                    String.format(","lastModifiedDate":"2022-08-25"},{"lineNumber":40,"author":{"gitId":"zsiggg"},"content":"                            \"🙁 OOPS!!! Provide a valid number (from 1 to %d) to unmark a task.\\n\", taskList.size())","lastModifiedDate":"2022-08-25"},{"lineNumber":41,"author":{"gitId":"zsiggg"},"content":"            );","lastModifiedDate":"2022-08-25"},{"lineNumber":42,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-25"},{"lineNumber":43,"author":{"gitId":"zsiggg"},"content":"        return new UpdateUnmarkCommand(command, task, taskIndex);","lastModifiedDate":"2022-08-28"},{"lineNumber":44,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":45,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":46,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-25"},{"lineNumber":47,"author":{"gitId":"zsiggg"},"content":"    public void execute(TaskList taskList, Storage storage) throws IOException {","lastModifiedDate":"2022-08-28"},{"lineNumber":48,"author":{"gitId":"zsiggg"},"content":"        taskList.unmark(super.taskIndex, storage);","lastModifiedDate":"2022-08-28"},{"lineNumber":49,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":50,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":51,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-27"},{"lineNumber":52,"author":{"gitId":"zsiggg"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) {","lastModifiedDate":"2022-08-28"},{"lineNumber":53,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-28"},{"lineNumber":54,"author":{"gitId":"zsiggg"},"content":"            this.execute(taskList, storage);","lastModifiedDate":"2022-08-28"},{"lineNumber":55,"author":{"gitId":"zsiggg"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-28"},{"lineNumber":56,"author":{"gitId":"zsiggg"},"content":"            ui.println(e.getMessage());","lastModifiedDate":"2022-08-28"},{"lineNumber":57,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":58,"author":{"gitId":"zsiggg"},"content":"        ui.printWithDivider(String.format(\"OK, I\u0027ve marked this task as not done yet:\\n  %s\", super.task.toString()));","lastModifiedDate":"2022-08-27"},{"lineNumber":59,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":60,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"zsiggg":60}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke.task;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-22"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-22"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2022-08-22"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":"    public Deadline(boolean isDone, String text, LocalDateTime deadline) {","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":"        super(isDone, text);","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"        return String.format(\"[D] %s (by: %s)\", super.toString(), this.deadline.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy, HHmm\")));","lastModifiedDate":"2022-08-22"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"zsiggg":18}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke.task;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-22"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-22"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"public class Event extends Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"    private LocalDateTime time;","lastModifiedDate":"2022-08-22"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":"    public Event(boolean isDone, String text, LocalDateTime time) {","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":"        super(isDone, text);","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"        this.time \u003d time;","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"        return String.format(\"[E] %s (at: %s)\", super.toString(), this.time.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy, HHmm\")));","lastModifiedDate":"2022-08-22"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"zsiggg":18}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke.task;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"public abstract class Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"    private boolean isDone;","lastModifiedDate":"2022-08-16"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"    private String text;","lastModifiedDate":"2022-08-16"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"    public Task(boolean isDone, String text) {","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-08-16"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":"        this.text \u003d text;","lastModifiedDate":"2022-08-16"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"    public void mark() {","lastModifiedDate":"2022-08-17"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-08-17"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"    public void unmark() {","lastModifiedDate":"2022-08-17"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-17"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"    public boolean textContains(String s) {","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"        return this.text.contains(s);","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-16"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"    public String toString() {","lastModifiedDate":"2022-08-16"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"        return String.format(\"[%c] %s\", isDone ? \u0027X\u0027 : \u0027 \u0027, this.text);","lastModifiedDate":"2022-08-16"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-16"}],"authorContributionMap":{"zsiggg":28}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke.task;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"    public Todo(boolean isDone, String text) {","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"        super(isDone, text);","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":"        return \"[T] \" + super.toString();","lastModifiedDate":"2022-08-17"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"zsiggg":12}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"public class ParserTest {","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"    @Test","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":"    public void parseWrongCommandTest() {","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":"        assertThrows(IllegalArgumentException.class,","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"                () -\u003e Parser.parse(\"wrong command\", new TaskList()));","lastModifiedDate":"2022-08-28"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"        assertThrows(IllegalArgumentException.class,","lastModifiedDate":"2022-08-28"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"                () -\u003e Parser.parse(\"deadline aaa bbb /by 2022\", new TaskList()));","lastModifiedDate":"2022-08-28"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"        assertThrows(IllegalArgumentException.class,","lastModifiedDate":"2022-08-28"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"                () -\u003e Parser.parse(\"task ccc ddd /at 10/01/22\", new TaskList()));","lastModifiedDate":"2022-08-28"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-28"}],"authorContributionMap":{"zsiggg":17}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-08-28"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"public class TaskListTest {","lastModifiedDate":"2022-08-28"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"    private final TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-08-28"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"    @Test","lastModifiedDate":"2022-08-28"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"    public void addTest() {","lastModifiedDate":"2022-08-28"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"        String commandString \u003d \"deadline test /by 10/02/22 1800\";","lastModifiedDate":"2022-08-28"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"        Deadline deadline \u003d new Deadline(false,","lastModifiedDate":"2022-08-28"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"                \"test\",","lastModifiedDate":"2022-08-28"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"                LocalDateTime.parse(\"10/02/22 1800\", DateTimeFormatter.ofPattern(\"dd/MM/yy HHmm\")));","lastModifiedDate":"2022-08-28"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"        try {","lastModifiedDate":"2022-08-28"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"            taskList.add(deadline,","lastModifiedDate":"2022-08-28"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"                    commandString,","lastModifiedDate":"2022-08-28"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"                    new Storage(new Ui(), \"data.txt\", \"data\"));","lastModifiedDate":"2022-08-28"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-28"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"            fail();","lastModifiedDate":"2022-08-28"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"        assertEquals(deadline, taskList.get(0));","lastModifiedDate":"2022-08-28"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":31,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-28"}],"authorContributionMap":{"zsiggg":31}},{"path":"src/test/java/duke/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"package duke;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"import java.io.PrintStream;","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":12,"author":{"gitId":"zsiggg"},"content":"public class UiTest {","lastModifiedDate":"2022-08-28"},{"lineNumber":13,"author":{"gitId":"zsiggg"},"content":"    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();","lastModifiedDate":"2022-08-28"},{"lineNumber":14,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":15,"author":{"gitId":"zsiggg"},"content":"    @BeforeEach","lastModifiedDate":"2022-08-28"},{"lineNumber":16,"author":{"gitId":"zsiggg"},"content":"    public void setUp() {","lastModifiedDate":"2022-08-28"},{"lineNumber":17,"author":{"gitId":"zsiggg"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));     // capture what is supposed to be sent to System.out","lastModifiedDate":"2022-08-28"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":19,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":20,"author":{"gitId":"zsiggg"},"content":"    @Test","lastModifiedDate":"2022-08-28"},{"lineNumber":21,"author":{"gitId":"zsiggg"},"content":"    public void showLoadingErrorTest() {","lastModifiedDate":"2022-08-28"},{"lineNumber":22,"author":{"gitId":"zsiggg"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2022-08-28"},{"lineNumber":23,"author":{"gitId":"zsiggg"},"content":"        ui.showLoadingError();","lastModifiedDate":"2022-08-28"},{"lineNumber":24,"author":{"gitId":"zsiggg"},"content":"        assertEquals(","lastModifiedDate":"2022-08-28"},{"lineNumber":25,"author":{"gitId":"zsiggg"},"content":"                \"------------------------------\\nThere was a problem loading the tasks from the output file. \" +","lastModifiedDate":"2022-08-28"},{"lineNumber":26,"author":{"gitId":"zsiggg"},"content":"                        \"Starting with empty list.\\n------------------------------\\n\\n\",","lastModifiedDate":"2022-08-28"},{"lineNumber":27,"author":{"gitId":"zsiggg"},"content":"                outputStreamCaptor.toString());","lastModifiedDate":"2022-08-28"},{"lineNumber":28,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":29,"author":{"gitId":"zsiggg"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":30,"author":{"gitId":"zsiggg"},"content":"    @AfterEach","lastModifiedDate":"2022-08-28"},{"lineNumber":31,"author":{"gitId":"zsiggg"},"content":"    public void tearDown() {","lastModifiedDate":"2022-08-28"},{"lineNumber":32,"author":{"gitId":"zsiggg"},"content":"        System.setOut(System.out);","lastModifiedDate":"2022-08-28"},{"lineNumber":33,"author":{"gitId":"zsiggg"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":34,"author":{"gitId":"zsiggg"},"content":"}","lastModifiedDate":"2022-08-28"}],"authorContributionMap":{"zsiggg":34}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"zsiggg"},"content":"aaa bbb","lastModifiedDate":"2022-08-17"},{"lineNumber":2,"author":{"gitId":"zsiggg"},"content":"todo read book","lastModifiedDate":"2022-08-17"},{"lineNumber":3,"author":{"gitId":"zsiggg"},"content":"deadline do exam /by Mon 8pm","lastModifiedDate":"2022-08-17"},{"lineNumber":4,"author":{"gitId":"zsiggg"},"content":"event eat dinner /at 5pm-9pm on Tuesday","lastModifiedDate":"2022-08-17"},{"lineNumber":5,"author":{"gitId":"zsiggg"},"content":"list","lastModifiedDate":"2022-08-17"},{"lineNumber":6,"author":{"gitId":"zsiggg"},"content":"mark 4","lastModifiedDate":"2022-08-17"},{"lineNumber":7,"author":{"gitId":"zsiggg"},"content":"mark 1","lastModifiedDate":"2022-08-17"},{"lineNumber":8,"author":{"gitId":"zsiggg"},"content":"unmark 4","lastModifiedDate":"2022-08-17"},{"lineNumber":9,"author":{"gitId":"zsiggg"},"content":"mark 3","lastModifiedDate":"2022-08-17"},{"lineNumber":10,"author":{"gitId":"zsiggg"},"content":"list","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"zsiggg":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"zsiggg"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-08-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"zsiggg":1,"-":20}}]
