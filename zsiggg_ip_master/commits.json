{"authorDailyContributionsMap":{"zsiggg":[{"date":"2022-08-16","commitResults":[{"hash":"19fae5decd86aebc8c510cdbfb446761fed4e9b6","messageTitle":"feat: greet, echo, exit","messageBody":"","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":15,"deletions":6}}},{"hash":"887378a71b587d28d2024f1b1141ddb9b583cbf8","messageTitle":"style: print lines before and after output","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":0}}},{"hash":"0c6ea439a4a2ea5c2c142f98c736448e2c410e64","messageTitle":"feat: add, list","messageBody":"","tags":["A-Collections"],"fileTypesAndContributionMap":{"java":{"insertions":9,"deletions":1}}},{"hash":"ffa34928e0d0a3e9e8f295d1a9826ed08317e7ea","messageTitle":"refactor: task class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":3}}}]},{"date":"2022-08-17","commitResults":[{"hash":"f4024884dd4021be4ac85ab2c45aa572da9cb166","messageTitle":"fix: allow whitespace in task","messageBody":"","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"aeff80d19fd0b4619c5667d39678d3857a06bbc0","messageTitle":"refactor: mark and unmark in task class","messageBody":"","tags":["A-Classes"],"fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":0}}},{"hash":"64a6bffee29ff658e18bdf5f93b43f4c854cb87c","messageTitle":"feat: mark","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":27,"deletions":12}}},{"hash":"6232df1304bdb75b2f1ff582abfe574ac2641d6b","messageTitle":"feat: unmark","messageBody":"","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":15,"deletions":4}}},{"hash":"d50253a01ad6254acf0c030f04162d593fb2b2ee","messageTitle":"refactor: todo, deadline, event classes","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":36,"deletions":0}}},{"hash":"866f2d9df4542a4d1f204f795b3c67ffea47a538","messageTitle":"feat: add todo, event, deadlines","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":8}}},{"hash":"bc54f16b9ed52adf42d0297b88577edc071f5f57","messageTitle":"refactor: default task type will be todo; task class will be abstract","messageBody":"","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":4}}},{"hash":"8853e231bceee87cadd5c2670a7a7209b00a135e","messageTitle":"feat: automated text ui testing","messageBody":"","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":10,"deletions":0}}},{"hash":"b0bbf8df3e6a45fb71a3430cd49f31cdada38dce","messageTitle":"feat: error checking","messageBody":"must prefix with todo, event, deadline to add task; unrecognised text\nwill print an error\nmarking and unmarking error -\u003e not a number provide; index out of range\ntodo error -\u003e no text\ndeadline/event error -\u003e no text; no time\nlsit error -\u003e no tasks in list\n","tags":["Level-5"],"fileTypesAndContributionMap":{"java":{"insertions":48,"deletions":23}}},{"hash":"9792c586a2107587d5060cc8920a22be7117e6f3","messageTitle":"feat: delete","messageBody":"","tags":["Level-6"],"fileTypesAndContributionMap":{"java":{"insertions":16,"deletions":0}}}]},{"date":"2022-08-22","commitResults":[{"hash":"8e7719ddf55fc715c3b1ebefda1846faaf60bf70","messageTitle":"feat: output add and delete commands into file","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":32,"deletions":1}}},{"hash":"e3873788831ea3e94244b9cdb1bdff44e0b8fb78","messageTitle":"feat: read previous tasks on start","messageBody":"added isPrinting booleans, so that previous commands read from file will\nnot cause outputs to be printed\n","fileTypesAndContributionMap":{"java":{"insertions":101,"deletions":40}}},{"hash":"5aa993e45269fae2969bbd2888e08cd43aab1e9a","messageTitle":"feat: output marking and unmarking into file; /done option when adding tasks","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":5}}},{"hash":"75120f97b06c07aac20c7f4055bd4b02bebe2853","messageTitle":"fix: cross platform file paths","messageBody":"","tags":["Level-7"],"fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"66f1f6ab5a9173764e4c790671831f477ee872de","messageTitle":"feat: store deadline and event time as LocalDateTime, and output prettily","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":28,"deletions":8}}},{"hash":"6fd75852d027be00db93a301f5c8b90dda1acd00","messageTitle":"style: no indentation for case","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":137,"deletions":137}}}]},{"date":"2022-08-23","commitResults":[{"hash":"256fb30e57fd8f9612e9acd0b7414e74db30f873","messageTitle":"refactor: use enums for switch case","messageBody":"made fields for output folder, name, path private since only used in\nthis class\ntook out the nested switch case in the outer switch case\u0027s default case\n","tags":["A-Enums"],"fileTypesAndContributionMap":{"java":{"insertions":37,"deletions":29}}},{"hash":"3ed35b83688a9919545cb1be72241dad58d91022","messageTitle":"refactor: encapsulate code for adding into respective classes","messageBody":"needed a constructor that took in the command string and parsed it to\nget the relevant fields. however, super() needs to be called at the top\nof the constructor.\n\nthus, created factory methods for each subclass of Task, and made\nconstructors private.\n","fileTypesAndContributionMap":{"java":{"insertions":203,"deletions":155}}},{"hash":"8019165db574c61fed8c13092ae0997eb635b2e2","messageTitle":"fix: terminate upon bye command","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":2}}}]},{"date":"2022-08-25","commitResults":[{"hash":"ff52edd965329c1079d0ae5c36d607066fc798d9","messageTitle":"refactor: tasklist class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":49,"deletions":0}}},{"hash":"8859eb55ca65ed8f505108332bb83356e0f2826e","messageTitle":"refactor: parser, command classes","messageBody":"previously used switch case within Duke to handle different commands.\n\nencapsulated the switch case inside the Parser class, which returns a\nCommand to the caller or throw an exception if the command is not valid. execute() method can then be called to execute the command.\n","fileTypesAndContributionMap":{"java":{"insertions":308,"deletions":67}}}]},{"date":"2022-08-26","commitResults":[{"hash":"203bc5f3d8863c772d43bc94c155bb15c7f3f250","messageTitle":"refactor: storage class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":87,"deletions":0}}},{"hash":"8555dc42c2ab4761c7273e620b7c18b015754d19","messageTitle":"refactor: taskList nullary constructor, used in Storage.load()","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":2}}},{"hash":"fdb28bd9b0be3646afde021718ee979a9337f737","messageTitle":"refactor: ui class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":24,"deletions":1}}},{"hash":"81736e900ab3300ff9e186ad5ce614c3108921b7","messageTitle":"refactor: clean up Duke class to make use of new classes","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":213}}}]},{"date":"2022-08-27","commitResults":[{"hash":"9f2068c9895f1d865931c95f8ac4456975b372af","messageTitle":"refactor: command classes","messageBody":"need to differentiate between when to print and not to print (i.e.\nduring loading from output file) in execute() in command classes. thus\noverloaded execute() method and called the one that does not take in Ui\nin storage.load().\n\nDeleteCommand class now stores Task, such that we have access to the\nTask after it is removed from the TaskList to call the toString()\nmethod.\n\nprogram does not exit gracefully upon bye command due to system.exit(1)\nbeing used. thus, added isExit boolean in Duke.run() and ByeCommand, exiting Duke.run() on isExit \u003d true.\n","fileTypesAndContributionMap":{"java":{"insertions":69,"deletions":26}}},{"hash":"0baa42e2969ff51e4bbe68eb63ed2b520a3d98d1","messageTitle":"refactor: remove TaskList(String) constructor","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":11}}},{"hash":"9cefc2598add042aab85a1c7695983aa02e99409","messageTitle":"refactor: showWelcome() and printWithDivider()","messageBody":"add newline to end of string to be printed in printWithDivider().\n\ncorrected showWelcome() message.\n","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":2}}},{"hash":"af2adfa37736fd81e03f3b7eae377aee405cb078","messageTitle":"refactor: platform-independent file paths","messageBody":"take in directories of the output file path as a variable argument in\nDuke() and Storage.load(), then join them with the correct separator\naccording to the platform in use to form the paths.\n","fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":10}}}]},{"date":"2022-08-28","commitResults":[{"hash":"eff277b464886dabfb4afcb32c19fe1959141df9","messageTitle":"refactor: remove isPrinting in Task subclasses","messageBody":"isPrinting was used to control whether the acknowledge message is\nprinted when a task is created. however, since this should be done in Ui\nclass, this should be removed.\n","fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":26}}},{"hash":"1c6f10a7670692c09c94b54c497813e18772fa56","messageTitle":"refactor: ui class","messageBody":"print new line in printWithDivider(), so that there will be a spacing\nbetween two consecutive outputs of this function.\n\nshowLoadingError() for use if storage.load() fails in Duke class.\n","fileTypesAndContributionMap":{"java":{"insertions":7,"deletions":3}}},{"hash":"b1ae0e69e6e937d5dd5ade72817bd1c9d73fa580","messageTitle":"fix: getTaskIndex() should return 0-based index","messageBody":"output of getTaskIndex() is used directly in UpdateCommand subclasses\nget and mark/unmark a task.\n\nhowever, the user passes in a 1-based index,\nbut the taskList methods takes in 0-based indexes.\n\nthus it is more accurate for getTaskIndex() to return a 0-based index,\nthat can then be used directly in taskList methods.\n","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":1}}},{"hash":"0a31ae60e880c370b806168c0b243f994b7412fb","messageTitle":"refactor: storage class","messageBody":"instead of in Duke class, initialise FileWriter class, write() and\nclose() in Storage class instead, since Storage should take care of all\ninteractions with the output file.\n\nwrite() to be used to write changes after the TaskList is changed by a\ncommand.\n\nlist tasks with ListCommand upon loading of tasks in load() completes.\n","fileTypesAndContributionMap":{"java":{"insertions":14,"deletions":3}}},{"hash":"33a3e32ac7bf2c626e87eea454ef4a062f13f25b","messageTitle":"refactor: write changes to taskList into output file","messageBody":"in TaskList class, every method that results in change to the tasks will\nnow write to the output file, by calling storage.write(). thus, the\noutput file is updated whenever there are changes to the tasks due to a\ncommand. when catching the IOException, changes made to tasks and\naddCommands are reversed, since we are unable to save this change to the\noutput file, then the IOException is rethrown with a message.\n\nin Command class, execute() should take in storage, which will be passed\ninto command.execute(), then to the methods in TaskList. execute() will\nonly throw IOException if no Ui is passed in, as there is no way to\nprint a message to inform the user that an error has occured.\n\nin TaskList class, mark() and unmark() added, which were initially only\nin Task class. this is these cause an update to the TaskList, which\nshould be updated with storage.write(). in toString(), streams are used\ninstead of concatenating, since it is more efficient.\n","fileTypesAndContributionMap":{"java":{"insertions":128,"deletions":42}}},{"hash":"deb9e9d45414d2ef6ef025840047f607f9dcf4ef","messageTitle":"fix: catch exceptions in Duke class","messageBody":"IllegalArgumentException thrown by Parser.parse should be caught and\ntheir messages printed, as this denotes a wrong command being entered.\notherwise, this would cause the program to be terminated upon a wrong\ncommand.\n\ncatch IOException now thrown by storage.load(), and assign a new empty\ninstance of TaskList. this is to prevent a half-loaded TaskList from\nbeing used, in the event that the IOException was thrown when some lines\nhad already been read from the output file.\n","tags":["A-MoreOOP","A-Jar"],"fileTypesAndContributionMap":{"java":{"insertions":15,"deletions":3}}},{"hash":"d1d14e685ac57c81e8013ef68df8eb9b2488d3ca","messageTitle":"refactor: divide classes into packages (duke, duke.command, duke.task)","messageBody":"","tags":["A-Packages"],"fileTypesAndContributionMap":{"java":{"insertions":88,"deletions":9},"bat":{"insertions":1,"deletions":1},"md":{"insertions":2,"deletions":2}}},{"hash":"a6cdfb3f0c5bbbf083c276338578729a3c465179","messageTitle":"test: Parser.parse (wrong command), tasklist.add, ui.showLoadingError","messageBody":"","tags":["A-Junit"],"fileTypesAndContributionMap":{"java":{"insertions":82,"deletions":0}}},{"hash":"c418106f79d3b6adcff73df900cc7605990ad409","messageTitle":"doc: javadoc comments for all classes","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":50,"deletions":0}}}]},{"date":"2022-08-29","commitResults":[{"hash":"ed53c9330182ffe04a2d8aaa19791d7ff2b6fd55","messageTitle":"docs: javadoc comments for all public methods","messageBody":"","tags":["A-JavaDoc","A-CodingStandard"],"fileTypesAndContributionMap":{"java":{"insertions":208,"deletions":9}}},{"hash":"92f96e434213c58a84f5d7e54e8f72241959a879","messageTitle":"refactor: remove unused TaskList parameter in Parser.getTaskIndex()","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":5}}},{"hash":"91fd5a80ec6362a50664f82f37601c0c251ec95f","messageTitle":"feat: find command","messageBody":"execute() in FindCommand uses a new method search() in TaskList, which\nreturns a TaskList instance representing the matching tasks. search()\nfilters the tasks and addCommands with the condition that the\ncorresponding task\u0027s text field contains the keyword. search()\nuses a new private TaskList constructor that takes in predefined tasks\nand addCommands lists.\n","tags":["Level-9","A-Find"],"fileTypesAndContributionMap":{"java":{"insertions":79,"deletions":1}}}]},{"date":"2022-09-01","commitResults":[{"hash":"577fee14be23fc4e3a047dd82c1f62373b6b5c1c","messageTitle":"refactor: rename get() to getTask() in TaskList","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":12}}},{"hash":"5150a2e89fdf7faa59a2344afb281bb9fe0e402a","messageTitle":"refactor: list imports instead of using wildcard in Parser","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":1}}}]},{"date":"2022-09-02","commitResults":[{"hash":"02a5959fba134151a3ce18d4efda0a854aae29d7","messageTitle":"feat: Checkstyle","messageBody":"","fileTypesAndContributionMap":{"gradle":{"insertions":5,"deletions":0}}},{"hash":"9afeb8a410d977eee7677b2eff98f0135976a189","messageTitle":"style: fix checkstyle violations in duke.command","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":29,"deletions":20}}},{"hash":"4c4be541c8ae0787afccd6a31a927f8dc4e8aae9","messageTitle":"style: fix checkstyle violations in duke.task","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":58,"deletions":4}}},{"hash":"b371fab52060886bae3e3b2541119ea3e607eaa0","messageTitle":"style: fix checkstyle violations in duke","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":60,"deletions":40}}},{"hash":"a893c45bf3abc398ef71a97ce4449314a4547f33","messageTitle":"style: fix checkstyle violations for tests","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":20,"deletions":19}}}]},{"date":"2022-09-03","commitResults":[{"hash":"10b6db3f24789502e7a6b1875e1dd6dfd8d62e88","messageTitle":"feat: gui that repeats command","messageBody":"","fileTypesAndContributionMap":{"gradle":{"insertions":15,"deletions":0},"fxml":{"insertions":41,"deletions":0},"java":{"insertions":170,"deletions":1}}}]},{"date":"2022-09-04","commitResults":[{"hash":"6764165ac02f87c59556b3996720c4e466500def","messageTitle":"feat: gui","messageBody":"added gui on top of the existing cli. run gui with Launcher.java, run\nCli with Duke.java\n\nrefactored Ui to an abstract class, with Gui and Cli extending it,\ntaking care of message printing for the different interfaces.\n","fileTypesAndContributionMap":{"fxml":{"insertions":1,"deletions":1},"java":{"insertions":142,"deletions":56}}},{"hash":"c4f70b2f7d0a47b8eb76155ebbb9608c7e5d8072","messageTitle":"refactor: 3 part test method naming convention","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":3}}}]},{"date":"2022-09-07","commitResults":[{"hash":"dd96c80cf2046dd0ddf13372da36ac4b0c149972","messageTitle":"refactor: add assertions","messageBody":"Classes in the command package accept any string as the command when\nthey are initialised.\n\nThis could result in a wrong command being created if the wrong\nconstructor is called for a certain command string (e.g. a DeleteCommand\ncould possibly be created for \"todo abc\", which should be an\nAddTodoCommand).\n\nAssertions are added to all factory methods and constructors that assert\nwhat their command strings should start with or be equal to.\n\nSince Parser should already ensure that the correct constructors and\nfactory methods are called for a certain command string, asserts ensure\nthat this does not change in future updates in code.\n","fileTypesAndContributionMap":{"java":{"insertions":23,"deletions":0}}},{"hash":"9632499cfdb5cfabe38edfd05d558e8d5f176e8b","messageTitle":"refactor: improved code quality","messageBody":"Constructors and factory methods of the command package violates some\ncode quality points.\n\nNeed to improve code quality to increase readability.\n\nLet\u0027s,\n* rename variables to better describe what they are\n* shift code out of else block to ensure that happy path is as unindented as possible\n* add whitespace between different logical groups of code\n","fileTypesAndContributionMap":{"java":{"insertions":32,"deletions":28}}},{"hash":"b05b8a20d7f3d10109d7f2b63b033b37ef9b5513","messageTitle":"style: fix checkstyle violations, mainly for new classes added for gui","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":21,"deletions":15}}},{"hash":"803eb167db4b23130f2a99526e47b57095713b6e","messageTitle":"refactor: change sad face emoji to :(, as not mappable in windows","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":17,"deletions":17}}},{"hash":"65219d110cf6b5a347f304320775b9d59951776b","messageTitle":"test: remove UiTest","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":34}}}]},{"date":"2022-09-10","commitResults":[{"hash":"ab938e8c8a815103a3c24513cb481f4e927221ae","messageTitle":"feat: add ability to tag when adding task","messageBody":"words after # and before any other flags (e.g. /by) will be taken as a\ntag. currently, only one tag is supported per task.\n","tags":["C-Tagging","BCD-Extension"],"fileTypesAndContributionMap":{"java":{"insertions":70,"deletions":24}}}]},{"date":"2022-09-16","commitResults":[{"hash":"1874f37cffab85d786cb7113d84f7493464fe341","messageTitle":"fix: edit welcome message","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":1}}},{"hash":"516446523b7396f1fc3ef4320cedef0be9a35c13","messageTitle":"refactor: pretty GUI","messageBody":"window can be expanded without changes to the look of the GUI.\n\nchange profile pictures from default.\n\nfixed issue of long messages not being showed in the dialog box.\n\nchanged text bubbles to cover the whole row instead.\n\ndifferent coloured text bubbles for Duke and user.\n","fileTypesAndContributionMap":{"fxml":{"insertions":13,"deletions":16},"java":{"insertions":6,"deletions":1}}},{"hash":"fa9a6678834c0e01d42fe2ac23f9adf26d98a2d0","messageTitle":"docs: add README","messageBody":"","fileTypesAndContributionMap":{"md":{"insertions":197,"deletions":12}}},{"hash":"afadedf3f63f8d8f2f6690847f82af0efc2e4573","messageTitle":"fix: correct mainClassName in build.gradle for GUI","messageBody":"","fileTypesAndContributionMap":{"gradle":{"insertions":1,"deletions":1},"md":{"insertions":2,"deletions":5}}}]}]},"authorFileTypeContributionMap":{"zsiggg":{"java":1599,"md":195,"fxml":38,"sh":0,"bat":1,"gradle":21,"txt":10}},"authorContributionVariance":{"zsiggg":26199.615},"authorDisplayNameMap":{"zsiggg":"CS2103T-F12-1 ZSIG..IYOU"}}
