[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcuspang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-24"},{"lineNumber":2,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":3,"author":{"gitId":"marcuspang"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":4,"author":{"gitId":"marcuspang"},"content":" * Represents a deadline, a type of task","lastModifiedDate":"2022-08-24"},{"lineNumber":5,"author":{"gitId":"marcuspang"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":6,"author":{"gitId":"marcuspang"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-08-16"},{"lineNumber":7,"author":{"gitId":"marcuspang"},"content":"    private final LocalDateTime deadline;","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":9,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"marcuspang"},"content":"     * Constructs a deadline with some description and a datetime to indicate","lastModifiedDate":"2022-08-24"},{"lineNumber":11,"author":{"gitId":"marcuspang"},"content":"     * the deadline","lastModifiedDate":"2022-08-24"},{"lineNumber":12,"author":{"gitId":"marcuspang"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":13,"author":{"gitId":"marcuspang"},"content":"     * @param description The specified description.","lastModifiedDate":"2022-08-24"},{"lineNumber":14,"author":{"gitId":"marcuspang"},"content":"     * @param isDone      The boolean indicating whether the task is done.","lastModifiedDate":"2022-08-24"},{"lineNumber":15,"author":{"gitId":"marcuspang"},"content":"     * @param deadline    The specified datetime for the deadline.","lastModifiedDate":"2022-08-24"},{"lineNumber":16,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":17,"author":{"gitId":"marcuspang"},"content":"    Deadline(String description, boolean isDone, LocalDateTime deadline) {","lastModifiedDate":"2022-08-24"},{"lineNumber":18,"author":{"gitId":"marcuspang"},"content":"        super(description, isDone);","lastModifiedDate":"2022-08-24"},{"lineNumber":19,"author":{"gitId":"marcuspang"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2022-08-24"},{"lineNumber":20,"author":{"gitId":"marcuspang"},"content":"        this.taskType \u003d TaskType.D;","lastModifiedDate":"2022-08-24"},{"lineNumber":21,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":22,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":23,"author":{"gitId":"marcuspang"},"content":"    public String getDeadline() {","lastModifiedDate":"2022-08-24"},{"lineNumber":24,"author":{"gitId":"marcuspang"},"content":"        return Task.dateTimeDisplayFormatter.format(this.deadline);","lastModifiedDate":"2022-08-24"},{"lineNumber":25,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":26,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":27,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":28,"author":{"gitId":"marcuspang"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-08-24"},{"lineNumber":29,"author":{"gitId":"marcuspang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-08-24"},{"lineNumber":30,"author":{"gitId":"marcuspang"},"content":"     * Deadline has an additional datetime field for by","lastModifiedDate":"2022-08-24"},{"lineNumber":31,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":32,"author":{"gitId":"marcuspang"},"content":"    @Override","lastModifiedDate":"2022-08-24"},{"lineNumber":33,"author":{"gitId":"marcuspang"},"content":"    public String encode(String delimiter) {","lastModifiedDate":"2022-08-24"},{"lineNumber":34,"author":{"gitId":"marcuspang"},"content":"        return super.encode(delimiter) + delimiter + this.deadline.format(Task.dateTimeParser);","lastModifiedDate":"2022-08-24"},{"lineNumber":35,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":36,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":37,"author":{"gitId":"marcuspang"},"content":"    @Override","lastModifiedDate":"2022-08-16"},{"lineNumber":38,"author":{"gitId":"marcuspang"},"content":"    public String toString() {","lastModifiedDate":"2022-08-16"},{"lineNumber":39,"author":{"gitId":"marcuspang"},"content":"        return super.toString() + \" (by: \" + this.getDeadline() + \")\";","lastModifiedDate":"2022-08-24"},{"lineNumber":40,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":41,"author":{"gitId":"marcuspang"},"content":"}","lastModifiedDate":"2022-08-16"}],"authorContributionMap":{"marcuspang":41}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcuspang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-24"},{"lineNumber":2,"author":{"gitId":"marcuspang"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-08-24"},{"lineNumber":3,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":4,"author":{"gitId":"marcuspang"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-13"},{"lineNumber":5,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":6,"author":{"gitId":"marcuspang"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":7,"author":{"gitId":"marcuspang"},"content":" * Main class for Duke Chatbot","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"marcuspang"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"marcuspang"},"content":"    // Constants for messages to be printed to the console","lastModifiedDate":"2022-08-24"},{"lineNumber":11,"author":{"gitId":"marcuspang"},"content":"    public static final String LONG_LINE \u003d \"    ____________________________________________________________\\n\";","lastModifiedDate":"2022-08-16"},{"lineNumber":12,"author":{"gitId":"marcuspang"},"content":"    public static final String GREETING_MESSAGE \u003d LONG_LINE","lastModifiedDate":"2022-08-24"},{"lineNumber":13,"author":{"gitId":"marcuspang"},"content":"            + \"     Hello! I\u0027m Duke\\n\"","lastModifiedDate":"2022-08-24"},{"lineNumber":14,"author":{"gitId":"marcuspang"},"content":"            + \"     What can I do for you?\\n\"","lastModifiedDate":"2022-08-24"},{"lineNumber":15,"author":{"gitId":"marcuspang"},"content":"            + LONG_LINE;","lastModifiedDate":"2022-08-24"},{"lineNumber":16,"author":{"gitId":"marcuspang"},"content":"    public static final String GOODBYE_MESSAGE \u003d LONG_LINE","lastModifiedDate":"2022-08-24"},{"lineNumber":17,"author":{"gitId":"marcuspang"},"content":"            + \"     Bye. Hope to see you again soon!\\n\"","lastModifiedDate":"2022-08-24"},{"lineNumber":18,"author":{"gitId":"marcuspang"},"content":"            + LONG_LINE;","lastModifiedDate":"2022-08-24"},{"lineNumber":19,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-15"},{"lineNumber":20,"author":{"gitId":"marcuspang"},"content":"    private final Storage taskStorage \u003d new Storage();","lastModifiedDate":"2022-08-24"},{"lineNumber":21,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"marcuspang"},"content":"        // Initialize Duke chatbot","lastModifiedDate":"2022-08-15"},{"lineNumber":24,"author":{"gitId":"marcuspang"},"content":"        Duke chatBot \u003d new Duke();","lastModifiedDate":"2022-08-15"},{"lineNumber":25,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-15"},{"lineNumber":26,"author":{"gitId":"marcuspang"},"content":"        // Greeting message is always printed","lastModifiedDate":"2022-08-15"},{"lineNumber":27,"author":{"gitId":"marcuspang"},"content":"        System.out.println(GREETING_MESSAGE);","lastModifiedDate":"2022-08-13"},{"lineNumber":28,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":29,"author":{"gitId":"marcuspang"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2022-08-13"},{"lineNumber":30,"author":{"gitId":"marcuspang"},"content":"        String command \u003d in.nextLine();","lastModifiedDate":"2022-08-15"},{"lineNumber":31,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":32,"author":{"gitId":"marcuspang"},"content":"        // Continuously executes user\u0027s command until \"bye\" is entered","lastModifiedDate":"2022-08-15"},{"lineNumber":33,"author":{"gitId":"marcuspang"},"content":"        while (!command.equals(\"bye\")) {","lastModifiedDate":"2022-08-15"},{"lineNumber":34,"author":{"gitId":"marcuspang"},"content":"            chatBot.executeCommand(command);","lastModifiedDate":"2022-08-15"},{"lineNumber":35,"author":{"gitId":"marcuspang"},"content":"            command \u003d in.nextLine();","lastModifiedDate":"2022-08-15"},{"lineNumber":36,"author":{"gitId":"marcuspang"},"content":"        }","lastModifiedDate":"2022-08-13"},{"lineNumber":37,"author":{"gitId":"marcuspang"},"content":"        in.close();","lastModifiedDate":"2022-08-17"},{"lineNumber":38,"author":{"gitId":"marcuspang"},"content":"        chatBot.taskStorage.saveTasks();","lastModifiedDate":"2022-08-24"},{"lineNumber":39,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":40,"author":{"gitId":"marcuspang"},"content":"        // Goodbye message is always printed","lastModifiedDate":"2022-08-15"},{"lineNumber":41,"author":{"gitId":"marcuspang"},"content":"        System.out.println(GOODBYE_MESSAGE);","lastModifiedDate":"2022-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":43,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":44,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":45,"author":{"gitId":"marcuspang"},"content":"     * Executes user\u0027s command and prints the corresponding response message to the","lastModifiedDate":"2022-08-17"},{"lineNumber":46,"author":{"gitId":"marcuspang"},"content":"     * console","lastModifiedDate":"2022-08-17"},{"lineNumber":47,"author":{"gitId":"marcuspang"},"content":"     *","lastModifiedDate":"2022-08-17"},{"lineNumber":48,"author":{"gitId":"marcuspang"},"content":"     * @param command The specified command.","lastModifiedDate":"2022-08-17"},{"lineNumber":49,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":50,"author":{"gitId":"marcuspang"},"content":"    public void executeCommand(String command) {","lastModifiedDate":"2022-08-15"},{"lineNumber":51,"author":{"gitId":"marcuspang"},"content":"        // Used to generate the response message after executing commands","lastModifiedDate":"2022-08-16"},{"lineNumber":52,"author":{"gitId":"marcuspang"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-08-15"},{"lineNumber":53,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":54,"author":{"gitId":"marcuspang"},"content":"        // Limit of 2 is used to avoid splitting the second argument in command","lastModifiedDate":"2022-08-17"},{"lineNumber":55,"author":{"gitId":"marcuspang"},"content":"        String[] inputStrings \u003d command.split(\" \", 2);","lastModifiedDate":"2022-08-16"},{"lineNumber":56,"author":{"gitId":"marcuspang"},"content":"        try {","lastModifiedDate":"2022-08-17"},{"lineNumber":57,"author":{"gitId":"marcuspang"},"content":"            switch (inputStrings[0]) {","lastModifiedDate":"2022-08-16"},{"lineNumber":58,"author":{"gitId":"marcuspang"},"content":"            case \"list\": {","lastModifiedDate":"2022-08-16"},{"lineNumber":59,"author":{"gitId":"marcuspang"},"content":"                // Return all tasks","lastModifiedDate":"2022-08-15"},{"lineNumber":60,"author":{"gitId":"marcuspang"},"content":"                sb.append(LONG_LINE).append(\"     Here are the tasks in your list:\\n\");","lastModifiedDate":"2022-08-16"},{"lineNumber":61,"author":{"gitId":"marcuspang"},"content":"                for (int i \u003d 0; i \u003c taskStorage.size(); i++) {","lastModifiedDate":"2022-08-24"},{"lineNumber":62,"author":{"gitId":"marcuspang"},"content":"                    sb.append(\"     \").append(i + 1).append(\".\").append(taskStorage.getTask(i)).append(\"\\n\");","lastModifiedDate":"2022-08-24"},{"lineNumber":63,"author":{"gitId":"marcuspang"},"content":"                }","lastModifiedDate":"2022-08-15"},{"lineNumber":64,"author":{"gitId":"marcuspang"},"content":"                sb.append(LONG_LINE);","lastModifiedDate":"2022-08-15"},{"lineNumber":65,"author":{"gitId":"marcuspang"},"content":"                break;","lastModifiedDate":"2022-08-16"},{"lineNumber":66,"author":{"gitId":"marcuspang"},"content":"            }","lastModifiedDate":"2022-08-16"},{"lineNumber":67,"author":{"gitId":"marcuspang"},"content":"            case \"mark\": {","lastModifiedDate":"2022-08-16"},{"lineNumber":68,"author":{"gitId":"marcuspang"},"content":"                // Tasks are displayed as 1-indexed, but they are stored as 0-indexed","lastModifiedDate":"2022-08-15"},{"lineNumber":69,"author":{"gitId":"marcuspang"},"content":"                // Hence, we need to account for this offset here","lastModifiedDate":"2022-08-15"},{"lineNumber":70,"author":{"gitId":"marcuspang"},"content":"                int taskIndex \u003d Integer.parseInt(inputStrings[1]) - 1;","lastModifiedDate":"2022-08-16"},{"lineNumber":71,"author":{"gitId":"marcuspang"},"content":"                Task task \u003d this.taskStorage.getTask(taskIndex);","lastModifiedDate":"2022-08-24"},{"lineNumber":72,"author":{"gitId":"marcuspang"},"content":"                task.markTask();","lastModifiedDate":"2022-08-15"},{"lineNumber":73,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-15"},{"lineNumber":74,"author":{"gitId":"marcuspang"},"content":"                sb.append(LONG_LINE)","lastModifiedDate":"2022-08-16"},{"lineNumber":75,"author":{"gitId":"marcuspang"},"content":"                        .append(\"     Nice! I\u0027ve marked this task as done:\\n\")","lastModifiedDate":"2022-08-15"},{"lineNumber":76,"author":{"gitId":"marcuspang"},"content":"                        .append(\"       \").append(task).append(\"\\n\")","lastModifiedDate":"2022-08-15"},{"lineNumber":77,"author":{"gitId":"marcuspang"},"content":"                        .append(LONG_LINE);","lastModifiedDate":"2022-08-16"},{"lineNumber":78,"author":{"gitId":"marcuspang"},"content":"                break;","lastModifiedDate":"2022-08-16"},{"lineNumber":79,"author":{"gitId":"marcuspang"},"content":"            }","lastModifiedDate":"2022-08-16"},{"lineNumber":80,"author":{"gitId":"marcuspang"},"content":"            case \"unmark\": {","lastModifiedDate":"2022-08-16"},{"lineNumber":81,"author":{"gitId":"marcuspang"},"content":"                // Tasks are displayed as 1-indexed, but they are stored as 0-indexed","lastModifiedDate":"2022-08-15"},{"lineNumber":82,"author":{"gitId":"marcuspang"},"content":"                // Hence, we need to account for this offset here","lastModifiedDate":"2022-08-15"},{"lineNumber":83,"author":{"gitId":"marcuspang"},"content":"                int taskIndex \u003d Integer.parseInt(inputStrings[1]) - 1;","lastModifiedDate":"2022-08-16"},{"lineNumber":84,"author":{"gitId":"marcuspang"},"content":"                Task task \u003d this.taskStorage.getTask(taskIndex);","lastModifiedDate":"2022-08-24"},{"lineNumber":85,"author":{"gitId":"marcuspang"},"content":"                task.unmarkTask();","lastModifiedDate":"2022-08-15"},{"lineNumber":86,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-15"},{"lineNumber":87,"author":{"gitId":"marcuspang"},"content":"                sb.append(LONG_LINE)","lastModifiedDate":"2022-08-16"},{"lineNumber":88,"author":{"gitId":"marcuspang"},"content":"                        .append(\"     OK, I\u0027ve marked this task as not done yet:\\n\")","lastModifiedDate":"2022-08-15"},{"lineNumber":89,"author":{"gitId":"marcuspang"},"content":"                        .append(\"       \").append(task).append(\"\\n\")","lastModifiedDate":"2022-08-15"},{"lineNumber":90,"author":{"gitId":"marcuspang"},"content":"                        .append(LONG_LINE);","lastModifiedDate":"2022-08-16"},{"lineNumber":91,"author":{"gitId":"marcuspang"},"content":"                break;","lastModifiedDate":"2022-08-16"},{"lineNumber":92,"author":{"gitId":"marcuspang"},"content":"            }","lastModifiedDate":"2022-08-16"},{"lineNumber":93,"author":{"gitId":"marcuspang"},"content":"            case \"todo\": {","lastModifiedDate":"2022-08-16"},{"lineNumber":94,"author":{"gitId":"marcuspang"},"content":"                if (inputStrings.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-17"},{"lineNumber":95,"author":{"gitId":"marcuspang"},"content":"                    throw new DukeException(\"     ☹ OOPS!!! The description of a todo cannot be empty.\\n\");","lastModifiedDate":"2022-08-17"},{"lineNumber":96,"author":{"gitId":"marcuspang"},"content":"                }","lastModifiedDate":"2022-08-17"},{"lineNumber":97,"author":{"gitId":"marcuspang"},"content":"                Todo todo \u003d new Todo(inputStrings[1], false);","lastModifiedDate":"2022-08-24"},{"lineNumber":98,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":99,"author":{"gitId":"marcuspang"},"content":"                sb.append(this.addTask(todo));","lastModifiedDate":"2022-08-17"},{"lineNumber":100,"author":{"gitId":"marcuspang"},"content":"                break;","lastModifiedDate":"2022-08-16"},{"lineNumber":101,"author":{"gitId":"marcuspang"},"content":"            }","lastModifiedDate":"2022-08-16"},{"lineNumber":102,"author":{"gitId":"marcuspang"},"content":"            case \"deadline\": {","lastModifiedDate":"2022-08-16"},{"lineNumber":103,"author":{"gitId":"marcuspang"},"content":"                if (inputStrings.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-17"},{"lineNumber":104,"author":{"gitId":"marcuspang"},"content":"                    throw new DukeException(\"     ☹ OOPS!!! The description of a deadline cannot be empty.\\n\");","lastModifiedDate":"2022-08-17"},{"lineNumber":105,"author":{"gitId":"marcuspang"},"content":"                }","lastModifiedDate":"2022-08-17"},{"lineNumber":106,"author":{"gitId":"marcuspang"},"content":"                String[] deadlineStrings \u003d inputStrings[1].split(\" /by \", 2);","lastModifiedDate":"2022-08-16"},{"lineNumber":107,"author":{"gitId":"marcuspang"},"content":"                if (deadlineStrings.length \u003d\u003d 1 || deadlineStrings[1].equals(\"\")) {","lastModifiedDate":"2022-08-24"},{"lineNumber":108,"author":{"gitId":"marcuspang"},"content":"                    throw new DukeException(\"     ☹ OOPS!!! The date/time of a deadline cannot be empty.\\n\");","lastModifiedDate":"2022-08-17"},{"lineNumber":109,"author":{"gitId":"marcuspang"},"content":"                }","lastModifiedDate":"2022-08-17"},{"lineNumber":110,"author":{"gitId":"marcuspang"},"content":"                Deadline deadline \u003d new Deadline(deadlineStrings[0], false,","lastModifiedDate":"2022-08-24"},{"lineNumber":111,"author":{"gitId":"marcuspang"},"content":"                    LocalDateTime.parse(deadlineStrings[1], Task.dateTimeParser));","lastModifiedDate":"2022-08-24"},{"lineNumber":112,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":113,"author":{"gitId":"marcuspang"},"content":"                sb.append(this.addTask(deadline));","lastModifiedDate":"2022-08-17"},{"lineNumber":114,"author":{"gitId":"marcuspang"},"content":"                break;","lastModifiedDate":"2022-08-16"},{"lineNumber":115,"author":{"gitId":"marcuspang"},"content":"            }","lastModifiedDate":"2022-08-16"},{"lineNumber":116,"author":{"gitId":"marcuspang"},"content":"            case \"event\": {","lastModifiedDate":"2022-08-16"},{"lineNumber":117,"author":{"gitId":"marcuspang"},"content":"                if (inputStrings.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-17"},{"lineNumber":118,"author":{"gitId":"marcuspang"},"content":"                    throw new DukeException(\"     ☹ OOPS!!! The description of an event cannot be empty.\\n\");","lastModifiedDate":"2022-08-17"},{"lineNumber":119,"author":{"gitId":"marcuspang"},"content":"                }","lastModifiedDate":"2022-08-17"},{"lineNumber":120,"author":{"gitId":"marcuspang"},"content":"                String[] eventStrings \u003d inputStrings[1].split(\" /at \", 2);","lastModifiedDate":"2022-08-16"},{"lineNumber":121,"author":{"gitId":"marcuspang"},"content":"                if (eventStrings.length \u003d\u003d 1 || eventStrings[1].equals(\"\")) {","lastModifiedDate":"2022-08-24"},{"lineNumber":122,"author":{"gitId":"marcuspang"},"content":"                    throw new DukeException(\"     ☹ OOPS!!! The date/time of an event cannot be empty.\\n\");","lastModifiedDate":"2022-08-17"},{"lineNumber":123,"author":{"gitId":"marcuspang"},"content":"                }","lastModifiedDate":"2022-08-17"},{"lineNumber":124,"author":{"gitId":"marcuspang"},"content":"                Event event \u003d new Event(eventStrings[0], false, LocalDateTime.parse(eventStrings[1], Task.dateTimeParser));","lastModifiedDate":"2022-08-24"},{"lineNumber":125,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":126,"author":{"gitId":"marcuspang"},"content":"                sb.append(this.addTask(event));","lastModifiedDate":"2022-08-17"},{"lineNumber":127,"author":{"gitId":"marcuspang"},"content":"                break;","lastModifiedDate":"2022-08-16"},{"lineNumber":128,"author":{"gitId":"marcuspang"},"content":"            }","lastModifiedDate":"2022-08-16"},{"lineNumber":129,"author":{"gitId":"marcuspang"},"content":"            case \"delete\": {","lastModifiedDate":"2022-08-17"},{"lineNumber":130,"author":{"gitId":"marcuspang"},"content":"                // Tasks are displayed as 1-indexed, but they are stored as 0-indexed","lastModifiedDate":"2022-08-17"},{"lineNumber":131,"author":{"gitId":"marcuspang"},"content":"                // Hence, we need to account for this offset here","lastModifiedDate":"2022-08-17"},{"lineNumber":132,"author":{"gitId":"marcuspang"},"content":"                int taskIndex \u003d Integer.parseInt(inputStrings[1]) - 1;","lastModifiedDate":"2022-08-17"},{"lineNumber":133,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":134,"author":{"gitId":"marcuspang"},"content":"                sb.append(this.removeTask(taskIndex));","lastModifiedDate":"2022-08-24"},{"lineNumber":135,"author":{"gitId":"marcuspang"},"content":"                break;","lastModifiedDate":"2022-08-17"},{"lineNumber":136,"author":{"gitId":"marcuspang"},"content":"            }","lastModifiedDate":"2022-08-17"},{"lineNumber":137,"author":{"gitId":"marcuspang"},"content":"            default: {","lastModifiedDate":"2022-08-16"},{"lineNumber":138,"author":{"gitId":"marcuspang"},"content":"                throw new DukeException(\"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\");","lastModifiedDate":"2022-08-17"},{"lineNumber":139,"author":{"gitId":"marcuspang"},"content":"            }","lastModifiedDate":"2022-08-17"},{"lineNumber":140,"author":{"gitId":"marcuspang"},"content":"            }","lastModifiedDate":"2022-08-16"},{"lineNumber":141,"author":{"gitId":"marcuspang"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException exception) {","lastModifiedDate":"2022-08-17"},{"lineNumber":142,"author":{"gitId":"marcuspang"},"content":"            // Catches exceptions thrown when parsing integers in mark/unmark commands or","lastModifiedDate":"2022-08-17"},{"lineNumber":143,"author":{"gitId":"marcuspang"},"content":"            // when accessing invalid taskList index","lastModifiedDate":"2022-08-17"},{"lineNumber":144,"author":{"gitId":"marcuspang"},"content":"            sb.append(LONG_LINE).append(\"     ☹ OOPS!!! The index specified is invalid.\\n\").append(LONG_LINE);","lastModifiedDate":"2022-08-17"},{"lineNumber":145,"author":{"gitId":"marcuspang"},"content":"        } catch (DateTimeParseException exception) {","lastModifiedDate":"2022-08-24"},{"lineNumber":146,"author":{"gitId":"marcuspang"},"content":"            sb.append(LONG_LINE).append(\"     ☹ OOPS!!! The datetime specified is invalid, it should have the format \"","lastModifiedDate":"2022-08-24"},{"lineNumber":147,"author":{"gitId":"marcuspang"},"content":"                    + Task.DATE_TIME_INPUT_FORMAT + \"\\n\");","lastModifiedDate":"2022-08-24"},{"lineNumber":148,"author":{"gitId":"marcuspang"},"content":"        } catch (DukeException exception) {","lastModifiedDate":"2022-08-17"},{"lineNumber":149,"author":{"gitId":"marcuspang"},"content":"            // All DukeExceptions will be printed","lastModifiedDate":"2022-08-17"},{"lineNumber":150,"author":{"gitId":"marcuspang"},"content":"            sb.append(LONG_LINE).append(exception).append(LONG_LINE);","lastModifiedDate":"2022-08-17"},{"lineNumber":151,"author":{"gitId":"marcuspang"},"content":"        }","lastModifiedDate":"2022-08-15"},{"lineNumber":152,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-15"},{"lineNumber":153,"author":{"gitId":"marcuspang"},"content":"        // Print out response after executing command","lastModifiedDate":"2022-08-15"},{"lineNumber":154,"author":{"gitId":"marcuspang"},"content":"        System.out.println(sb);","lastModifiedDate":"2022-08-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":156,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":157,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":158,"author":{"gitId":"marcuspang"},"content":"     * Add task to the current task list, and returns the formatted response message to be printed to the","lastModifiedDate":"2022-08-24"},{"lineNumber":159,"author":{"gitId":"marcuspang"},"content":"     * console","lastModifiedDate":"2022-08-24"},{"lineNumber":160,"author":{"gitId":"marcuspang"},"content":"     *","lastModifiedDate":"2022-08-17"},{"lineNumber":161,"author":{"gitId":"marcuspang"},"content":"     * @param task The specified task.","lastModifiedDate":"2022-08-17"},{"lineNumber":162,"author":{"gitId":"marcuspang"},"content":"     * @return formatted message after adding a task.","lastModifiedDate":"2022-08-17"},{"lineNumber":163,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":164,"author":{"gitId":"marcuspang"},"content":"    public String addTask(Task task) {","lastModifiedDate":"2022-08-17"},{"lineNumber":165,"author":{"gitId":"marcuspang"},"content":"        this.taskStorage.addTask(task);","lastModifiedDate":"2022-08-24"},{"lineNumber":166,"author":{"gitId":"marcuspang"},"content":"        return LONG_LINE","lastModifiedDate":"2022-08-24"},{"lineNumber":167,"author":{"gitId":"marcuspang"},"content":"                + \"     Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2022-08-24"},{"lineNumber":168,"author":{"gitId":"marcuspang"},"content":"                + \"       \" + task + \"\\n\"","lastModifiedDate":"2022-08-24"},{"lineNumber":169,"author":{"gitId":"marcuspang"},"content":"                + \"     Now you have \" + this.taskStorage.size() + \" task(s) in the list.\\n\"","lastModifiedDate":"2022-08-24"},{"lineNumber":170,"author":{"gitId":"marcuspang"},"content":"                + LONG_LINE;","lastModifiedDate":"2022-08-24"},{"lineNumber":171,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":172,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":173,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":174,"author":{"gitId":"marcuspang"},"content":"     * Remove task from current task list, and returns the formatted response message to be printed to the","lastModifiedDate":"2022-08-24"},{"lineNumber":175,"author":{"gitId":"marcuspang"},"content":"     * console","lastModifiedDate":"2022-08-24"},{"lineNumber":176,"author":{"gitId":"marcuspang"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":177,"author":{"gitId":"marcuspang"},"content":"     * @param taskIndex The specified task index.","lastModifiedDate":"2022-08-24"},{"lineNumber":178,"author":{"gitId":"marcuspang"},"content":"     * @return formatted message after removing a task.","lastModifiedDate":"2022-08-24"},{"lineNumber":179,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":180,"author":{"gitId":"marcuspang"},"content":"    public String removeTask(int taskIndex) {","lastModifiedDate":"2022-08-24"},{"lineNumber":181,"author":{"gitId":"marcuspang"},"content":"        Task task \u003d this.taskStorage.removeTask(taskIndex);","lastModifiedDate":"2022-08-24"},{"lineNumber":182,"author":{"gitId":"marcuspang"},"content":"        return LONG_LINE","lastModifiedDate":"2022-08-24"},{"lineNumber":183,"author":{"gitId":"marcuspang"},"content":"                + \"     Noted. I\u0027ve removed this task:\\n\"","lastModifiedDate":"2022-08-24"},{"lineNumber":184,"author":{"gitId":"marcuspang"},"content":"                + \"       \" + task + \"\\n\"","lastModifiedDate":"2022-08-24"},{"lineNumber":185,"author":{"gitId":"marcuspang"},"content":"                + \"     Now you have \" + this.taskStorage.size() + \" task(s) in the list.\\n\"","lastModifiedDate":"2022-08-24"},{"lineNumber":186,"author":{"gitId":"marcuspang"},"content":"                + LONG_LINE;","lastModifiedDate":"2022-08-24"},{"lineNumber":187,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":188,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":5,"marcuspang":184}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcuspang"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":2,"author":{"gitId":"marcuspang"},"content":" * Custom exception only used in Duke chatbot","lastModifiedDate":"2022-08-24"},{"lineNumber":3,"author":{"gitId":"marcuspang"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":4,"author":{"gitId":"marcuspang"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-08-17"},{"lineNumber":5,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":6,"author":{"gitId":"marcuspang"},"content":"     * A DukeException will take some errorString which will be printed to","lastModifiedDate":"2022-08-24"},{"lineNumber":7,"author":{"gitId":"marcuspang"},"content":"     * the console if thrown","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"marcuspang"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":9,"author":{"gitId":"marcuspang"},"content":"     * @param errorString The specified error message to be displayed.","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":11,"author":{"gitId":"marcuspang"},"content":"    DukeException(String errorString) {","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"marcuspang"},"content":"        super(errorString);","lastModifiedDate":"2022-08-17"},{"lineNumber":13,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":14,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":15,"author":{"gitId":"marcuspang"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":16,"author":{"gitId":"marcuspang"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":17,"author":{"gitId":"marcuspang"},"content":"        return this.getMessage();","lastModifiedDate":"2022-08-17"},{"lineNumber":18,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":19,"author":{"gitId":"marcuspang"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"marcuspang":19}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcuspang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-24"},{"lineNumber":2,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":3,"author":{"gitId":"marcuspang"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":4,"author":{"gitId":"marcuspang"},"content":" * Represents an event, a type of task","lastModifiedDate":"2022-08-24"},{"lineNumber":5,"author":{"gitId":"marcuspang"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":6,"author":{"gitId":"marcuspang"},"content":"public class Event extends Task {","lastModifiedDate":"2022-08-16"},{"lineNumber":7,"author":{"gitId":"marcuspang"},"content":"    private final LocalDateTime timing;","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":9,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"marcuspang"},"content":"     * Constructs an event with some description and datetime for the event\u0027s start","lastModifiedDate":"2022-08-24"},{"lineNumber":11,"author":{"gitId":"marcuspang"},"content":"     * time","lastModifiedDate":"2022-08-24"},{"lineNumber":12,"author":{"gitId":"marcuspang"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":13,"author":{"gitId":"marcuspang"},"content":"     * @param description The specified description.","lastModifiedDate":"2022-08-24"},{"lineNumber":14,"author":{"gitId":"marcuspang"},"content":"     * @param isDone      The boolean indicating whether the task is done.","lastModifiedDate":"2022-08-24"},{"lineNumber":15,"author":{"gitId":"marcuspang"},"content":"     * @param timing      The specified datetime string for the start time.","lastModifiedDate":"2022-08-24"},{"lineNumber":16,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":17,"author":{"gitId":"marcuspang"},"content":"    Event(String description, boolean isDone, LocalDateTime timing) {","lastModifiedDate":"2022-08-24"},{"lineNumber":18,"author":{"gitId":"marcuspang"},"content":"        super(description, isDone);","lastModifiedDate":"2022-08-24"},{"lineNumber":19,"author":{"gitId":"marcuspang"},"content":"        this.timing \u003d timing;","lastModifiedDate":"2022-08-24"},{"lineNumber":20,"author":{"gitId":"marcuspang"},"content":"        this.taskType \u003d TaskType.E;","lastModifiedDate":"2022-08-24"},{"lineNumber":21,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":22,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":23,"author":{"gitId":"marcuspang"},"content":"    public String getTiming() {","lastModifiedDate":"2022-08-24"},{"lineNumber":24,"author":{"gitId":"marcuspang"},"content":"        return Task.dateTimeDisplayFormatter.format(this.timing);","lastModifiedDate":"2022-08-24"},{"lineNumber":25,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":26,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":27,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":28,"author":{"gitId":"marcuspang"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-08-24"},{"lineNumber":29,"author":{"gitId":"marcuspang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-08-24"},{"lineNumber":30,"author":{"gitId":"marcuspang"},"content":"     * Event has an additional datetime field for at","lastModifiedDate":"2022-08-24"},{"lineNumber":31,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":32,"author":{"gitId":"marcuspang"},"content":"    @Override","lastModifiedDate":"2022-08-24"},{"lineNumber":33,"author":{"gitId":"marcuspang"},"content":"    public String encode(String delimiter) {","lastModifiedDate":"2022-08-24"},{"lineNumber":34,"author":{"gitId":"marcuspang"},"content":"        return super.encode(delimiter) + delimiter + this.timing.format(Task.dateTimeParser);","lastModifiedDate":"2022-08-24"},{"lineNumber":35,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":36,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":37,"author":{"gitId":"marcuspang"},"content":"    @Override","lastModifiedDate":"2022-08-16"},{"lineNumber":38,"author":{"gitId":"marcuspang"},"content":"    public String toString() {","lastModifiedDate":"2022-08-16"},{"lineNumber":39,"author":{"gitId":"marcuspang"},"content":"        return super.toString() + \" (at: \" + this.getTiming() + \")\";","lastModifiedDate":"2022-08-24"},{"lineNumber":40,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":41,"author":{"gitId":"marcuspang"},"content":"}","lastModifiedDate":"2022-08-16"}],"authorContributionMap":{"marcuspang":41}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcuspang"},"content":"import java.io.File;","lastModifiedDate":"2022-08-24"},{"lineNumber":2,"author":{"gitId":"marcuspang"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-08-24"},{"lineNumber":3,"author":{"gitId":"marcuspang"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-24"},{"lineNumber":4,"author":{"gitId":"marcuspang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-24"},{"lineNumber":5,"author":{"gitId":"marcuspang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-24"},{"lineNumber":6,"author":{"gitId":"marcuspang"},"content":"import java.util.List;","lastModifiedDate":"2022-08-24"},{"lineNumber":7,"author":{"gitId":"marcuspang"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":9,"author":{"gitId":"marcuspang"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"marcuspang"},"content":" * Represents the current tasks in the chatbot, which loads data from the hard disk (if data exists) whenever Duke","lastModifiedDate":"2022-08-24"},{"lineNumber":11,"author":{"gitId":"marcuspang"},"content":" * starts up","lastModifiedDate":"2022-08-24"},{"lineNumber":12,"author":{"gitId":"marcuspang"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":13,"author":{"gitId":"marcuspang"},"content":"public class Storage {","lastModifiedDate":"2022-08-24"},{"lineNumber":14,"author":{"gitId":"marcuspang"},"content":"    // Used in the encoding of task data","lastModifiedDate":"2022-08-24"},{"lineNumber":15,"author":{"gitId":"marcuspang"},"content":"    public static final String DELIMITER \u003d \"|\";","lastModifiedDate":"2022-08-24"},{"lineNumber":16,"author":{"gitId":"marcuspang"},"content":"    private static final String STORAGE_FILE_PATH \u003d \"data/duke.txt\";","lastModifiedDate":"2022-08-24"},{"lineNumber":17,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":18,"author":{"gitId":"marcuspang"},"content":"    private final List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(100);","lastModifiedDate":"2022-08-24"},{"lineNumber":19,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":20,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":21,"author":{"gitId":"marcuspang"},"content":"     * Constructs a storage for the chatbot, which attempts to read from a local file and update the current task","lastModifiedDate":"2022-08-24"},{"lineNumber":22,"author":{"gitId":"marcuspang"},"content":"     * list to the tasks specified in the local file","lastModifiedDate":"2022-08-24"},{"lineNumber":23,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":24,"author":{"gitId":"marcuspang"},"content":"    Storage() {","lastModifiedDate":"2022-08-24"},{"lineNumber":25,"author":{"gitId":"marcuspang"},"content":"        try {","lastModifiedDate":"2022-08-24"},{"lineNumber":26,"author":{"gitId":"marcuspang"},"content":"            // Create storage file (and subdirectories) if they do not exist","lastModifiedDate":"2022-08-24"},{"lineNumber":27,"author":{"gitId":"marcuspang"},"content":"            File storageFile \u003d new File(STORAGE_FILE_PATH);","lastModifiedDate":"2022-08-24"},{"lineNumber":28,"author":{"gitId":"marcuspang"},"content":"            createFileAndSubdirectories(storageFile);","lastModifiedDate":"2022-08-24"},{"lineNumber":29,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":30,"author":{"gitId":"marcuspang"},"content":"            // Read the existing data in the storage file into the current task list","lastModifiedDate":"2022-08-24"},{"lineNumber":31,"author":{"gitId":"marcuspang"},"content":"            Scanner scanner \u003d new Scanner(storageFile);","lastModifiedDate":"2022-08-24"},{"lineNumber":32,"author":{"gitId":"marcuspang"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2022-08-24"},{"lineNumber":33,"author":{"gitId":"marcuspang"},"content":"                String taskData \u003d scanner.nextLine();","lastModifiedDate":"2022-08-24"},{"lineNumber":34,"author":{"gitId":"marcuspang"},"content":"                this.addTask(decodeTask(taskData));","lastModifiedDate":"2022-08-24"},{"lineNumber":35,"author":{"gitId":"marcuspang"},"content":"            }","lastModifiedDate":"2022-08-24"},{"lineNumber":36,"author":{"gitId":"marcuspang"},"content":"            scanner.close();","lastModifiedDate":"2022-08-24"},{"lineNumber":37,"author":{"gitId":"marcuspang"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2022-08-24"},{"lineNumber":38,"author":{"gitId":"marcuspang"},"content":"            exception.printStackTrace();","lastModifiedDate":"2022-08-24"},{"lineNumber":39,"author":{"gitId":"marcuspang"},"content":"        } catch (DukeException exception) {","lastModifiedDate":"2022-08-24"},{"lineNumber":40,"author":{"gitId":"marcuspang"},"content":"            System.out.println(exception.toString());","lastModifiedDate":"2022-08-24"},{"lineNumber":41,"author":{"gitId":"marcuspang"},"content":"        }","lastModifiedDate":"2022-08-24"},{"lineNumber":42,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":43,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":44,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":45,"author":{"gitId":"marcuspang"},"content":"     * Creates file and subdirectories leading to the file if they have not been created","lastModifiedDate":"2022-08-24"},{"lineNumber":46,"author":{"gitId":"marcuspang"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":47,"author":{"gitId":"marcuspang"},"content":"     * @param file The specified path to the file.","lastModifiedDate":"2022-08-24"},{"lineNumber":48,"author":{"gitId":"marcuspang"},"content":"     * @throws DukeException when a subdirectory or the file is unable to be created.","lastModifiedDate":"2022-08-24"},{"lineNumber":49,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":50,"author":{"gitId":"marcuspang"},"content":"    private static void createFileAndSubdirectories(File file) throws DukeException {","lastModifiedDate":"2022-08-24"},{"lineNumber":51,"author":{"gitId":"marcuspang"},"content":"        File parent \u003d file.getParentFile();","lastModifiedDate":"2022-08-24"},{"lineNumber":52,"author":{"gitId":"marcuspang"},"content":"        if (parent !\u003d null \u0026\u0026 !parent.exists() \u0026\u0026 !parent.mkdirs()) {","lastModifiedDate":"2022-08-24"},{"lineNumber":53,"author":{"gitId":"marcuspang"},"content":"            throw new DukeException(\"Unable to create storage file\");","lastModifiedDate":"2022-08-24"},{"lineNumber":54,"author":{"gitId":"marcuspang"},"content":"        }","lastModifiedDate":"2022-08-24"},{"lineNumber":55,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":56,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":57,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":58,"author":{"gitId":"marcuspang"},"content":"     * Decodes task from storage file and returns the corresponding task","lastModifiedDate":"2022-08-24"},{"lineNumber":59,"author":{"gitId":"marcuspang"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":60,"author":{"gitId":"marcuspang"},"content":"     * @param taskData The specified task data.","lastModifiedDate":"2022-08-24"},{"lineNumber":61,"author":{"gitId":"marcuspang"},"content":"     * @return The corresponding task based on the taskData.","lastModifiedDate":"2022-08-24"},{"lineNumber":62,"author":{"gitId":"marcuspang"},"content":"     * @throws DukeException when the values of the tasks are not valid.","lastModifiedDate":"2022-08-24"},{"lineNumber":63,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":64,"author":{"gitId":"marcuspang"},"content":"    public static Task decodeTask(String taskData) throws DukeException {","lastModifiedDate":"2022-08-24"},{"lineNumber":65,"author":{"gitId":"marcuspang"},"content":"        // Backslashes in split method is necessary as | is a metacharacter in regex","lastModifiedDate":"2022-08-24"},{"lineNumber":66,"author":{"gitId":"marcuspang"},"content":"        String[] taskValues \u003d taskData.split(\"\\\\|\", 4);","lastModifiedDate":"2022-08-24"},{"lineNumber":67,"author":{"gitId":"marcuspang"},"content":"        Task decodedTask \u003d null;","lastModifiedDate":"2022-08-24"},{"lineNumber":68,"author":{"gitId":"marcuspang"},"content":"        switch (taskValues[0]) {","lastModifiedDate":"2022-08-24"},{"lineNumber":69,"author":{"gitId":"marcuspang"},"content":"        case \"T\": {","lastModifiedDate":"2022-08-24"},{"lineNumber":70,"author":{"gitId":"marcuspang"},"content":"            if (taskValues.length !\u003d 3) {","lastModifiedDate":"2022-08-24"},{"lineNumber":71,"author":{"gitId":"marcuspang"},"content":"                throw new DukeException(\"     ☹ OOPS!!! Invalid format for todo.\\n\" + taskData);","lastModifiedDate":"2022-08-24"},{"lineNumber":72,"author":{"gitId":"marcuspang"},"content":"            }","lastModifiedDate":"2022-08-24"},{"lineNumber":73,"author":{"gitId":"marcuspang"},"content":"            decodedTask \u003d new Todo(taskValues[2], taskValues[1].equals(\"1\"));","lastModifiedDate":"2022-08-24"},{"lineNumber":74,"author":{"gitId":"marcuspang"},"content":"            break;","lastModifiedDate":"2022-08-24"},{"lineNumber":75,"author":{"gitId":"marcuspang"},"content":"        }","lastModifiedDate":"2022-08-24"},{"lineNumber":76,"author":{"gitId":"marcuspang"},"content":"        case \"D\": {","lastModifiedDate":"2022-08-24"},{"lineNumber":77,"author":{"gitId":"marcuspang"},"content":"            if (taskValues.length !\u003d 4) {","lastModifiedDate":"2022-08-24"},{"lineNumber":78,"author":{"gitId":"marcuspang"},"content":"                throw new DukeException(\"     ☹ OOPS!!! Invalid format for deadline.\\n\" + taskData);","lastModifiedDate":"2022-08-24"},{"lineNumber":79,"author":{"gitId":"marcuspang"},"content":"            }","lastModifiedDate":"2022-08-24"},{"lineNumber":80,"author":{"gitId":"marcuspang"},"content":"            decodedTask \u003d new Deadline(taskValues[2], taskValues[1].equals(\"1\"), LocalDateTime.parse(taskValues[3],","lastModifiedDate":"2022-08-24"},{"lineNumber":81,"author":{"gitId":"marcuspang"},"content":"                    Task.dateTimeParser));","lastModifiedDate":"2022-08-24"},{"lineNumber":82,"author":{"gitId":"marcuspang"},"content":"            break;","lastModifiedDate":"2022-08-24"},{"lineNumber":83,"author":{"gitId":"marcuspang"},"content":"        }","lastModifiedDate":"2022-08-24"},{"lineNumber":84,"author":{"gitId":"marcuspang"},"content":"        case \"E\": {","lastModifiedDate":"2022-08-24"},{"lineNumber":85,"author":{"gitId":"marcuspang"},"content":"            if (taskValues.length !\u003d 4) {","lastModifiedDate":"2022-08-24"},{"lineNumber":86,"author":{"gitId":"marcuspang"},"content":"                throw new DukeException(\"     ☹ OOPS!!! Invalid format for event.\\n\" + taskData);","lastModifiedDate":"2022-08-24"},{"lineNumber":87,"author":{"gitId":"marcuspang"},"content":"            }","lastModifiedDate":"2022-08-24"},{"lineNumber":88,"author":{"gitId":"marcuspang"},"content":"            decodedTask \u003d new Event(taskValues[2], taskValues[1].equals(\"1\"), LocalDateTime.parse(taskValues[3],","lastModifiedDate":"2022-08-24"},{"lineNumber":89,"author":{"gitId":"marcuspang"},"content":"                    Task.dateTimeParser));","lastModifiedDate":"2022-08-24"},{"lineNumber":90,"author":{"gitId":"marcuspang"},"content":"            break;","lastModifiedDate":"2022-08-24"},{"lineNumber":91,"author":{"gitId":"marcuspang"},"content":"        }","lastModifiedDate":"2022-08-24"},{"lineNumber":92,"author":{"gitId":"marcuspang"},"content":"        }","lastModifiedDate":"2022-08-24"},{"lineNumber":93,"author":{"gitId":"marcuspang"},"content":"        return decodedTask;","lastModifiedDate":"2022-08-24"},{"lineNumber":94,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":95,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":96,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":97,"author":{"gitId":"marcuspang"},"content":"     * Overwrites the data inside the storage file with the current task list","lastModifiedDate":"2022-08-24"},{"lineNumber":98,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":99,"author":{"gitId":"marcuspang"},"content":"    public void saveTasks() {","lastModifiedDate":"2022-08-24"},{"lineNumber":100,"author":{"gitId":"marcuspang"},"content":"        try {","lastModifiedDate":"2022-08-24"},{"lineNumber":101,"author":{"gitId":"marcuspang"},"content":"            File storageFile \u003d new File(STORAGE_FILE_PATH);","lastModifiedDate":"2022-08-24"},{"lineNumber":102,"author":{"gitId":"marcuspang"},"content":"            createFileAndSubdirectories(storageFile);","lastModifiedDate":"2022-08-24"},{"lineNumber":103,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":104,"author":{"gitId":"marcuspang"},"content":"            FileWriter fileWriter \u003d new FileWriter(storageFile, false);","lastModifiedDate":"2022-08-24"},{"lineNumber":105,"author":{"gitId":"marcuspang"},"content":"            for (Task task : this.taskList) {","lastModifiedDate":"2022-08-24"},{"lineNumber":106,"author":{"gitId":"marcuspang"},"content":"                fileWriter.write(task.encode(DELIMITER) + \"\\n\");","lastModifiedDate":"2022-08-24"},{"lineNumber":107,"author":{"gitId":"marcuspang"},"content":"            }","lastModifiedDate":"2022-08-24"},{"lineNumber":108,"author":{"gitId":"marcuspang"},"content":"            fileWriter.close();","lastModifiedDate":"2022-08-24"},{"lineNumber":109,"author":{"gitId":"marcuspang"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2022-08-24"},{"lineNumber":110,"author":{"gitId":"marcuspang"},"content":"            exception.printStackTrace();","lastModifiedDate":"2022-08-24"},{"lineNumber":111,"author":{"gitId":"marcuspang"},"content":"        } catch (DukeException exception) {","lastModifiedDate":"2022-08-24"},{"lineNumber":112,"author":{"gitId":"marcuspang"},"content":"            System.out.println(exception.toString());","lastModifiedDate":"2022-08-24"},{"lineNumber":113,"author":{"gitId":"marcuspang"},"content":"        }","lastModifiedDate":"2022-08-24"},{"lineNumber":114,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":115,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":116,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":117,"author":{"gitId":"marcuspang"},"content":"     * Retrieves the size of the current task list","lastModifiedDate":"2022-08-24"},{"lineNumber":118,"author":{"gitId":"marcuspang"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":119,"author":{"gitId":"marcuspang"},"content":"     * @return The size of the current task list","lastModifiedDate":"2022-08-24"},{"lineNumber":120,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":121,"author":{"gitId":"marcuspang"},"content":"    public int size() {","lastModifiedDate":"2022-08-24"},{"lineNumber":122,"author":{"gitId":"marcuspang"},"content":"        return this.taskList.size();","lastModifiedDate":"2022-08-24"},{"lineNumber":123,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":124,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":125,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":126,"author":{"gitId":"marcuspang"},"content":"     * Retrieves the task at a given index.","lastModifiedDate":"2022-08-24"},{"lineNumber":127,"author":{"gitId":"marcuspang"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":128,"author":{"gitId":"marcuspang"},"content":"     * @param index The specified index.","lastModifiedDate":"2022-08-24"},{"lineNumber":129,"author":{"gitId":"marcuspang"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2022-08-24"},{"lineNumber":130,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":131,"author":{"gitId":"marcuspang"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2022-08-24"},{"lineNumber":132,"author":{"gitId":"marcuspang"},"content":"        return this.taskList.get(index);","lastModifiedDate":"2022-08-24"},{"lineNumber":133,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":134,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":135,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":136,"author":{"gitId":"marcuspang"},"content":"     * Removes the task at a given index.","lastModifiedDate":"2022-08-24"},{"lineNumber":137,"author":{"gitId":"marcuspang"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":138,"author":{"gitId":"marcuspang"},"content":"     * @param index The specified index.","lastModifiedDate":"2022-08-24"},{"lineNumber":139,"author":{"gitId":"marcuspang"},"content":"     * @return The removed task.","lastModifiedDate":"2022-08-24"},{"lineNumber":140,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":141,"author":{"gitId":"marcuspang"},"content":"    public Task removeTask(int index) {","lastModifiedDate":"2022-08-24"},{"lineNumber":142,"author":{"gitId":"marcuspang"},"content":"        return this.taskList.remove(index);","lastModifiedDate":"2022-08-24"},{"lineNumber":143,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":144,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":145,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":146,"author":{"gitId":"marcuspang"},"content":"     * Adds task to the current task list","lastModifiedDate":"2022-08-24"},{"lineNumber":147,"author":{"gitId":"marcuspang"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":148,"author":{"gitId":"marcuspang"},"content":"     * @param task The specified task.","lastModifiedDate":"2022-08-24"},{"lineNumber":149,"author":{"gitId":"marcuspang"},"content":"     * @return Boolean of whether the task was added successfully.","lastModifiedDate":"2022-08-24"},{"lineNumber":150,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":151,"author":{"gitId":"marcuspang"},"content":"    public boolean addTask(Task task) {","lastModifiedDate":"2022-08-24"},{"lineNumber":152,"author":{"gitId":"marcuspang"},"content":"        return this.taskList.add(task);","lastModifiedDate":"2022-08-24"},{"lineNumber":153,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":154,"author":{"gitId":"marcuspang"},"content":"}","lastModifiedDate":"2022-08-24"}],"authorContributionMap":{"marcuspang":154}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcuspang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-24"},{"lineNumber":2,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":3,"author":{"gitId":"marcuspang"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":4,"author":{"gitId":"marcuspang"},"content":" * Represents a Task, which can be marked done / not done, along with some","lastModifiedDate":"2022-08-24"},{"lineNumber":5,"author":{"gitId":"marcuspang"},"content":" * description","lastModifiedDate":"2022-08-24"},{"lineNumber":6,"author":{"gitId":"marcuspang"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":7,"author":{"gitId":"marcuspang"},"content":"public abstract class Task {","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"marcuspang"},"content":"    public static final String DATE_TIME_INPUT_FORMAT \u003d \"yyyy-MM-dd HH:mm\";","lastModifiedDate":"2022-08-24"},{"lineNumber":9,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"marcuspang"},"content":"    public static final DateTimeFormatter dateTimeParser \u003d DateTimeFormatter.ofPattern(DATE_TIME_INPUT_FORMAT);","lastModifiedDate":"2022-08-24"},{"lineNumber":11,"author":{"gitId":"marcuspang"},"content":"    public static final DateTimeFormatter dateTimeDisplayFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2022-08-24"},{"lineNumber":12,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":13,"author":{"gitId":"marcuspang"},"content":"    protected final String description;","lastModifiedDate":"2022-08-15"},{"lineNumber":14,"author":{"gitId":"marcuspang"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-08-15"},{"lineNumber":15,"author":{"gitId":"marcuspang"},"content":"    protected TaskType taskType;","lastModifiedDate":"2022-08-24"},{"lineNumber":16,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-15"},{"lineNumber":17,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":18,"author":{"gitId":"marcuspang"},"content":"     * Constructor for task that takes in some description to identify the task","lastModifiedDate":"2022-08-24"},{"lineNumber":19,"author":{"gitId":"marcuspang"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":20,"author":{"gitId":"marcuspang"},"content":"     * @param description The specified description.","lastModifiedDate":"2022-08-24"},{"lineNumber":21,"author":{"gitId":"marcuspang"},"content":"     * @param isDone      The boolean indicating whether the task is done.","lastModifiedDate":"2022-08-24"},{"lineNumber":22,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":23,"author":{"gitId":"marcuspang"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2022-08-24"},{"lineNumber":24,"author":{"gitId":"marcuspang"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-08-15"},{"lineNumber":25,"author":{"gitId":"marcuspang"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-08-24"},{"lineNumber":26,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-15"},{"lineNumber":27,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-15"},{"lineNumber":28,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":29,"author":{"gitId":"marcuspang"},"content":"     * Marks the current task done","lastModifiedDate":"2022-08-24"},{"lineNumber":30,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":31,"author":{"gitId":"marcuspang"},"content":"    public void markTask() {","lastModifiedDate":"2022-08-15"},{"lineNumber":32,"author":{"gitId":"marcuspang"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-08-15"},{"lineNumber":33,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-15"},{"lineNumber":34,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-15"},{"lineNumber":35,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":36,"author":{"gitId":"marcuspang"},"content":"     * Marks the current task not done","lastModifiedDate":"2022-08-24"},{"lineNumber":37,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":38,"author":{"gitId":"marcuspang"},"content":"    public void unmarkTask() {","lastModifiedDate":"2022-08-15"},{"lineNumber":39,"author":{"gitId":"marcuspang"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-15"},{"lineNumber":40,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-15"},{"lineNumber":41,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-15"},{"lineNumber":42,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":43,"author":{"gitId":"marcuspang"},"content":"     * Returns whether the task is done / not done, tasks that are done will be","lastModifiedDate":"2022-08-24"},{"lineNumber":44,"author":{"gitId":"marcuspang"},"content":"     * marked with \"X\"","lastModifiedDate":"2022-08-24"},{"lineNumber":45,"author":{"gitId":"marcuspang"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":46,"author":{"gitId":"marcuspang"},"content":"     * @return The status icon representing whether the task is done / not done.","lastModifiedDate":"2022-08-24"},{"lineNumber":47,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":48,"author":{"gitId":"marcuspang"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-08-15"},{"lineNumber":49,"author":{"gitId":"marcuspang"},"content":"        return this.isDone ? \"X\" : \" \";","lastModifiedDate":"2022-08-15"},{"lineNumber":50,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-15"},{"lineNumber":51,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-15"},{"lineNumber":52,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":53,"author":{"gitId":"marcuspang"},"content":"     * Converts the task into a String where each field is delimited by some","lastModifiedDate":"2022-08-24"},{"lineNumber":54,"author":{"gitId":"marcuspang"},"content":"     * delimiter","lastModifiedDate":"2022-08-24"},{"lineNumber":55,"author":{"gitId":"marcuspang"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":56,"author":{"gitId":"marcuspang"},"content":"     * @param delimiter The specified delimiter.","lastModifiedDate":"2022-08-24"},{"lineNumber":57,"author":{"gitId":"marcuspang"},"content":"     * @return The values of the task fields delimited by delimiter.","lastModifiedDate":"2022-08-24"},{"lineNumber":58,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":59,"author":{"gitId":"marcuspang"},"content":"    public String encode(String delimiter) {","lastModifiedDate":"2022-08-24"},{"lineNumber":60,"author":{"gitId":"marcuspang"},"content":"        return this.taskType + delimiter + (this.isDone ? \"1\" : \"0\") + delimiter + this.description;","lastModifiedDate":"2022-08-24"},{"lineNumber":61,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":62,"author":{"gitId":"marcuspang"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":63,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":64,"author":{"gitId":"marcuspang"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-08-24"},{"lineNumber":65,"author":{"gitId":"marcuspang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-08-24"},{"lineNumber":66,"author":{"gitId":"marcuspang"},"content":"     * Returns the string formatted display of a task, with its status icon, task","lastModifiedDate":"2022-08-24"},{"lineNumber":67,"author":{"gitId":"marcuspang"},"content":"     * type, and description","lastModifiedDate":"2022-08-24"},{"lineNumber":68,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":69,"author":{"gitId":"marcuspang"},"content":"    @Override","lastModifiedDate":"2022-08-15"},{"lineNumber":70,"author":{"gitId":"marcuspang"},"content":"    public String toString() {","lastModifiedDate":"2022-08-15"},{"lineNumber":71,"author":{"gitId":"marcuspang"},"content":"        return \"[\" + this.taskType + \"] [\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2022-08-24"},{"lineNumber":72,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-15"},{"lineNumber":73,"author":{"gitId":"marcuspang"},"content":"}","lastModifiedDate":"2022-08-15"}],"authorContributionMap":{"marcuspang":73}},{"path":"src/main/java/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcuspang"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":2,"author":{"gitId":"marcuspang"},"content":" * An enum used to distinguish between different task types","lastModifiedDate":"2022-08-24"},{"lineNumber":3,"author":{"gitId":"marcuspang"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":4,"author":{"gitId":"marcuspang"},"content":"public enum TaskType {","lastModifiedDate":"2022-08-17"},{"lineNumber":5,"author":{"gitId":"marcuspang"},"content":"    T, // Todo","lastModifiedDate":"2022-08-17"},{"lineNumber":6,"author":{"gitId":"marcuspang"},"content":"    D, // Deadline","lastModifiedDate":"2022-08-17"},{"lineNumber":7,"author":{"gitId":"marcuspang"},"content":"    E // Event","lastModifiedDate":"2022-08-17"},{"lineNumber":8,"author":{"gitId":"marcuspang"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"marcuspang":8}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcuspang"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":2,"author":{"gitId":"marcuspang"},"content":" * Represents a todo, a type of task","lastModifiedDate":"2022-08-24"},{"lineNumber":3,"author":{"gitId":"marcuspang"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":4,"author":{"gitId":"marcuspang"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-08-16"},{"lineNumber":5,"author":{"gitId":"marcuspang"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":6,"author":{"gitId":"marcuspang"},"content":"     * Constructs a todo with the specified description","lastModifiedDate":"2022-08-24"},{"lineNumber":7,"author":{"gitId":"marcuspang"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"marcuspang"},"content":"     * @param description The specified description.","lastModifiedDate":"2022-08-24"},{"lineNumber":9,"author":{"gitId":"marcuspang"},"content":"     * @param isDone      The boolean indicating whether the task is done.","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"marcuspang"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":11,"author":{"gitId":"marcuspang"},"content":"    Todo(String description, boolean isDone) {","lastModifiedDate":"2022-08-24"},{"lineNumber":12,"author":{"gitId":"marcuspang"},"content":"        super(description, isDone);","lastModifiedDate":"2022-08-24"},{"lineNumber":13,"author":{"gitId":"marcuspang"},"content":"        this.taskType \u003d TaskType.T;","lastModifiedDate":"2022-08-24"},{"lineNumber":14,"author":{"gitId":"marcuspang"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":15,"author":{"gitId":"marcuspang"},"content":"}","lastModifiedDate":"2022-08-16"}],"authorContributionMap":{"marcuspang":15}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"marcuspang"},"content":"todo read book","lastModifiedDate":"2022-08-16"},{"lineNumber":2,"author":{"gitId":"marcuspang"},"content":"deadline return book /by June 6th","lastModifiedDate":"2022-08-16"},{"lineNumber":3,"author":{"gitId":"marcuspang"},"content":"event project meeting /at Aug 6th 2-4pm","lastModifiedDate":"2022-08-16"},{"lineNumber":4,"author":{"gitId":"marcuspang"},"content":"todo join sports club","lastModifiedDate":"2022-08-16"},{"lineNumber":5,"author":{"gitId":"marcuspang"},"content":"mark 1","lastModifiedDate":"2022-08-16"},{"lineNumber":6,"author":{"gitId":"marcuspang"},"content":"mark 4","lastModifiedDate":"2022-08-16"},{"lineNumber":7,"author":{"gitId":"marcuspang"},"content":"todo borrow book","lastModifiedDate":"2022-08-16"},{"lineNumber":8,"author":{"gitId":"marcuspang"},"content":"list","lastModifiedDate":"2022-08-16"},{"lineNumber":9,"author":{"gitId":"marcuspang"},"content":"deadline return book /by Sunday","lastModifiedDate":"2022-08-16"},{"lineNumber":10,"author":{"gitId":"marcuspang"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2022-08-16"},{"lineNumber":11,"author":{"gitId":"marcuspang"},"content":"bye","lastModifiedDate":"2022-08-16"}],"authorContributionMap":{"marcuspang":11}}]
