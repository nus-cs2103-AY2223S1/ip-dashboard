[{"path":"src/main/java/Commands.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ngxingyu"},"content":"public enum Commands {","lastModifiedDate":"2022-08-18"},{"lineNumber":2,"author":{"gitId":"ngxingyu"},"content":"    TODO(\"todo\"), EVENT(\"event\"), DEADLINE(\"deadline\"), MARK(\"mark\"),","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"ngxingyu"},"content":"            UNMARK(\"unmark\"), DELETE(\"delete\"), LIST(\"list\"), BYE(\"bye\");","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"ngxingyu"},"content":"    public final String command;","lastModifiedDate":"2022-08-18"},{"lineNumber":5,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":6,"author":{"gitId":"ngxingyu"},"content":"    Commands(String command) {","lastModifiedDate":"2022-08-18"},{"lineNumber":7,"author":{"gitId":"ngxingyu"},"content":"        this.command \u003d command;","lastModifiedDate":"2022-08-18"},{"lineNumber":8,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":9,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":10,"author":{"gitId":"ngxingyu"},"content":"    public static Commands getCommand(String command) throws IllegalArgumentException {","lastModifiedDate":"2022-08-18"},{"lineNumber":11,"author":{"gitId":"ngxingyu"},"content":"        for (Commands c : Commands.values()) {","lastModifiedDate":"2022-08-18"},{"lineNumber":12,"author":{"gitId":"ngxingyu"},"content":"            if (c.command.compareToIgnoreCase(command) \u003d\u003d 0) {","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"ngxingyu"},"content":"                return c;","lastModifiedDate":"2022-08-18"},{"lineNumber":14,"author":{"gitId":"ngxingyu"},"content":"            }","lastModifiedDate":"2022-08-18"},{"lineNumber":15,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-18"},{"lineNumber":16,"author":{"gitId":"ngxingyu"},"content":"        throw new IllegalArgumentException(\"Invalid command\");","lastModifiedDate":"2022-08-18"},{"lineNumber":17,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":18,"author":{"gitId":"ngxingyu"},"content":"}","lastModifiedDate":"2022-08-18"}],"authorContributionMap":{"ngxingyu":18}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ngxingyu"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"ngxingyu"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"ngxingyu"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"ngxingyu"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-08-13"},{"lineNumber":6,"author":{"gitId":"ngxingyu"},"content":"    protected LocalDate by;","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":8,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"ngxingyu"},"content":"     * Constructs a new Deadline task.","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"ngxingyu"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"ngxingyu"},"content":"     * @param description description of the task","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"ngxingyu"},"content":"     * @param by          the deadline of the task.","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"ngxingyu"},"content":"    public Deadline(String description, String by) throws DukeException {","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"ngxingyu"},"content":"        super(description);","lastModifiedDate":"2022-08-13"},{"lineNumber":16,"author":{"gitId":"ngxingyu"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"ngxingyu"},"content":"            this.by \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"ngxingyu"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"ngxingyu"},"content":"            throw new DukeException(\"%s does not match the required dd/MM/yyyy HH:mm format\", by);","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":22,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":23,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"ngxingyu"},"content":"     * Factory method to create a Deadline task from an encoded string.","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"ngxingyu"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"ngxingyu"},"content":"     * @param encodedInput the encoded entry with format deadline|description","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"ngxingyu"},"content":"     * @param completed    the completion status of the Deadline task","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"ngxingyu"},"content":"     * @return the Deadline task","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"ngxingyu"},"content":"    public static Deadline decode(String encodedInput, boolean completed) throws DukeException {","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"ngxingyu"},"content":"        String[] entries \u003d encodedInput.split(\"\\\\|\", 2);","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"ngxingyu"},"content":"        Deadline deadline \u003d new Deadline(entries[1], entries[0]);","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"ngxingyu"},"content":"        deadline.setDone(completed);","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"ngxingyu"},"content":"        return deadline;","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"ngxingyu"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"ngxingyu"},"content":"    public Type getType() {","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"ngxingyu"},"content":"        return Type.DEADLINE;","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":41,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":42,"author":{"gitId":"ngxingyu"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":43,"author":{"gitId":"ngxingyu"},"content":"    public String encodeData() {","lastModifiedDate":"2022-08-21"},{"lineNumber":44,"author":{"gitId":"ngxingyu"},"content":"        return String.format(\"%s|%s\", by.toString(), this.description);","lastModifiedDate":"2022-08-21"},{"lineNumber":45,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":46,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":47,"author":{"gitId":"ngxingyu"},"content":"    @Override","lastModifiedDate":"2022-08-13"},{"lineNumber":48,"author":{"gitId":"ngxingyu"},"content":"    public String getDisplayText() {","lastModifiedDate":"2022-08-21"},{"lineNumber":49,"author":{"gitId":"ngxingyu"},"content":"        return String.format(\"%s (by: %s)\", description, by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));","lastModifiedDate":"2022-08-21"},{"lineNumber":50,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":51,"author":{"gitId":"ngxingyu"},"content":"}","lastModifiedDate":"2022-08-13"}],"authorContributionMap":{"ngxingyu":51}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ngxingyu"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-13"},{"lineNumber":2,"author":{"gitId":"ngxingyu"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-12"},{"lineNumber":3,"author":{"gitId":"ngxingyu"},"content":"import java.util.stream.IntStream;","lastModifiedDate":"2022-08-13"},{"lineNumber":4,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-12"},{"lineNumber":5,"author":{"gitId":"ngxingyu"},"content":"import static java.lang.Integer.parseInt;","lastModifiedDate":"2022-08-13"},{"lineNumber":6,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"ngxingyu"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2022-08-13"},{"lineNumber":9,"author":{"gitId":"ngxingyu"},"content":"    private final Storage storage;","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-12"},{"lineNumber":11,"author":{"gitId":"ngxingyu"},"content":"    public Duke(String name) {","lastModifiedDate":"2022-08-12"},{"lineNumber":12,"author":{"gitId":"ngxingyu"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(100);","lastModifiedDate":"2022-08-13"},{"lineNumber":13,"author":{"gitId":"ngxingyu"},"content":"        String fileName \u003d \"tasks.txt\";","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"ngxingyu"},"content":"        Storage storage;","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"ngxingyu"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"ngxingyu"},"content":"            storage \u003d new Storage(fileName);","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"ngxingyu"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"ngxingyu"},"content":"            this.speak(\"Unable to save tasks to disk.\");","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"ngxingyu"},"content":"            storage \u003d null;","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"ngxingyu"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"ngxingyu"},"content":"        if (storage !\u003d null) {","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"ngxingyu"},"content":"            try {","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"ngxingyu"},"content":"                ArrayList\u003cTask\u003e tasksFromFile \u003d this.storage.loadTasks();","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"ngxingyu"},"content":"                if (tasksFromFile.size() \u003e 0) {","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"ngxingyu"},"content":"                    this.tasks.addAll(tasksFromFile);","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"ngxingyu"},"content":"                    this.speak(\"%d tasks loaded from file.\", tasksFromFile.size());","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"ngxingyu"},"content":"                }","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"ngxingyu"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"ngxingyu"},"content":"                this.speak(e.getMessage());","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"ngxingyu"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"ngxingyu"},"content":"        speak(\"Hello! I\u0027m %s\\nWhat do you need to do?\", name);","lastModifiedDate":"2022-08-13"},{"lineNumber":36,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-12"},{"lineNumber":37,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":39,"author":{"gitId":"ngxingyu"},"content":"        Duke duke \u003d new Duke(\"Duke\");","lastModifiedDate":"2022-08-12"},{"lineNumber":40,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-12"},{"lineNumber":41,"author":{"gitId":"ngxingyu"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2022-08-12"},{"lineNumber":42,"author":{"gitId":"ngxingyu"},"content":"        while (true) {","lastModifiedDate":"2022-08-12"},{"lineNumber":43,"author":{"gitId":"ngxingyu"},"content":"            String command \u003d sc.next();","lastModifiedDate":"2022-08-13"},{"lineNumber":44,"author":{"gitId":"ngxingyu"},"content":"            String arguments \u003d sc.nextLine();","lastModifiedDate":"2022-08-13"},{"lineNumber":45,"author":{"gitId":"ngxingyu"},"content":"            if (!duke.callback(command, arguments)) {","lastModifiedDate":"2022-08-13"},{"lineNumber":46,"author":{"gitId":"ngxingyu"},"content":"                break;","lastModifiedDate":"2022-08-12"},{"lineNumber":47,"author":{"gitId":"ngxingyu"},"content":"            }","lastModifiedDate":"2022-08-12"},{"lineNumber":48,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-12"},{"lineNumber":49,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-12"},{"lineNumber":50,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-12"},{"lineNumber":51,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-13"},{"lineNumber":52,"author":{"gitId":"ngxingyu"},"content":"     * Callback for all commands.","lastModifiedDate":"2022-08-13"},{"lineNumber":53,"author":{"gitId":"ngxingyu"},"content":"     *","lastModifiedDate":"2022-08-13"},{"lineNumber":54,"author":{"gitId":"ngxingyu"},"content":"     * @param command First word of user input","lastModifiedDate":"2022-08-13"},{"lineNumber":55,"author":{"gitId":"ngxingyu"},"content":"     * @param input   Remaining words of user input","lastModifiedDate":"2022-08-13"},{"lineNumber":56,"author":{"gitId":"ngxingyu"},"content":"     * @return Whether the program should continue running.","lastModifiedDate":"2022-08-13"},{"lineNumber":57,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-13"},{"lineNumber":58,"author":{"gitId":"ngxingyu"},"content":"    private boolean callback(String command, String input) {","lastModifiedDate":"2022-08-13"},{"lineNumber":59,"author":{"gitId":"ngxingyu"},"content":"        input \u003d input.strip();","lastModifiedDate":"2022-08-13"},{"lineNumber":60,"author":{"gitId":"ngxingyu"},"content":"        try {","lastModifiedDate":"2022-08-13"},{"lineNumber":61,"author":{"gitId":"ngxingyu"},"content":"            try {","lastModifiedDate":"2022-08-18"},{"lineNumber":62,"author":{"gitId":"ngxingyu"},"content":"                switch (Commands.getCommand(command)) {","lastModifiedDate":"2022-08-21"},{"lineNumber":63,"author":{"gitId":"ngxingyu"},"content":"                    case BYE:","lastModifiedDate":"2022-08-18"},{"lineNumber":64,"author":{"gitId":"ngxingyu"},"content":"                        goodbye();","lastModifiedDate":"2022-08-12"},{"lineNumber":65,"author":{"gitId":"ngxingyu"},"content":"                        return false;","lastModifiedDate":"2022-08-12"},{"lineNumber":66,"author":{"gitId":"ngxingyu"},"content":"                    case LIST:","lastModifiedDate":"2022-08-18"},{"lineNumber":67,"author":{"gitId":"ngxingyu"},"content":"                        listHistory();","lastModifiedDate":"2022-08-13"},{"lineNumber":68,"author":{"gitId":"ngxingyu"},"content":"                        break;","lastModifiedDate":"2022-08-13"},{"lineNumber":69,"author":{"gitId":"ngxingyu"},"content":"                    case TODO:","lastModifiedDate":"2022-08-18"},{"lineNumber":70,"author":{"gitId":"ngxingyu"},"content":"                        addTodo(input);","lastModifiedDate":"2022-08-13"},{"lineNumber":71,"author":{"gitId":"ngxingyu"},"content":"                        break;","lastModifiedDate":"2022-08-13"},{"lineNumber":72,"author":{"gitId":"ngxingyu"},"content":"                    case EVENT:","lastModifiedDate":"2022-08-18"},{"lineNumber":73,"author":{"gitId":"ngxingyu"},"content":"                        addEvent(input);","lastModifiedDate":"2022-08-13"},{"lineNumber":74,"author":{"gitId":"ngxingyu"},"content":"                        break;","lastModifiedDate":"2022-08-13"},{"lineNumber":75,"author":{"gitId":"ngxingyu"},"content":"                    case DEADLINE:","lastModifiedDate":"2022-08-18"},{"lineNumber":76,"author":{"gitId":"ngxingyu"},"content":"                        addDeadline(input);","lastModifiedDate":"2022-08-13"},{"lineNumber":77,"author":{"gitId":"ngxingyu"},"content":"                        break;","lastModifiedDate":"2022-08-13"},{"lineNumber":78,"author":{"gitId":"ngxingyu"},"content":"                    case MARK:","lastModifiedDate":"2022-08-18"},{"lineNumber":79,"author":{"gitId":"ngxingyu"},"content":"                        setTaskCompletionStatus(input, true);","lastModifiedDate":"2022-08-13"},{"lineNumber":80,"author":{"gitId":"ngxingyu"},"content":"                        break;","lastModifiedDate":"2022-08-13"},{"lineNumber":81,"author":{"gitId":"ngxingyu"},"content":"                    case UNMARK:","lastModifiedDate":"2022-08-18"},{"lineNumber":82,"author":{"gitId":"ngxingyu"},"content":"                        setTaskCompletionStatus(input, false);","lastModifiedDate":"2022-08-13"},{"lineNumber":83,"author":{"gitId":"ngxingyu"},"content":"                        break;","lastModifiedDate":"2022-08-13"},{"lineNumber":84,"author":{"gitId":"ngxingyu"},"content":"                    case DELETE:","lastModifiedDate":"2022-08-18"},{"lineNumber":85,"author":{"gitId":"ngxingyu"},"content":"                        delete(input);","lastModifiedDate":"2022-08-13"},{"lineNumber":86,"author":{"gitId":"ngxingyu"},"content":"                        break;","lastModifiedDate":"2022-08-13"},{"lineNumber":87,"author":{"gitId":"ngxingyu"},"content":"                }","lastModifiedDate":"2022-08-18"},{"lineNumber":88,"author":{"gitId":"ngxingyu"},"content":"            } catch (IllegalArgumentException e) {","lastModifiedDate":"2022-08-18"},{"lineNumber":89,"author":{"gitId":"ngxingyu"},"content":"                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2022-08-13"},{"lineNumber":90,"author":{"gitId":"ngxingyu"},"content":"            }","lastModifiedDate":"2022-08-13"},{"lineNumber":91,"author":{"gitId":"ngxingyu"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-08-13"},{"lineNumber":92,"author":{"gitId":"ngxingyu"},"content":"            speak(e.getMessage());","lastModifiedDate":"2022-08-13"},{"lineNumber":93,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-13"},{"lineNumber":94,"author":{"gitId":"ngxingyu"},"content":"        return true;","lastModifiedDate":"2022-08-13"},{"lineNumber":95,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":96,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":97,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-13"},{"lineNumber":98,"author":{"gitId":"ngxingyu"},"content":"     * Handle the {@literal todo} command","lastModifiedDate":"2022-08-13"},{"lineNumber":99,"author":{"gitId":"ngxingyu"},"content":"     *","lastModifiedDate":"2022-08-13"},{"lineNumber":100,"author":{"gitId":"ngxingyu"},"content":"     * @param input the input to be handled","lastModifiedDate":"2022-08-13"},{"lineNumber":101,"author":{"gitId":"ngxingyu"},"content":"     * @throws DukeException if the input is invalid","lastModifiedDate":"2022-08-13"},{"lineNumber":102,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-13"},{"lineNumber":103,"author":{"gitId":"ngxingyu"},"content":"    private void addTodo(String input) throws DukeException {","lastModifiedDate":"2022-08-13"},{"lineNumber":104,"author":{"gitId":"ngxingyu"},"content":"        ToDo todo \u003d new ToDo(input);","lastModifiedDate":"2022-08-13"},{"lineNumber":105,"author":{"gitId":"ngxingyu"},"content":"        addTask(todo);","lastModifiedDate":"2022-08-21"},{"lineNumber":106,"author":{"gitId":"ngxingyu"},"content":"        speak(\"Got it. I\u0027ve added this todo:\\n  %s\\nNow you have %d tasks in your list\", todo, tasks.size());","lastModifiedDate":"2022-08-13"},{"lineNumber":107,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":108,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":109,"author":{"gitId":"ngxingyu"},"content":"    private Task deleteTask(int idx) throws DukeException, IndexOutOfBoundsException {","lastModifiedDate":"2022-08-21"},{"lineNumber":110,"author":{"gitId":"ngxingyu"},"content":"        Task task \u003d tasks.remove(idx);","lastModifiedDate":"2022-08-21"},{"lineNumber":111,"author":{"gitId":"ngxingyu"},"content":"        if (storage !\u003d null) storage.saveTasks(tasks);","lastModifiedDate":"2022-08-21"},{"lineNumber":112,"author":{"gitId":"ngxingyu"},"content":"        return task;","lastModifiedDate":"2022-08-21"},{"lineNumber":113,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":114,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":115,"author":{"gitId":"ngxingyu"},"content":"    private void addTask(Task task) throws DukeException {","lastModifiedDate":"2022-08-21"},{"lineNumber":116,"author":{"gitId":"ngxingyu"},"content":"        tasks.add(task);","lastModifiedDate":"2022-08-21"},{"lineNumber":117,"author":{"gitId":"ngxingyu"},"content":"        if (storage !\u003d null) storage.saveTasks(tasks);","lastModifiedDate":"2022-08-21"},{"lineNumber":118,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":119,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":120,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-13"},{"lineNumber":121,"author":{"gitId":"ngxingyu"},"content":"     * Handle the event command","lastModifiedDate":"2022-08-13"},{"lineNumber":122,"author":{"gitId":"ngxingyu"},"content":"     *","lastModifiedDate":"2022-08-13"},{"lineNumber":123,"author":{"gitId":"ngxingyu"},"content":"     * @param input the input to be handled","lastModifiedDate":"2022-08-13"},{"lineNumber":124,"author":{"gitId":"ngxingyu"},"content":"     * @throws DukeException if the input is invalid","lastModifiedDate":"2022-08-13"},{"lineNumber":125,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-13"},{"lineNumber":126,"author":{"gitId":"ngxingyu"},"content":"    private void addEvent(String input) throws DukeException {","lastModifiedDate":"2022-08-13"},{"lineNumber":127,"author":{"gitId":"ngxingyu"},"content":"        if (input.matches(\"^.* /at .*$\")) {","lastModifiedDate":"2022-08-13"},{"lineNumber":128,"author":{"gitId":"ngxingyu"},"content":"            String[] parts \u003d input.split(\" /at \");","lastModifiedDate":"2022-08-13"},{"lineNumber":129,"author":{"gitId":"ngxingyu"},"content":"            Event event \u003d new Event(parts[0].strip(), parts[1].strip());","lastModifiedDate":"2022-08-13"},{"lineNumber":130,"author":{"gitId":"ngxingyu"},"content":"            addTask(event);","lastModifiedDate":"2022-08-21"},{"lineNumber":131,"author":{"gitId":"ngxingyu"},"content":"            speak(\"Got it. I\u0027ve added this event:\\n  %s\\nNow you have %d tasks in your list\", event, tasks.size());","lastModifiedDate":"2022-08-13"},{"lineNumber":132,"author":{"gitId":"ngxingyu"},"content":"        } else {","lastModifiedDate":"2022-08-13"},{"lineNumber":133,"author":{"gitId":"ngxingyu"},"content":"            throw new DukeException(\"Invalid event format\");","lastModifiedDate":"2022-08-13"},{"lineNumber":134,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-13"},{"lineNumber":135,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":136,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":137,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-13"},{"lineNumber":138,"author":{"gitId":"ngxingyu"},"content":"     * Handle the deadline command","lastModifiedDate":"2022-08-13"},{"lineNumber":139,"author":{"gitId":"ngxingyu"},"content":"     *","lastModifiedDate":"2022-08-13"},{"lineNumber":140,"author":{"gitId":"ngxingyu"},"content":"     * @param input the input to be handled","lastModifiedDate":"2022-08-13"},{"lineNumber":141,"author":{"gitId":"ngxingyu"},"content":"     * @throws DukeException if the input is invalid","lastModifiedDate":"2022-08-13"},{"lineNumber":142,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-13"},{"lineNumber":143,"author":{"gitId":"ngxingyu"},"content":"    private void addDeadline(String input) throws DukeException {","lastModifiedDate":"2022-08-13"},{"lineNumber":144,"author":{"gitId":"ngxingyu"},"content":"        if (input.matches(\"^.* /by .*$\")) {","lastModifiedDate":"2022-08-13"},{"lineNumber":145,"author":{"gitId":"ngxingyu"},"content":"            String[] parts \u003d input.split(\" /by \");","lastModifiedDate":"2022-08-13"},{"lineNumber":146,"author":{"gitId":"ngxingyu"},"content":"            Deadline deadline \u003d new Deadline(parts[0].strip(), parts[1].strip());","lastModifiedDate":"2022-08-13"},{"lineNumber":147,"author":{"gitId":"ngxingyu"},"content":"            addTask(deadline);","lastModifiedDate":"2022-08-21"},{"lineNumber":148,"author":{"gitId":"ngxingyu"},"content":"            speak(\"Got it. I\u0027ve added this deadline:\\n  %s\\nNow you have %d tasks in your list\", deadline, tasks.size());","lastModifiedDate":"2022-08-13"},{"lineNumber":149,"author":{"gitId":"ngxingyu"},"content":"        } else {","lastModifiedDate":"2022-08-13"},{"lineNumber":150,"author":{"gitId":"ngxingyu"},"content":"            throw new DukeException(\"Invalid event format\");","lastModifiedDate":"2022-08-13"},{"lineNumber":151,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-13"},{"lineNumber":152,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":153,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":154,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-13"},{"lineNumber":155,"author":{"gitId":"ngxingyu"},"content":"     * Handle the input for the mark and unmark commands.","lastModifiedDate":"2022-08-13"},{"lineNumber":156,"author":{"gitId":"ngxingyu"},"content":"     *","lastModifiedDate":"2022-08-13"},{"lineNumber":157,"author":{"gitId":"ngxingyu"},"content":"     * @param input     the input to be handled","lastModifiedDate":"2022-08-13"},{"lineNumber":158,"author":{"gitId":"ngxingyu"},"content":"     * @param completed the status to be set","lastModifiedDate":"2022-08-13"},{"lineNumber":159,"author":{"gitId":"ngxingyu"},"content":"     * @throws DukeException if the input is invalid","lastModifiedDate":"2022-08-13"},{"lineNumber":160,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-13"},{"lineNumber":161,"author":{"gitId":"ngxingyu"},"content":"    private void setTaskCompletionStatus(String input, boolean completed) throws DukeException {","lastModifiedDate":"2022-08-13"},{"lineNumber":162,"author":{"gitId":"ngxingyu"},"content":"        boolean isValid \u003d false;","lastModifiedDate":"2022-08-13"},{"lineNumber":163,"author":{"gitId":"ngxingyu"},"content":"        int task_id \u003d 0;","lastModifiedDate":"2022-08-13"},{"lineNumber":164,"author":{"gitId":"ngxingyu"},"content":"        if (input.matches(\"^[0-9]+$\")) {","lastModifiedDate":"2022-08-13"},{"lineNumber":165,"author":{"gitId":"ngxingyu"},"content":"            task_id \u003d parseInt(input) - 1;","lastModifiedDate":"2022-08-13"},{"lineNumber":166,"author":{"gitId":"ngxingyu"},"content":"            if (task_id \u003c tasks.size() \u0026\u0026 task_id \u003e\u003d 0) {","lastModifiedDate":"2022-08-13"},{"lineNumber":167,"author":{"gitId":"ngxingyu"},"content":"                isValid \u003d true;","lastModifiedDate":"2022-08-13"},{"lineNumber":168,"author":{"gitId":"ngxingyu"},"content":"            }","lastModifiedDate":"2022-08-13"},{"lineNumber":169,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-13"},{"lineNumber":170,"author":{"gitId":"ngxingyu"},"content":"        if (!isValid) {","lastModifiedDate":"2022-08-13"},{"lineNumber":171,"author":{"gitId":"ngxingyu"},"content":"            throw new DukeException(\"Task %s doesn\u0027t exist\", input);","lastModifiedDate":"2022-08-13"},{"lineNumber":172,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-13"},{"lineNumber":173,"author":{"gitId":"ngxingyu"},"content":"        Task task \u003d tasks.get(task_id);","lastModifiedDate":"2022-08-13"},{"lineNumber":174,"author":{"gitId":"ngxingyu"},"content":"        task.setDone(completed);","lastModifiedDate":"2022-08-13"},{"lineNumber":175,"author":{"gitId":"ngxingyu"},"content":"        if (completed) {","lastModifiedDate":"2022-08-13"},{"lineNumber":176,"author":{"gitId":"ngxingyu"},"content":"            speak(\"Nice! I\u0027ve marked this task as done:\\n  %s\", task);","lastModifiedDate":"2022-08-13"},{"lineNumber":177,"author":{"gitId":"ngxingyu"},"content":"        } else {","lastModifiedDate":"2022-08-13"},{"lineNumber":178,"author":{"gitId":"ngxingyu"},"content":"            speak(\"Ok, I\u0027ve marked this task as not done yet:\\n  %s\", task);","lastModifiedDate":"2022-08-13"},{"lineNumber":179,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-13"},{"lineNumber":180,"author":{"gitId":"ngxingyu"},"content":"        if (storage !\u003d null) storage.saveTasks(tasks);","lastModifiedDate":"2022-08-21"},{"lineNumber":181,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":182,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":183,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-13"},{"lineNumber":184,"author":{"gitId":"ngxingyu"},"content":"     * Handle the input for the delete command.","lastModifiedDate":"2022-08-13"},{"lineNumber":185,"author":{"gitId":"ngxingyu"},"content":"     *","lastModifiedDate":"2022-08-13"},{"lineNumber":186,"author":{"gitId":"ngxingyu"},"content":"     * @param input the input to be handled","lastModifiedDate":"2022-08-13"},{"lineNumber":187,"author":{"gitId":"ngxingyu"},"content":"     * @throws DukeException if the input is invalid","lastModifiedDate":"2022-08-13"},{"lineNumber":188,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-13"},{"lineNumber":189,"author":{"gitId":"ngxingyu"},"content":"    private void delete(String input) throws DukeException {","lastModifiedDate":"2022-08-13"},{"lineNumber":190,"author":{"gitId":"ngxingyu"},"content":"        try {","lastModifiedDate":"2022-08-13"},{"lineNumber":191,"author":{"gitId":"ngxingyu"},"content":"            if (input.matches(\"^[0-9]+$\")) {","lastModifiedDate":"2022-08-13"},{"lineNumber":192,"author":{"gitId":"ngxingyu"},"content":"                Task task \u003d deleteTask(parseInt(input.strip()) - 1);","lastModifiedDate":"2022-08-21"},{"lineNumber":193,"author":{"gitId":"ngxingyu"},"content":"                speak(\"Noted. I\u0027ve removed this task:\\n  %s\\nNow you have %d tasks in your list\", task, tasks.size());","lastModifiedDate":"2022-08-13"},{"lineNumber":194,"author":{"gitId":"ngxingyu"},"content":"            } else {","lastModifiedDate":"2022-08-13"},{"lineNumber":195,"author":{"gitId":"ngxingyu"},"content":"                throw new DukeException(\"Failed to delete task %s\", input);","lastModifiedDate":"2022-08-13"},{"lineNumber":196,"author":{"gitId":"ngxingyu"},"content":"            }","lastModifiedDate":"2022-08-13"},{"lineNumber":197,"author":{"gitId":"ngxingyu"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-08-13"},{"lineNumber":198,"author":{"gitId":"ngxingyu"},"content":"            throw new DukeException(\"Failed to delete task %s\", input);","lastModifiedDate":"2022-08-13"},{"lineNumber":199,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-13"},{"lineNumber":200,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":201,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":202,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-13"},{"lineNumber":203,"author":{"gitId":"ngxingyu"},"content":"     * Get Duke to speak the given text.","lastModifiedDate":"2022-08-13"},{"lineNumber":204,"author":{"gitId":"ngxingyu"},"content":"     *","lastModifiedDate":"2022-08-13"},{"lineNumber":205,"author":{"gitId":"ngxingyu"},"content":"     * @param text The text to speak.","lastModifiedDate":"2022-08-13"},{"lineNumber":206,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-13"},{"lineNumber":207,"author":{"gitId":"ngxingyu"},"content":"    private void speak(String text) {","lastModifiedDate":"2022-08-12"},{"lineNumber":208,"author":{"gitId":"ngxingyu"},"content":"        String line \u003d \"_\".repeat(20) + \u0027\\n\u0027;","lastModifiedDate":"2022-08-12"},{"lineNumber":209,"author":{"gitId":"ngxingyu"},"content":"        System.out.println(line);","lastModifiedDate":"2022-08-12"},{"lineNumber":210,"author":{"gitId":"ngxingyu"},"content":"        System.out.println(text);","lastModifiedDate":"2022-08-12"},{"lineNumber":211,"author":{"gitId":"ngxingyu"},"content":"        System.out.println(line);","lastModifiedDate":"2022-08-12"},{"lineNumber":212,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-12"},{"lineNumber":213,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-12"},{"lineNumber":214,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-13"},{"lineNumber":215,"author":{"gitId":"ngxingyu"},"content":"     * Speaks the specified text defined by its format and arguments.","lastModifiedDate":"2022-08-18"},{"lineNumber":216,"author":{"gitId":"ngxingyu"},"content":"     *","lastModifiedDate":"2022-08-13"},{"lineNumber":217,"author":{"gitId":"ngxingyu"},"content":"     * @param format A format string","lastModifiedDate":"2022-08-13"},{"lineNumber":218,"author":{"gitId":"ngxingyu"},"content":"     * @param args   Arguments referenced by the format specifiers in the format string.","lastModifiedDate":"2022-08-13"},{"lineNumber":219,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-13"},{"lineNumber":220,"author":{"gitId":"ngxingyu"},"content":"    private void speak(String format, Object... args) {","lastModifiedDate":"2022-08-13"},{"lineNumber":221,"author":{"gitId":"ngxingyu"},"content":"        speak(String.format(format, args));","lastModifiedDate":"2022-08-13"},{"lineNumber":222,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":223,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":224,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-13"},{"lineNumber":225,"author":{"gitId":"ngxingyu"},"content":"     * Displays all current tasks.","lastModifiedDate":"2022-08-13"},{"lineNumber":226,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-13"},{"lineNumber":227,"author":{"gitId":"ngxingyu"},"content":"    public void listHistory() {","lastModifiedDate":"2022-08-13"},{"lineNumber":228,"author":{"gitId":"ngxingyu"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2022-08-13"},{"lineNumber":229,"author":{"gitId":"ngxingyu"},"content":"        output.append(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2022-08-13"},{"lineNumber":230,"author":{"gitId":"ngxingyu"},"content":"        IntStream.range(0, tasks.size()).forEach(i -\u003e output.append(String.format(\"%d. %s%n\", i + 1, tasks.get(i))));","lastModifiedDate":"2022-08-13"},{"lineNumber":231,"author":{"gitId":"ngxingyu"},"content":"        speak(output.toString());","lastModifiedDate":"2022-08-13"},{"lineNumber":232,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":233,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":234,"author":{"gitId":"ngxingyu"},"content":"    private void goodbye() {","lastModifiedDate":"2022-08-12"},{"lineNumber":235,"author":{"gitId":"ngxingyu"},"content":"        speak(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2022-08-12"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"ngxingyu":233,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ngxingyu"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-08-13"},{"lineNumber":2,"author":{"gitId":"ngxingyu"},"content":"    public DukeException(String message) {","lastModifiedDate":"2022-08-13"},{"lineNumber":3,"author":{"gitId":"ngxingyu"},"content":"        super(String.format(\"☹ OOPS!!! %s\", message));","lastModifiedDate":"2022-08-13"},{"lineNumber":4,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":5,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":6,"author":{"gitId":"ngxingyu"},"content":"    public DukeException(String format, Object... args) {","lastModifiedDate":"2022-08-13"},{"lineNumber":7,"author":{"gitId":"ngxingyu"},"content":"        super(String.format(\"☹ OOPS!!! %s\", String.format(format, args)));","lastModifiedDate":"2022-08-13"},{"lineNumber":8,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":9,"author":{"gitId":"ngxingyu"},"content":"}","lastModifiedDate":"2022-08-13"}],"authorContributionMap":{"ngxingyu":9}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ngxingyu"},"content":"public class Event extends Task {","lastModifiedDate":"2022-08-13"},{"lineNumber":2,"author":{"gitId":"ngxingyu"},"content":"    protected String eventTime;","lastModifiedDate":"2022-08-13"},{"lineNumber":3,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":4,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"ngxingyu"},"content":"     * Constructs a new Event task.","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"ngxingyu"},"content":"     * @param description description of the event","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"ngxingyu"},"content":"     * @param eventTime the eventTime of the event.","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"ngxingyu"},"content":"    public Event(String description, String eventTime) {","lastModifiedDate":"2022-08-13"},{"lineNumber":10,"author":{"gitId":"ngxingyu"},"content":"        super(description);","lastModifiedDate":"2022-08-13"},{"lineNumber":11,"author":{"gitId":"ngxingyu"},"content":"        this.eventTime \u003d eventTime;","lastModifiedDate":"2022-08-13"},{"lineNumber":12,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":13,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":14,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"ngxingyu"},"content":"     * Factory method to create a Event task from an encoded string.","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"ngxingyu"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"ngxingyu"},"content":"     * @param encodedInput the encoded entry with format eventTime|description","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"ngxingyu"},"content":"     * @param completed the completion status of the Event task","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"ngxingyu"},"content":"     * @return the Event task","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"ngxingyu"},"content":"    public static Event decode(String encodedInput, boolean completed) {","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"ngxingyu"},"content":"        String[] entries \u003d encodedInput.split(\"\\\\|\", 2);","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"ngxingyu"},"content":"        Event event \u003d new Event(entries[1], entries[0]);","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"ngxingyu"},"content":"        event.setDone(completed);","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"ngxingyu"},"content":"        return event;","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"ngxingyu"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"ngxingyu"},"content":"    public Type getType() {","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"ngxingyu"},"content":"        return Type.EVENT;","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"ngxingyu"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"ngxingyu"},"content":"    public String encodeData() {","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"ngxingyu"},"content":"        return String.format(\"%s|%s\", this.eventTime, this.description);","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"ngxingyu"},"content":"    @Override","lastModifiedDate":"2022-08-13"},{"lineNumber":39,"author":{"gitId":"ngxingyu"},"content":"    public String getDisplayText() {","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"ngxingyu"},"content":"        return String.format(\"%s (at: %s)\", description, eventTime);","lastModifiedDate":"2022-08-21"},{"lineNumber":41,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":42,"author":{"gitId":"ngxingyu"},"content":"}","lastModifiedDate":"2022-08-13"}],"authorContributionMap":{"ngxingyu":42}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ngxingyu"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"ngxingyu"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"ngxingyu"},"content":"import java.io.File;","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"ngxingyu"},"content":"import java.io.FileReader;","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"ngxingyu"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"ngxingyu"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"ngxingyu"},"content":"import java.net.URISyntaxException;","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"ngxingyu"},"content":"import java.net.URLDecoder;","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"ngxingyu"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"ngxingyu"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"ngxingyu"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"ngxingyu"},"content":"public class Storage {","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"ngxingyu"},"content":"    private final String directoryPath;","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"ngxingyu"},"content":"    private String fileName;","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"ngxingyu"},"content":"    public Storage(String fileName) throws DukeException {","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"ngxingyu"},"content":"        String _directoryPath \u003d null;","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"ngxingyu"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"ngxingyu"},"content":"            _directoryPath \u003d Path.of(this.getClass().getProtectionDomain().getCodeSource().getLocation().toURI()).toString();","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"ngxingyu"},"content":"            _directoryPath \u003d _directoryPath.substring(0, _directoryPath.lastIndexOf(File.separator));","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"ngxingyu"},"content":"            _directoryPath \u003d URLDecoder.decode(_directoryPath, StandardCharsets.UTF_8).concat(File.separator + \"data\");","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"ngxingyu"},"content":"            File directory \u003d new File(_directoryPath);","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"ngxingyu"},"content":"            if (!directory.exists()) {","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"ngxingyu"},"content":"                if (!directory.mkdir()) {","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"ngxingyu"},"content":"                    _directoryPath \u003d null;","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"ngxingyu"},"content":"                }","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"ngxingyu"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"ngxingyu"},"content":"        } catch (URISyntaxException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"ngxingyu"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"ngxingyu"},"content":"        if (_directoryPath \u003d\u003d null) {","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"ngxingyu"},"content":"            throw new DukeException(\"Unable to save tasks to disk.\");","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"ngxingyu"},"content":"        this.directoryPath \u003d _directoryPath;","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"ngxingyu"},"content":"        this.fileName \u003d fileName;","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"ngxingyu"},"content":"    public ArrayList\u003cTask\u003e loadTasks() throws DukeException {","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"ngxingyu"},"content":"        return loadTasks(this.fileName);","lastModifiedDate":"2022-08-21"},{"lineNumber":41,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":42,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":43,"author":{"gitId":"ngxingyu"},"content":"    public ArrayList\u003cTask\u003e loadTasks(String fileName) throws DukeException {","lastModifiedDate":"2022-08-21"},{"lineNumber":44,"author":{"gitId":"ngxingyu"},"content":"        this.fileName \u003d fileName;","lastModifiedDate":"2022-08-21"},{"lineNumber":45,"author":{"gitId":"ngxingyu"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-08-21"},{"lineNumber":46,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":47,"author":{"gitId":"ngxingyu"},"content":"        File file \u003d new File(directoryPath.concat(File.separator + fileName));","lastModifiedDate":"2022-08-21"},{"lineNumber":48,"author":{"gitId":"ngxingyu"},"content":"        if (!file.exists()) {","lastModifiedDate":"2022-08-21"},{"lineNumber":49,"author":{"gitId":"ngxingyu"},"content":"            return tasks;","lastModifiedDate":"2022-08-21"},{"lineNumber":50,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":51,"author":{"gitId":"ngxingyu"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":52,"author":{"gitId":"ngxingyu"},"content":"            FileReader reader \u003d new FileReader(file);","lastModifiedDate":"2022-08-21"},{"lineNumber":53,"author":{"gitId":"ngxingyu"},"content":"            BufferedReader br \u003d new BufferedReader(reader);","lastModifiedDate":"2022-08-21"},{"lineNumber":54,"author":{"gitId":"ngxingyu"},"content":"            br.lines().forEach(line -\u003e {","lastModifiedDate":"2022-08-21"},{"lineNumber":55,"author":{"gitId":"ngxingyu"},"content":"                String[] entries \u003d line.strip().split(\"\\\\|\", 3);","lastModifiedDate":"2022-08-21"},{"lineNumber":56,"author":{"gitId":"ngxingyu"},"content":"                Task.Type type \u003d Task.Type.decode(entries[0]);","lastModifiedDate":"2022-08-21"},{"lineNumber":57,"author":{"gitId":"ngxingyu"},"content":"                boolean completed \u003d entries[1].equals(\"1\");","lastModifiedDate":"2022-08-21"},{"lineNumber":58,"author":{"gitId":"ngxingyu"},"content":"                switch (type) {","lastModifiedDate":"2022-08-21"},{"lineNumber":59,"author":{"gitId":"ngxingyu"},"content":"                    case DEADLINE:","lastModifiedDate":"2022-08-21"},{"lineNumber":60,"author":{"gitId":"ngxingyu"},"content":"                        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":61,"author":{"gitId":"ngxingyu"},"content":"                            tasks.add(Deadline.decode(entries[2], completed));","lastModifiedDate":"2022-08-21"},{"lineNumber":62,"author":{"gitId":"ngxingyu"},"content":"                        } catch (DukeException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":63,"author":{"gitId":"ngxingyu"},"content":"                            break;","lastModifiedDate":"2022-08-21"},{"lineNumber":64,"author":{"gitId":"ngxingyu"},"content":"                        }","lastModifiedDate":"2022-08-21"},{"lineNumber":65,"author":{"gitId":"ngxingyu"},"content":"                        break;","lastModifiedDate":"2022-08-21"},{"lineNumber":66,"author":{"gitId":"ngxingyu"},"content":"                    case EVENT:","lastModifiedDate":"2022-08-21"},{"lineNumber":67,"author":{"gitId":"ngxingyu"},"content":"                        tasks.add(Event.decode(entries[2], completed));","lastModifiedDate":"2022-08-21"},{"lineNumber":68,"author":{"gitId":"ngxingyu"},"content":"                        break;","lastModifiedDate":"2022-08-21"},{"lineNumber":69,"author":{"gitId":"ngxingyu"},"content":"                    case TODO:","lastModifiedDate":"2022-08-21"},{"lineNumber":70,"author":{"gitId":"ngxingyu"},"content":"                        tasks.add(ToDo.decode(entries[2], completed));","lastModifiedDate":"2022-08-21"},{"lineNumber":71,"author":{"gitId":"ngxingyu"},"content":"                        break;","lastModifiedDate":"2022-08-21"},{"lineNumber":72,"author":{"gitId":"ngxingyu"},"content":"                }","lastModifiedDate":"2022-08-21"},{"lineNumber":73,"author":{"gitId":"ngxingyu"},"content":"            });","lastModifiedDate":"2022-08-21"},{"lineNumber":74,"author":{"gitId":"ngxingyu"},"content":"            br.close();","lastModifiedDate":"2022-08-21"},{"lineNumber":75,"author":{"gitId":"ngxingyu"},"content":"            return tasks;","lastModifiedDate":"2022-08-21"},{"lineNumber":76,"author":{"gitId":"ngxingyu"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":77,"author":{"gitId":"ngxingyu"},"content":"            throw new DukeException(\"Could not read file! \" + e.getMessage());","lastModifiedDate":"2022-08-21"},{"lineNumber":78,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":79,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":80,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":81,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":82,"author":{"gitId":"ngxingyu"},"content":"    private void writeToFile(String fileName, String content) throws DukeException {","lastModifiedDate":"2022-08-21"},{"lineNumber":83,"author":{"gitId":"ngxingyu"},"content":"        String filePath \u003d directoryPath.concat(File.separator + fileName);","lastModifiedDate":"2022-08-21"},{"lineNumber":84,"author":{"gitId":"ngxingyu"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2022-08-21"},{"lineNumber":85,"author":{"gitId":"ngxingyu"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":86,"author":{"gitId":"ngxingyu"},"content":"            FileWriter writer \u003d new FileWriter(file);","lastModifiedDate":"2022-08-21"},{"lineNumber":87,"author":{"gitId":"ngxingyu"},"content":"            BufferedWriter bw \u003d new BufferedWriter(writer);","lastModifiedDate":"2022-08-21"},{"lineNumber":88,"author":{"gitId":"ngxingyu"},"content":"            bw.write(content);","lastModifiedDate":"2022-08-21"},{"lineNumber":89,"author":{"gitId":"ngxingyu"},"content":"            bw.close();","lastModifiedDate":"2022-08-21"},{"lineNumber":90,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":91,"author":{"gitId":"ngxingyu"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":92,"author":{"gitId":"ngxingyu"},"content":"            throw new DukeException(\"Could not save file! \" + e.getMessage());","lastModifiedDate":"2022-08-21"},{"lineNumber":93,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":94,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":95,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":96,"author":{"gitId":"ngxingyu"},"content":"    public void saveTasks(ArrayList\u003cTask\u003e tasks) throws DukeException {","lastModifiedDate":"2022-08-21"},{"lineNumber":97,"author":{"gitId":"ngxingyu"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-08-21"},{"lineNumber":98,"author":{"gitId":"ngxingyu"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2022-08-21"},{"lineNumber":99,"author":{"gitId":"ngxingyu"},"content":"            sb.append(task.encode()).append(System.lineSeparator());","lastModifiedDate":"2022-08-21"},{"lineNumber":100,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":101,"author":{"gitId":"ngxingyu"},"content":"        this.writeToFile(fileName, sb.toString());","lastModifiedDate":"2022-08-21"},{"lineNumber":102,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":103,"author":{"gitId":"ngxingyu"},"content":"}","lastModifiedDate":"2022-08-21"}],"authorContributionMap":{"ngxingyu":103}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ngxingyu"},"content":"public abstract class Task {","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"ngxingyu"},"content":"    protected String description;","lastModifiedDate":"2022-08-13"},{"lineNumber":3,"author":{"gitId":"ngxingyu"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-08-13"},{"lineNumber":4,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":5,"author":{"gitId":"ngxingyu"},"content":"    public Task(String description) {","lastModifiedDate":"2022-08-13"},{"lineNumber":6,"author":{"gitId":"ngxingyu"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-08-13"},{"lineNumber":7,"author":{"gitId":"ngxingyu"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-13"},{"lineNumber":8,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":9,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":10,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"ngxingyu"},"content":"     * String representation of the completion status.","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"ngxingyu"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"ngxingyu"},"content":"     * @return X if done else \" \"","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"ngxingyu"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-08-13"},{"lineNumber":16,"author":{"gitId":"ngxingyu"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2022-08-13"},{"lineNumber":17,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":18,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":19,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"ngxingyu"},"content":"     * Setter for the completion status of the task.","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"ngxingyu"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"ngxingyu"},"content":"     * @param isDone the new completion status","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"ngxingyu"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2022-08-13"},{"lineNumber":25,"author":{"gitId":"ngxingyu"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-08-13"},{"lineNumber":26,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":27,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":28,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"ngxingyu"},"content":"     * Returns the `Type` of the task.","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"ngxingyu"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"ngxingyu"},"content":"     * @return the type of the task","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"ngxingyu"},"content":"    public abstract Type getType();","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"ngxingyu"},"content":"     * Encodes the data to be saved to the file. Excludes completion status and task type.","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"ngxingyu"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"ngxingyu"},"content":"     * @return the encoded data","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"ngxingyu"},"content":"    public abstract String encodeData();","lastModifiedDate":"2022-08-21"},{"lineNumber":41,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":42,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":43,"author":{"gitId":"ngxingyu"},"content":"     * Returns the text to be displayed by the bot for the task, containing all details of the task,","lastModifiedDate":"2022-08-21"},{"lineNumber":44,"author":{"gitId":"ngxingyu"},"content":"     * excluding the type and completion status.","lastModifiedDate":"2022-08-21"},{"lineNumber":45,"author":{"gitId":"ngxingyu"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":46,"author":{"gitId":"ngxingyu"},"content":"     * @return the display text","lastModifiedDate":"2022-08-21"},{"lineNumber":47,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":48,"author":{"gitId":"ngxingyu"},"content":"    public abstract String getDisplayText();","lastModifiedDate":"2022-08-21"},{"lineNumber":49,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":50,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":51,"author":{"gitId":"ngxingyu"},"content":"     * Encodes the task type and completion status in addition to the output of encodeData() to be stored as","lastModifiedDate":"2022-08-21"},{"lineNumber":52,"author":{"gitId":"ngxingyu"},"content":"     * line in the saved file.","lastModifiedDate":"2022-08-21"},{"lineNumber":53,"author":{"gitId":"ngxingyu"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":54,"author":{"gitId":"ngxingyu"},"content":"     * @return the encoded data","lastModifiedDate":"2022-08-21"},{"lineNumber":55,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":56,"author":{"gitId":"ngxingyu"},"content":"    public final String encode() {","lastModifiedDate":"2022-08-21"},{"lineNumber":57,"author":{"gitId":"ngxingyu"},"content":"        return String.format(\"%s|%d|%s\", this.getType().prefix, (this.isDone ? 1 : 0), this.encodeData());","lastModifiedDate":"2022-08-21"},{"lineNumber":58,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":59,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":60,"author":{"gitId":"ngxingyu"},"content":"    @Override","lastModifiedDate":"2022-08-13"},{"lineNumber":61,"author":{"gitId":"ngxingyu"},"content":"    public String toString() {","lastModifiedDate":"2022-08-13"},{"lineNumber":62,"author":{"gitId":"ngxingyu"},"content":"        return String.format(\"[%s][%s] %s\", getType(), getStatusIcon(), getDisplayText());","lastModifiedDate":"2022-08-21"},{"lineNumber":63,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":64,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":65,"author":{"gitId":"ngxingyu"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":66,"author":{"gitId":"ngxingyu"},"content":"     * An enumeration of the different types of tasks.","lastModifiedDate":"2022-08-21"},{"lineNumber":67,"author":{"gitId":"ngxingyu"},"content":"     * Each task contains a unique prefix.","lastModifiedDate":"2022-08-21"},{"lineNumber":68,"author":{"gitId":"ngxingyu"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":69,"author":{"gitId":"ngxingyu"},"content":"    public enum Type {","lastModifiedDate":"2022-08-21"},{"lineNumber":70,"author":{"gitId":"ngxingyu"},"content":"        TODO(\"T\"),","lastModifiedDate":"2022-08-21"},{"lineNumber":71,"author":{"gitId":"ngxingyu"},"content":"        DEADLINE(\"D\"),","lastModifiedDate":"2022-08-21"},{"lineNumber":72,"author":{"gitId":"ngxingyu"},"content":"        EVENT(\"E\");","lastModifiedDate":"2022-08-21"},{"lineNumber":73,"author":{"gitId":"ngxingyu"},"content":"        private final String prefix;","lastModifiedDate":"2022-08-21"},{"lineNumber":74,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":75,"author":{"gitId":"ngxingyu"},"content":"        Type(String prefix) {","lastModifiedDate":"2022-08-21"},{"lineNumber":76,"author":{"gitId":"ngxingyu"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2022-08-21"},{"lineNumber":77,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":78,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":79,"author":{"gitId":"ngxingyu"},"content":"        /**","lastModifiedDate":"2022-08-21"},{"lineNumber":80,"author":{"gitId":"ngxingyu"},"content":"         * Returns the Task Type given its prefix.","lastModifiedDate":"2022-08-21"},{"lineNumber":81,"author":{"gitId":"ngxingyu"},"content":"         *","lastModifiedDate":"2022-08-21"},{"lineNumber":82,"author":{"gitId":"ngxingyu"},"content":"         * @param prefix the prefix of the task type","lastModifiedDate":"2022-08-21"},{"lineNumber":83,"author":{"gitId":"ngxingyu"},"content":"         * @return Task.Type","lastModifiedDate":"2022-08-21"},{"lineNumber":84,"author":{"gitId":"ngxingyu"},"content":"         * @throws IllegalArgumentException if none of the types match the prefix","lastModifiedDate":"2022-08-21"},{"lineNumber":85,"author":{"gitId":"ngxingyu"},"content":"         */","lastModifiedDate":"2022-08-21"},{"lineNumber":86,"author":{"gitId":"ngxingyu"},"content":"        public static Type decode(String prefix) throws IllegalArgumentException {","lastModifiedDate":"2022-08-21"},{"lineNumber":87,"author":{"gitId":"ngxingyu"},"content":"            prefix \u003d prefix.strip();","lastModifiedDate":"2022-08-21"},{"lineNumber":88,"author":{"gitId":"ngxingyu"},"content":"            for (Type type : Type.values()) {","lastModifiedDate":"2022-08-21"},{"lineNumber":89,"author":{"gitId":"ngxingyu"},"content":"                if (type.prefix.compareToIgnoreCase(prefix) \u003d\u003d 0) {","lastModifiedDate":"2022-08-21"},{"lineNumber":90,"author":{"gitId":"ngxingyu"},"content":"                    return type;","lastModifiedDate":"2022-08-21"},{"lineNumber":91,"author":{"gitId":"ngxingyu"},"content":"                }","lastModifiedDate":"2022-08-21"},{"lineNumber":92,"author":{"gitId":"ngxingyu"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":93,"author":{"gitId":"ngxingyu"},"content":"            throw new IllegalArgumentException(\"Task type not found.\");","lastModifiedDate":"2022-08-21"},{"lineNumber":94,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":95,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":96,"author":{"gitId":"ngxingyu"},"content":"        /**","lastModifiedDate":"2022-08-21"},{"lineNumber":97,"author":{"gitId":"ngxingyu"},"content":"         * Returns the prefix of the task type.","lastModifiedDate":"2022-08-21"},{"lineNumber":98,"author":{"gitId":"ngxingyu"},"content":"         *","lastModifiedDate":"2022-08-21"},{"lineNumber":99,"author":{"gitId":"ngxingyu"},"content":"         * @return String prefix of type.","lastModifiedDate":"2022-08-21"},{"lineNumber":100,"author":{"gitId":"ngxingyu"},"content":"         */","lastModifiedDate":"2022-08-21"},{"lineNumber":101,"author":{"gitId":"ngxingyu"},"content":"        @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":102,"author":{"gitId":"ngxingyu"},"content":"        public String toString() {","lastModifiedDate":"2022-08-21"},{"lineNumber":103,"author":{"gitId":"ngxingyu"},"content":"            return prefix;","lastModifiedDate":"2022-08-21"},{"lineNumber":104,"author":{"gitId":"ngxingyu"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":105,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":106,"author":{"gitId":"ngxingyu"},"content":"}","lastModifiedDate":"2022-08-13"}],"authorContributionMap":{"ngxingyu":106}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ngxingyu"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-08-13"},{"lineNumber":2,"author":{"gitId":"ngxingyu"},"content":"    public ToDo(String description) {","lastModifiedDate":"2022-08-13"},{"lineNumber":3,"author":{"gitId":"ngxingyu"},"content":"        super(description);","lastModifiedDate":"2022-08-13"},{"lineNumber":4,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":5,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":6,"author":{"gitId":"ngxingyu"},"content":"    public static ToDo decode(String encoded, boolean completed) {","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"ngxingyu"},"content":"        ToDo todo \u003d new ToDo(encoded);","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"ngxingyu"},"content":"        todo.setDone(completed);","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"ngxingyu"},"content":"        return todo;","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"ngxingyu"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"ngxingyu"},"content":"    public Type getType() {","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"ngxingyu"},"content":"        return Type.TODO;","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"ngxingyu"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"ngxingyu"},"content":"    public String encodeData() {","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"ngxingyu"},"content":"        return this.description;","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"ngxingyu"},"content":"    @Override","lastModifiedDate":"2022-08-13"},{"lineNumber":23,"author":{"gitId":"ngxingyu"},"content":"    public String getDisplayText() {","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"ngxingyu"},"content":"        return this.description;","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"ngxingyu"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":26,"author":{"gitId":"ngxingyu"},"content":"}","lastModifiedDate":"2022-08-13"}],"authorContributionMap":{"ngxingyu":26}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ngxingyu"},"content":"list","lastModifiedDate":"2022-08-13"},{"lineNumber":2,"author":{"gitId":"ngxingyu"},"content":"todo   borrow book","lastModifiedDate":"2022-08-13"},{"lineNumber":3,"author":{"gitId":"ngxingyu"},"content":"deadline  return book  /by  15/01/2020 23:59","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"ngxingyu"},"content":"event  project meeting   /at   Mon 2-4pm","lastModifiedDate":"2022-08-13"},{"lineNumber":5,"author":{"gitId":"ngxingyu"},"content":"deadline  do homework /by  no idea :-p","lastModifiedDate":"2022-08-13"},{"lineNumber":6,"author":{"gitId":"ngxingyu"},"content":"mark 1","lastModifiedDate":"2022-08-13"},{"lineNumber":7,"author":{"gitId":"ngxingyu"},"content":"mark  2","lastModifiedDate":"2022-08-13"},{"lineNumber":8,"author":{"gitId":"ngxingyu"},"content":"mark 3","lastModifiedDate":"2022-08-13"},{"lineNumber":9,"author":{"gitId":"ngxingyu"},"content":"unmark  1","lastModifiedDate":"2022-08-13"},{"lineNumber":10,"author":{"gitId":"ngxingyu"},"content":"delete 5","lastModifiedDate":"2022-08-13"},{"lineNumber":11,"author":{"gitId":"ngxingyu"},"content":"delete 3","lastModifiedDate":"2022-08-13"},{"lineNumber":12,"author":{"gitId":"ngxingyu"},"content":"delete 2","lastModifiedDate":"2022-08-13"},{"lineNumber":13,"author":{"gitId":"ngxingyu"},"content":"delete x","lastModifiedDate":"2022-08-13"},{"lineNumber":14,"author":{"gitId":"ngxingyu"},"content":"list","lastModifiedDate":"2022-08-18"},{"lineNumber":15,"author":{"gitId":"ngxingyu"},"content":"bye","lastModifiedDate":"2022-08-13"}],"authorContributionMap":{"ngxingyu":15}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"ngxingyu"},"content":"REM delete saved txt from previous run","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"ngxingyu"},"content":"if exist ..\\data\\tasks.txt del ..\\data\\tasks.txt","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"ngxingyu"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ngxingyu":3,"-":21}}]
