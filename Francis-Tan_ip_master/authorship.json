[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"Francis-Tan"},"content":"plugins {","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"Francis-Tan"},"content":"    id \u0027java\u0027","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"Francis-Tan"},"content":"    id \u0027application\u0027","lastModifiedDate":"2022-08-26"},{"lineNumber":4,"author":{"gitId":"Francis-Tan"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2022-08-26"},{"lineNumber":5,"author":{"gitId":"Francis-Tan"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2022-08-26"},{"lineNumber":6,"author":{"gitId":"Francis-Tan"},"content":"}","lastModifiedDate":"2022-08-26"},{"lineNumber":7,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":8,"author":{"gitId":"Francis-Tan"},"content":"group \u0027org.example\u0027","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"Francis-Tan"},"content":"version \u00270.1\u0027","lastModifiedDate":"2022-08-27"},{"lineNumber":10,"author":{"gitId":"Francis-Tan"},"content":"mainClassName \u003d \u0027duke.services.Duke\u0027","lastModifiedDate":"2022-08-27"},{"lineNumber":11,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":12,"author":{"gitId":"Francis-Tan"},"content":"// Output to build/libs/Duke.jar","lastModifiedDate":"2022-08-27"},{"lineNumber":13,"author":{"gitId":"Francis-Tan"},"content":"shadowJar {","lastModifiedDate":"2022-08-27"},{"lineNumber":14,"author":{"gitId":"Francis-Tan"},"content":"    archiveBaseName.set(\u0027Duke\u0027)","lastModifiedDate":"2022-08-27"},{"lineNumber":15,"author":{"gitId":"Francis-Tan"},"content":"    archiveClassifier.set(\u0027\u0027)","lastModifiedDate":"2022-08-27"},{"lineNumber":16,"author":{"gitId":"Francis-Tan"},"content":"    archiveVersion.set(\u0027\u0027)","lastModifiedDate":"2022-08-27"},{"lineNumber":17,"author":{"gitId":"Francis-Tan"},"content":"}","lastModifiedDate":"2022-08-27"},{"lineNumber":18,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"Francis-Tan"},"content":"repositories {","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"Francis-Tan"},"content":"    mavenCentral()","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"Francis-Tan"},"content":"}","lastModifiedDate":"2022-08-26"},{"lineNumber":22,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":23,"author":{"gitId":"Francis-Tan"},"content":"test {","lastModifiedDate":"2022-08-27"},{"lineNumber":24,"author":{"gitId":"Francis-Tan"},"content":"    useJUnitPlatform()","lastModifiedDate":"2022-08-27"},{"lineNumber":25,"author":{"gitId":"Francis-Tan"},"content":"}","lastModifiedDate":"2022-08-27"},{"lineNumber":26,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":27,"author":{"gitId":"Francis-Tan"},"content":"dependencies {","lastModifiedDate":"2022-08-27"},{"lineNumber":28,"author":{"gitId":"Francis-Tan"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2022-08-27"},{"lineNumber":29,"author":{"gitId":"Francis-Tan"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2022-08-27"},{"lineNumber":30,"author":{"gitId":"Francis-Tan"},"content":"}","lastModifiedDate":"2022-08-27"}],"authorContributionMap":{"Francis-Tan":30}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"Francis-Tan"},"content":"@rem","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"Francis-Tan"},"content":"@rem Copyright 2015 the original author or authors.","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"Francis-Tan"},"content":"@rem","lastModifiedDate":"2022-08-26"},{"lineNumber":4,"author":{"gitId":"Francis-Tan"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");","lastModifiedDate":"2022-08-26"},{"lineNumber":5,"author":{"gitId":"Francis-Tan"},"content":"@rem you may not use this file except in compliance with the License.","lastModifiedDate":"2022-08-26"},{"lineNumber":6,"author":{"gitId":"Francis-Tan"},"content":"@rem You may obtain a copy of the License at","lastModifiedDate":"2022-08-26"},{"lineNumber":7,"author":{"gitId":"Francis-Tan"},"content":"@rem","lastModifiedDate":"2022-08-26"},{"lineNumber":8,"author":{"gitId":"Francis-Tan"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"Francis-Tan"},"content":"@rem","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"Francis-Tan"},"content":"@rem Unless required by applicable law or agreed to in writing, software","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"Francis-Tan"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,","lastModifiedDate":"2022-08-26"},{"lineNumber":12,"author":{"gitId":"Francis-Tan"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"Francis-Tan"},"content":"@rem See the License for the specific language governing permissions and","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"Francis-Tan"},"content":"@rem limitations under the License.","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"Francis-Tan"},"content":"@rem","lastModifiedDate":"2022-08-26"},{"lineNumber":16,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":17,"author":{"gitId":"Francis-Tan"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off","lastModifiedDate":"2022-08-26"},{"lineNumber":18,"author":{"gitId":"Francis-Tan"},"content":"@rem ##########################################################################","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"Francis-Tan"},"content":"@rem","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"Francis-Tan"},"content":"@rem  Gradle startup script for Windows","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"Francis-Tan"},"content":"@rem","lastModifiedDate":"2022-08-26"},{"lineNumber":22,"author":{"gitId":"Francis-Tan"},"content":"@rem ##########################################################################","lastModifiedDate":"2022-08-26"},{"lineNumber":23,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":24,"author":{"gitId":"Francis-Tan"},"content":"@rem Set local scope for the variables with windows NT shell","lastModifiedDate":"2022-08-26"},{"lineNumber":25,"author":{"gitId":"Francis-Tan"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":27,"author":{"gitId":"Francis-Tan"},"content":"set DIRNAME\u003d%~dp0","lastModifiedDate":"2022-08-26"},{"lineNumber":28,"author":{"gitId":"Francis-Tan"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d.","lastModifiedDate":"2022-08-26"},{"lineNumber":29,"author":{"gitId":"Francis-Tan"},"content":"set APP_BASE_NAME\u003d%~n0","lastModifiedDate":"2022-08-26"},{"lineNumber":30,"author":{"gitId":"Francis-Tan"},"content":"set APP_HOME\u003d%DIRNAME%","lastModifiedDate":"2022-08-26"},{"lineNumber":31,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":32,"author":{"gitId":"Francis-Tan"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.","lastModifiedDate":"2022-08-26"},{"lineNumber":33,"author":{"gitId":"Francis-Tan"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi","lastModifiedDate":"2022-08-26"},{"lineNumber":34,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":35,"author":{"gitId":"Francis-Tan"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.","lastModifiedDate":"2022-08-26"},{"lineNumber":36,"author":{"gitId":"Francis-Tan"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\"","lastModifiedDate":"2022-08-26"},{"lineNumber":37,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":38,"author":{"gitId":"Francis-Tan"},"content":"@rem Find java.exe","lastModifiedDate":"2022-08-26"},{"lineNumber":39,"author":{"gitId":"Francis-Tan"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome","lastModifiedDate":"2022-08-26"},{"lineNumber":40,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":41,"author":{"gitId":"Francis-Tan"},"content":"set JAVA_EXE\u003djava.exe","lastModifiedDate":"2022-08-26"},{"lineNumber":42,"author":{"gitId":"Francis-Tan"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261","lastModifiedDate":"2022-08-26"},{"lineNumber":43,"author":{"gitId":"Francis-Tan"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute","lastModifiedDate":"2022-08-26"},{"lineNumber":44,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":45,"author":{"gitId":"Francis-Tan"},"content":"echo.","lastModifiedDate":"2022-08-26"},{"lineNumber":46,"author":{"gitId":"Francis-Tan"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH.","lastModifiedDate":"2022-08-26"},{"lineNumber":47,"author":{"gitId":"Francis-Tan"},"content":"echo.","lastModifiedDate":"2022-08-26"},{"lineNumber":48,"author":{"gitId":"Francis-Tan"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2022-08-26"},{"lineNumber":49,"author":{"gitId":"Francis-Tan"},"content":"echo location of your Java installation.","lastModifiedDate":"2022-08-26"},{"lineNumber":50,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":51,"author":{"gitId":"Francis-Tan"},"content":"goto fail","lastModifiedDate":"2022-08-26"},{"lineNumber":52,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":53,"author":{"gitId":"Francis-Tan"},"content":":findJavaFromJavaHome","lastModifiedDate":"2022-08-26"},{"lineNumber":54,"author":{"gitId":"Francis-Tan"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%","lastModifiedDate":"2022-08-26"},{"lineNumber":55,"author":{"gitId":"Francis-Tan"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe","lastModifiedDate":"2022-08-26"},{"lineNumber":56,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":57,"author":{"gitId":"Francis-Tan"},"content":"if exist \"%JAVA_EXE%\" goto execute","lastModifiedDate":"2022-08-26"},{"lineNumber":58,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":59,"author":{"gitId":"Francis-Tan"},"content":"echo.","lastModifiedDate":"2022-08-26"},{"lineNumber":60,"author":{"gitId":"Francis-Tan"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%","lastModifiedDate":"2022-08-26"},{"lineNumber":61,"author":{"gitId":"Francis-Tan"},"content":"echo.","lastModifiedDate":"2022-08-26"},{"lineNumber":62,"author":{"gitId":"Francis-Tan"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2022-08-26"},{"lineNumber":63,"author":{"gitId":"Francis-Tan"},"content":"echo location of your Java installation.","lastModifiedDate":"2022-08-26"},{"lineNumber":64,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":65,"author":{"gitId":"Francis-Tan"},"content":"goto fail","lastModifiedDate":"2022-08-26"},{"lineNumber":66,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":67,"author":{"gitId":"Francis-Tan"},"content":":execute","lastModifiedDate":"2022-08-26"},{"lineNumber":68,"author":{"gitId":"Francis-Tan"},"content":"@rem Setup the command line","lastModifiedDate":"2022-08-26"},{"lineNumber":69,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":70,"author":{"gitId":"Francis-Tan"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar","lastModifiedDate":"2022-08-26"},{"lineNumber":71,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":72,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":73,"author":{"gitId":"Francis-Tan"},"content":"@rem Execute Gradle","lastModifiedDate":"2022-08-26"},{"lineNumber":74,"author":{"gitId":"Francis-Tan"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*","lastModifiedDate":"2022-08-26"},{"lineNumber":75,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":76,"author":{"gitId":"Francis-Tan"},"content":":end","lastModifiedDate":"2022-08-26"},{"lineNumber":77,"author":{"gitId":"Francis-Tan"},"content":"@rem End local scope for the variables with windows NT shell","lastModifiedDate":"2022-08-26"},{"lineNumber":78,"author":{"gitId":"Francis-Tan"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd","lastModifiedDate":"2022-08-26"},{"lineNumber":79,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":80,"author":{"gitId":"Francis-Tan"},"content":":fail","lastModifiedDate":"2022-08-26"},{"lineNumber":81,"author":{"gitId":"Francis-Tan"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of","lastModifiedDate":"2022-08-26"},{"lineNumber":82,"author":{"gitId":"Francis-Tan"},"content":"rem the _cmd.exe /c_ return code!","lastModifiedDate":"2022-08-26"},{"lineNumber":83,"author":{"gitId":"Francis-Tan"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1","lastModifiedDate":"2022-08-26"},{"lineNumber":84,"author":{"gitId":"Francis-Tan"},"content":"exit /b 1","lastModifiedDate":"2022-08-26"},{"lineNumber":85,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":86,"author":{"gitId":"Francis-Tan"},"content":":mainEnd","lastModifiedDate":"2022-08-26"},{"lineNumber":87,"author":{"gitId":"Francis-Tan"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal","lastModifiedDate":"2022-08-26"},{"lineNumber":88,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":89,"author":{"gitId":"Francis-Tan"},"content":":omega","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"Francis-Tan":89}},{"path":"src/main/java/duke/services/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Francis-Tan"},"content":"package duke.services;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"Francis-Tan"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-27"},{"lineNumber":4,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":5,"author":{"gitId":"Francis-Tan"},"content":"/**","lastModifiedDate":"2022-08-17"},{"lineNumber":6,"author":{"gitId":"Francis-Tan"},"content":" * Personal Assistant that helps you keep track of your tasks","lastModifiedDate":"2022-08-25"},{"lineNumber":7,"author":{"gitId":"Francis-Tan"},"content":" */","lastModifiedDate":"2022-08-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":10,"author":{"gitId":"Francis-Tan"},"content":"    public static void run() throws IOException {","lastModifiedDate":"2022-08-27"},{"lineNumber":11,"author":{"gitId":"Francis-Tan"},"content":"        Storage.LoadData();","lastModifiedDate":"2022-08-27"},{"lineNumber":12,"author":{"gitId":"Francis-Tan"},"content":"        UI.introduceSelf();","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"Francis-Tan"},"content":"        Parser.handleUserInputs();","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"Francis-Tan"},"content":"        Storage.SaveData();","lastModifiedDate":"2022-08-27"},{"lineNumber":15,"author":{"gitId":"Francis-Tan"},"content":"        UI.sayGoodbye();","lastModifiedDate":"2022-08-26"},{"lineNumber":16,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":17,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":18,"author":{"gitId":"Francis-Tan"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2022-08-27"},{"lineNumber":19,"author":{"gitId":"Francis-Tan"},"content":"        run();","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Francis-Tan":18,"-":3}},{"path":"src/main/java/duke/services/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Francis-Tan"},"content":"package duke.services;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"Francis-Tan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"Francis-Tan"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"Francis-Tan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"Francis-Tan"},"content":"import java.time.format.DateTimeFormatterBuilder;","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"Francis-Tan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"Francis-Tan"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"Francis-Tan"},"content":"import java.util.Locale;","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"Francis-Tan"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":12,"author":{"gitId":"Francis-Tan"},"content":"/** Handles reading of user commands */","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"Francis-Tan"},"content":"public class Parser {","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"Francis-Tan"},"content":"    /** Points to the current word being read in the current command */","lastModifiedDate":"2022-08-26"},{"lineNumber":16,"author":{"gitId":"Francis-Tan"},"content":"    private static int currWordIndex \u003d 0;","lastModifiedDate":"2022-08-26"},{"lineNumber":17,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":18,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"Francis-Tan"},"content":"     * Receives user\u0027s inputs and responds to them until \"bye\" is entered","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"Francis-Tan"},"content":"    public static void handleUserInputs() {","lastModifiedDate":"2022-08-26"},{"lineNumber":22,"author":{"gitId":"Francis-Tan"},"content":"        Scanner inputScanner \u003d new Scanner(System.in);","lastModifiedDate":"2022-08-26"},{"lineNumber":23,"author":{"gitId":"Francis-Tan"},"content":"        String[] words \u003d Arrays.stream(inputScanner.nextLine().strip().split(\" \")).toArray(String[]::new);","lastModifiedDate":"2022-08-26"},{"lineNumber":24,"author":{"gitId":"Francis-Tan"},"content":"        while (!(words.length \u003d\u003d 1 \u0026\u0026 words[0].equals(\"bye\"))) {","lastModifiedDate":"2022-08-26"},{"lineNumber":25,"author":{"gitId":"Francis-Tan"},"content":"            if (words.length \u003e 0) {","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"Francis-Tan"},"content":"                try {","lastModifiedDate":"2022-08-26"},{"lineNumber":27,"author":{"gitId":"Francis-Tan"},"content":"                    if (words.length \u003d\u003d 1 \u0026\u0026 words[0].equals(\"list\")) {","lastModifiedDate":"2022-08-26"},{"lineNumber":28,"author":{"gitId":"Francis-Tan"},"content":"                        TaskList.listTasks(); //could put words.length \u003d\u003d 1 cases all here","lastModifiedDate":"2022-08-26"},{"lineNumber":29,"author":{"gitId":"Francis-Tan"},"content":"                    } else if (words.length \u003d\u003d 1 \u0026\u0026 words[0].equals(\"SAVE\")) {","lastModifiedDate":"2022-08-27"},{"lineNumber":30,"author":{"gitId":"Francis-Tan"},"content":"                        Storage.willWipeData \u003d false;","lastModifiedDate":"2022-08-28"},{"lineNumber":31,"author":{"gitId":"Francis-Tan"},"content":"                        UI.sayLines(new String[] {\"Data will be saved on exit\"});","lastModifiedDate":"2022-08-27"},{"lineNumber":32,"author":{"gitId":"Francis-Tan"},"content":"                    } else if (words.length \u003d\u003d 1 \u0026\u0026 words[0].equals(\"WIPE\")) {","lastModifiedDate":"2022-08-27"},{"lineNumber":33,"author":{"gitId":"Francis-Tan"},"content":"                        Storage.willWipeData \u003d true;","lastModifiedDate":"2022-08-28"},{"lineNumber":34,"author":{"gitId":"Francis-Tan"},"content":"                        UI.sayLines(new String[] {\"Data will be wiped on exit\"});","lastModifiedDate":"2022-08-27"},{"lineNumber":35,"author":{"gitId":"Francis-Tan"},"content":"                    } else if (words[0].equals(\"todo\")) {","lastModifiedDate":"2022-08-26"},{"lineNumber":36,"author":{"gitId":"Francis-Tan"},"content":"                        TaskList.addTodo(words);","lastModifiedDate":"2022-08-26"},{"lineNumber":37,"author":{"gitId":"Francis-Tan"},"content":"                    } else if (words[0].equals(\"deadline\")) {","lastModifiedDate":"2022-08-26"},{"lineNumber":38,"author":{"gitId":"Francis-Tan"},"content":"                        TaskList.addDeadline(words);","lastModifiedDate":"2022-08-26"},{"lineNumber":39,"author":{"gitId":"Francis-Tan"},"content":"                    } else if (words[0].equals(\"event\")) {","lastModifiedDate":"2022-08-26"},{"lineNumber":40,"author":{"gitId":"Francis-Tan"},"content":"                        TaskList.addEvent(words);","lastModifiedDate":"2022-08-26"},{"lineNumber":41,"author":{"gitId":"Francis-Tan"},"content":"                    } else if (words[0].equals(\"mark\")) {","lastModifiedDate":"2022-08-26"},{"lineNumber":42,"author":{"gitId":"Francis-Tan"},"content":"                        TaskList.markTaskAsDone(words);","lastModifiedDate":"2022-08-26"},{"lineNumber":43,"author":{"gitId":"Francis-Tan"},"content":"                    } else if (words[0].equals(\"unmark\")) {","lastModifiedDate":"2022-08-26"},{"lineNumber":44,"author":{"gitId":"Francis-Tan"},"content":"                        TaskList.markTaskAsNotDone(words);","lastModifiedDate":"2022-08-26"},{"lineNumber":45,"author":{"gitId":"Francis-Tan"},"content":"                    } else if (words[0].equals(\"delete\")) {","lastModifiedDate":"2022-08-26"},{"lineNumber":46,"author":{"gitId":"Francis-Tan"},"content":"                        TaskList.deleteTask(words);","lastModifiedDate":"2022-08-26"},{"lineNumber":47,"author":{"gitId":"Francis-Tan"},"content":"                    } else if (words[0].equals(\"find\")) {","lastModifiedDate":"2022-08-28"},{"lineNumber":48,"author":{"gitId":"Francis-Tan"},"content":"                        TaskList.findTasksContainingKeyword(words);","lastModifiedDate":"2022-08-28"},{"lineNumber":49,"author":{"gitId":"Francis-Tan"},"content":"                    } else {","lastModifiedDate":"2022-08-26"},{"lineNumber":50,"author":{"gitId":"Francis-Tan"},"content":"                        UI.sayLines(new String[]{\"I\u0027m sorry, I don\u0027t know what that means\"});","lastModifiedDate":"2022-08-26"},{"lineNumber":51,"author":{"gitId":"Francis-Tan"},"content":"                    }","lastModifiedDate":"2022-08-26"},{"lineNumber":52,"author":{"gitId":"Francis-Tan"},"content":"                } catch (IllegalArgumentException e) {","lastModifiedDate":"2022-08-26"},{"lineNumber":53,"author":{"gitId":"Francis-Tan"},"content":"                    UI.sayLines(new String[]{e.getMessage()});","lastModifiedDate":"2022-08-26"},{"lineNumber":54,"author":{"gitId":"Francis-Tan"},"content":"                }","lastModifiedDate":"2022-08-26"},{"lineNumber":55,"author":{"gitId":"Francis-Tan"},"content":"            }","lastModifiedDate":"2022-08-26"},{"lineNumber":56,"author":{"gitId":"Francis-Tan"},"content":"            words \u003d Arrays.stream(inputScanner.nextLine().strip().split(\" \")).toArray(String[]::new);","lastModifiedDate":"2022-08-26"},{"lineNumber":57,"author":{"gitId":"Francis-Tan"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":58,"author":{"gitId":"Francis-Tan"},"content":"        inputScanner.close();","lastModifiedDate":"2022-08-26"},{"lineNumber":59,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":60,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":61,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":62,"author":{"gitId":"Francis-Tan"},"content":"     * Retrieves the description argument in the command","lastModifiedDate":"2022-08-26"},{"lineNumber":63,"author":{"gitId":"Francis-Tan"},"content":"     * @param words The words of the command entered, first is some valid command name","lastModifiedDate":"2022-08-26"},{"lineNumber":64,"author":{"gitId":"Francis-Tan"},"content":"     * @param stop The word before which the description ends","lastModifiedDate":"2022-08-26"},{"lineNumber":65,"author":{"gitId":"Francis-Tan"},"content":"     * @return The description specified in words","lastModifiedDate":"2022-08-26"},{"lineNumber":66,"author":{"gitId":"Francis-Tan"},"content":"     * @throws IllegalArgumentException If words specifies an empty description","lastModifiedDate":"2022-08-26"},{"lineNumber":67,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":68,"author":{"gitId":"Francis-Tan"},"content":"    public static String getDescription(String[] words, String stop) {","lastModifiedDate":"2022-08-26"},{"lineNumber":69,"author":{"gitId":"Francis-Tan"},"content":"        currWordIndex \u003d 1;","lastModifiedDate":"2022-08-27"},{"lineNumber":70,"author":{"gitId":"Francis-Tan"},"content":"        StringBuilder descBuilder \u003d new StringBuilder();","lastModifiedDate":"2022-08-26"},{"lineNumber":71,"author":{"gitId":"Francis-Tan"},"content":"        boolean emptyDesc \u003d true;","lastModifiedDate":"2022-08-26"},{"lineNumber":72,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":73,"author":{"gitId":"Francis-Tan"},"content":"        while (currWordIndex \u003c words.length \u0026\u0026 !words[currWordIndex].equals(stop)) {","lastModifiedDate":"2022-08-26"},{"lineNumber":74,"author":{"gitId":"Francis-Tan"},"content":"            if (words[currWordIndex].isEmpty()) {","lastModifiedDate":"2022-08-26"},{"lineNumber":75,"author":{"gitId":"Francis-Tan"},"content":"                descBuilder.append(\" \");","lastModifiedDate":"2022-08-26"},{"lineNumber":76,"author":{"gitId":"Francis-Tan"},"content":"            } else {","lastModifiedDate":"2022-08-26"},{"lineNumber":77,"author":{"gitId":"Francis-Tan"},"content":"                descBuilder.append(words[currWordIndex]).append(\" \");","lastModifiedDate":"2022-08-26"},{"lineNumber":78,"author":{"gitId":"Francis-Tan"},"content":"                emptyDesc \u003d false;","lastModifiedDate":"2022-08-26"},{"lineNumber":79,"author":{"gitId":"Francis-Tan"},"content":"            }","lastModifiedDate":"2022-08-26"},{"lineNumber":80,"author":{"gitId":"Francis-Tan"},"content":"            ++currWordIndex;","lastModifiedDate":"2022-08-26"},{"lineNumber":81,"author":{"gitId":"Francis-Tan"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":82,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":83,"author":{"gitId":"Francis-Tan"},"content":"        if (emptyDesc) {","lastModifiedDate":"2022-08-26"},{"lineNumber":84,"author":{"gitId":"Francis-Tan"},"content":"            throw new IllegalArgumentException(\"OOPS!!! Description can\u0027t be empty\");","lastModifiedDate":"2022-08-28"},{"lineNumber":85,"author":{"gitId":"Francis-Tan"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":86,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":87,"author":{"gitId":"Francis-Tan"},"content":"        return descBuilder.deleteCharAt(descBuilder.length()-1).toString();","lastModifiedDate":"2022-08-26"},{"lineNumber":88,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":89,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":90,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":91,"author":{"gitId":"Francis-Tan"},"content":"     * Retrieves the timing argument in the command, which must be of the form d/M/yyyy followed by an optional (h:mm)am/pm","lastModifiedDate":"2022-08-28"},{"lineNumber":92,"author":{"gitId":"Francis-Tan"},"content":"     * @param words The words of the command entered, first is some valid command name","lastModifiedDate":"2022-08-26"},{"lineNumber":93,"author":{"gitId":"Francis-Tan"},"content":"     * @param flag The flag that the timing belongs to","lastModifiedDate":"2022-08-26"},{"lineNumber":94,"author":{"gitId":"Francis-Tan"},"content":"     * @return The timing specified in words","lastModifiedDate":"2022-08-26"},{"lineNumber":95,"author":{"gitId":"Francis-Tan"},"content":"     * @throws IllegalArgumentException If words is missing flag or the timing is empty/incorrect format","lastModifiedDate":"2022-08-28"},{"lineNumber":96,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":97,"author":{"gitId":"Francis-Tan"},"content":"    public static String getTiming(String[] words, String flag) {","lastModifiedDate":"2022-08-26"},{"lineNumber":98,"author":{"gitId":"Francis-Tan"},"content":"        if (currWordIndex \u003e\u003d words.length) {","lastModifiedDate":"2022-08-26"},{"lineNumber":99,"author":{"gitId":"Francis-Tan"},"content":"            throw new IllegalArgumentException(\"OOPS!!! \" + flag + \" not found\");","lastModifiedDate":"2022-08-28"},{"lineNumber":100,"author":{"gitId":"Francis-Tan"},"content":"        } else if (currWordIndex \u003d\u003d words.length - 1) {","lastModifiedDate":"2022-08-26"},{"lineNumber":101,"author":{"gitId":"Francis-Tan"},"content":"            throw new IllegalArgumentException(\"OOPS!!! Timing for \" + flag + \" can\u0027t be empty\");","lastModifiedDate":"2022-08-28"},{"lineNumber":102,"author":{"gitId":"Francis-Tan"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":103,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":104,"author":{"gitId":"Francis-Tan"},"content":"        ++currWordIndex;","lastModifiedDate":"2022-08-26"},{"lineNumber":105,"author":{"gitId":"Francis-Tan"},"content":"        try {","lastModifiedDate":"2022-08-28"},{"lineNumber":106,"author":{"gitId":"Francis-Tan"},"content":"            return (currWordIndex \u003d\u003d words.length - 1)","lastModifiedDate":"2022-08-28"},{"lineNumber":107,"author":{"gitId":"Francis-Tan"},"content":"                    ? reformatDate(words[currWordIndex], \"d/M/yyyy\", \"d MMM yyyy\")","lastModifiedDate":"2022-08-28"},{"lineNumber":108,"author":{"gitId":"Francis-Tan"},"content":"                    : reformatDateTime(words[currWordIndex] + \" \" + words[++currWordIndex],","lastModifiedDate":"2022-08-28"},{"lineNumber":109,"author":{"gitId":"Francis-Tan"},"content":"                    \"d/M/yyyy h:mma\", \"d MMM yyyy, h:mma\");","lastModifiedDate":"2022-08-28"},{"lineNumber":110,"author":{"gitId":"Francis-Tan"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-08-28"},{"lineNumber":111,"author":{"gitId":"Francis-Tan"},"content":"            throw new IllegalArgumentException(\"OOPS!!! I don\u0027t understand that date or time\");","lastModifiedDate":"2022-08-28"},{"lineNumber":112,"author":{"gitId":"Francis-Tan"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":113,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":114,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":115,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-28"},{"lineNumber":116,"author":{"gitId":"Francis-Tan"},"content":"     * Converts the date to a new format","lastModifiedDate":"2022-08-28"},{"lineNumber":117,"author":{"gitId":"Francis-Tan"},"content":"     * @param date The date to reformat","lastModifiedDate":"2022-08-28"},{"lineNumber":118,"author":{"gitId":"Francis-Tan"},"content":"     * @param inFormat The current format","lastModifiedDate":"2022-08-28"},{"lineNumber":119,"author":{"gitId":"Francis-Tan"},"content":"     * @param outFormat The new format","lastModifiedDate":"2022-08-28"},{"lineNumber":120,"author":{"gitId":"Francis-Tan"},"content":"     * @return The reformatted date","lastModifiedDate":"2022-08-28"},{"lineNumber":121,"author":{"gitId":"Francis-Tan"},"content":"     * @throws IllegalArgumentException If date is in an incorrect format","lastModifiedDate":"2022-08-28"},{"lineNumber":122,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-28"},{"lineNumber":123,"author":{"gitId":"Francis-Tan"},"content":"    public static String reformatDate(String date, String inFormat, String outFormat) {","lastModifiedDate":"2022-08-28"},{"lineNumber":124,"author":{"gitId":"Francis-Tan"},"content":"        DateTimeFormatter formatter \u003d new DateTimeFormatterBuilder()","lastModifiedDate":"2022-08-28"},{"lineNumber":125,"author":{"gitId":"Francis-Tan"},"content":"                .appendPattern(inFormat)","lastModifiedDate":"2022-08-28"},{"lineNumber":126,"author":{"gitId":"Francis-Tan"},"content":"                .toFormatter(Locale.getDefault());","lastModifiedDate":"2022-08-28"},{"lineNumber":127,"author":{"gitId":"Francis-Tan"},"content":"        LocalDate ld \u003d LocalDate.parse(date, formatter);","lastModifiedDate":"2022-08-28"},{"lineNumber":128,"author":{"gitId":"Francis-Tan"},"content":"        return ld.format(DateTimeFormatter.ofPattern(outFormat, Locale.getDefault()));","lastModifiedDate":"2022-08-28"},{"lineNumber":129,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":130,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":131,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-28"},{"lineNumber":132,"author":{"gitId":"Francis-Tan"},"content":"     * Converts the datetime to a new format","lastModifiedDate":"2022-08-28"},{"lineNumber":133,"author":{"gitId":"Francis-Tan"},"content":"     * @param dateTime The datetime to reformat","lastModifiedDate":"2022-08-28"},{"lineNumber":134,"author":{"gitId":"Francis-Tan"},"content":"     * @param inFormat The current format","lastModifiedDate":"2022-08-28"},{"lineNumber":135,"author":{"gitId":"Francis-Tan"},"content":"     * @param outFormat The new format","lastModifiedDate":"2022-08-28"},{"lineNumber":136,"author":{"gitId":"Francis-Tan"},"content":"     * @return The reformatted datetime","lastModifiedDate":"2022-08-28"},{"lineNumber":137,"author":{"gitId":"Francis-Tan"},"content":"     * @throws IllegalArgumentException If datetime is in an incorrect format","lastModifiedDate":"2022-08-28"},{"lineNumber":138,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-28"},{"lineNumber":139,"author":{"gitId":"Francis-Tan"},"content":"    public static String reformatDateTime(String dateTime, String inFormat, String outFormat) {","lastModifiedDate":"2022-08-28"},{"lineNumber":140,"author":{"gitId":"Francis-Tan"},"content":"        DateTimeFormatter formatter \u003d new DateTimeFormatterBuilder()","lastModifiedDate":"2022-08-28"},{"lineNumber":141,"author":{"gitId":"Francis-Tan"},"content":"                .parseCaseInsensitive()","lastModifiedDate":"2022-08-28"},{"lineNumber":142,"author":{"gitId":"Francis-Tan"},"content":"                .appendPattern(inFormat)","lastModifiedDate":"2022-08-28"},{"lineNumber":143,"author":{"gitId":"Francis-Tan"},"content":"                .toFormatter(Locale.getDefault());","lastModifiedDate":"2022-08-28"},{"lineNumber":144,"author":{"gitId":"Francis-Tan"},"content":"        LocalDateTime ldt \u003d LocalDateTime.parse(dateTime, formatter);","lastModifiedDate":"2022-08-28"},{"lineNumber":145,"author":{"gitId":"Francis-Tan"},"content":"        return ldt.format(DateTimeFormatter.ofPattern(outFormat, Locale.getDefault()));","lastModifiedDate":"2022-08-28"},{"lineNumber":146,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":147,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":148,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":149,"author":{"gitId":"Francis-Tan"},"content":"     * Gets the task number (integer pointing to a task) specified in the command","lastModifiedDate":"2022-08-26"},{"lineNumber":150,"author":{"gitId":"Francis-Tan"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":151,"author":{"gitId":"Francis-Tan"},"content":"     * @param words The words of the command entered, first is always some valid command name","lastModifiedDate":"2022-08-26"},{"lineNumber":152,"author":{"gitId":"Francis-Tan"},"content":"     * @return The task number specified","lastModifiedDate":"2022-08-26"},{"lineNumber":153,"author":{"gitId":"Francis-Tan"},"content":"     * @throws IllegalArgumentException If the argument(s) supplied in words isn\u0027t an integer from 1 to the number of stored tasks","lastModifiedDate":"2022-08-26"},{"lineNumber":154,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":155,"author":{"gitId":"Francis-Tan"},"content":"    public static int getTaskNumber(String[] words) {","lastModifiedDate":"2022-08-26"},{"lineNumber":156,"author":{"gitId":"Francis-Tan"},"content":"        if (TaskList.getTaskCount() \u003d\u003d 0) {","lastModifiedDate":"2022-08-26"},{"lineNumber":157,"author":{"gitId":"Francis-Tan"},"content":"            throw new IllegalArgumentException(\"OOPS!!! No tasks stored for me to do that\");","lastModifiedDate":"2022-08-28"},{"lineNumber":158,"author":{"gitId":"Francis-Tan"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":159,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":160,"author":{"gitId":"Francis-Tan"},"content":"        int taskNumber \u003d 0;","lastModifiedDate":"2022-08-26"},{"lineNumber":161,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":162,"author":{"gitId":"Francis-Tan"},"content":"        try {","lastModifiedDate":"2022-08-26"},{"lineNumber":163,"author":{"gitId":"Francis-Tan"},"content":"            taskNumber \u003d (words.length \u003d\u003d 2) ? Integer.parseInt(words[1]) : 0;","lastModifiedDate":"2022-08-27"},{"lineNumber":164,"author":{"gitId":"Francis-Tan"},"content":"            if (taskNumber \u003c\u003d 0 || taskNumber \u003e TaskList.getTaskCount()) {","lastModifiedDate":"2022-08-26"},{"lineNumber":165,"author":{"gitId":"Francis-Tan"},"content":"                throw new IllegalArgumentException();","lastModifiedDate":"2022-08-26"},{"lineNumber":166,"author":{"gitId":"Francis-Tan"},"content":"            }","lastModifiedDate":"2022-08-26"},{"lineNumber":167,"author":{"gitId":"Francis-Tan"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2022-08-26"},{"lineNumber":168,"author":{"gitId":"Francis-Tan"},"content":"            throw new IllegalArgumentException(\"OOPS!!! The task number must be from 1 to \" + TaskList.getTaskCount());","lastModifiedDate":"2022-08-28"},{"lineNumber":169,"author":{"gitId":"Francis-Tan"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":170,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":171,"author":{"gitId":"Francis-Tan"},"content":"        return taskNumber;","lastModifiedDate":"2022-08-26"},{"lineNumber":172,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":173,"author":{"gitId":"Francis-Tan"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"Francis-Tan":173}},{"path":"src/main/java/duke/services/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Francis-Tan"},"content":"package duke.services;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"Francis-Tan"},"content":"import duke.tasks.*;","lastModifiedDate":"2022-08-27"},{"lineNumber":4,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":5,"author":{"gitId":"Francis-Tan"},"content":"import java.io.File;","lastModifiedDate":"2022-08-27"},{"lineNumber":6,"author":{"gitId":"Francis-Tan"},"content":"import java.io.FileReader;","lastModifiedDate":"2022-08-27"},{"lineNumber":7,"author":{"gitId":"Francis-Tan"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2022-08-27"},{"lineNumber":8,"author":{"gitId":"Francis-Tan"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-08-27"},{"lineNumber":9,"author":{"gitId":"Francis-Tan"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2022-08-27"},{"lineNumber":10,"author":{"gitId":"Francis-Tan"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-27"},{"lineNumber":11,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":12,"author":{"gitId":"Francis-Tan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-08-27"},{"lineNumber":13,"author":{"gitId":"Francis-Tan"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-08-27"},{"lineNumber":14,"author":{"gitId":"Francis-Tan"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-08-27"},{"lineNumber":15,"author":{"gitId":"Francis-Tan"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-08-27"},{"lineNumber":16,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":17,"author":{"gitId":"Francis-Tan"},"content":"/** Handles saving and loading data */","lastModifiedDate":"2022-08-26"},{"lineNumber":18,"author":{"gitId":"Francis-Tan"},"content":"public class Storage {","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":20,"author":{"gitId":"Francis-Tan"},"content":"    /** Saved data on the stored tasks */","lastModifiedDate":"2022-08-27"},{"lineNumber":21,"author":{"gitId":"Francis-Tan"},"content":"    private static File saveData;","lastModifiedDate":"2022-08-27"},{"lineNumber":22,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":23,"author":{"gitId":"Francis-Tan"},"content":"    /** Is data going to be wiped on exit? */","lastModifiedDate":"2022-08-28"},{"lineNumber":24,"author":{"gitId":"Francis-Tan"},"content":"    public static boolean willWipeData \u003d false;","lastModifiedDate":"2022-08-28"},{"lineNumber":25,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":26,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":27,"author":{"gitId":"Francis-Tan"},"content":"     * Loads saved data on stored tasks from Duke_Tasks.txt if it exists, otherwise creates it","lastModifiedDate":"2022-08-27"},{"lineNumber":28,"author":{"gitId":"Francis-Tan"},"content":"     *","lastModifiedDate":"2022-08-28"},{"lineNumber":29,"author":{"gitId":"Francis-Tan"},"content":"     * @throws IOException If an I/O error occurs or the parent directory doesn\u0027t exist","lastModifiedDate":"2022-08-27"},{"lineNumber":30,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":31,"author":{"gitId":"Francis-Tan"},"content":"    public static void LoadData() throws IOException {","lastModifiedDate":"2022-08-27"},{"lineNumber":32,"author":{"gitId":"Francis-Tan"},"content":"        Path path \u003d Paths.get(\"Duke_Tasks\");","lastModifiedDate":"2022-08-27"},{"lineNumber":33,"author":{"gitId":"Francis-Tan"},"content":"        boolean directoryExists \u003d Files.exists(path);","lastModifiedDate":"2022-08-27"},{"lineNumber":34,"author":{"gitId":"Francis-Tan"},"content":"        if (directoryExists) {","lastModifiedDate":"2022-08-27"},{"lineNumber":35,"author":{"gitId":"Francis-Tan"},"content":"            saveData \u003d path.toFile();","lastModifiedDate":"2022-08-27"},{"lineNumber":36,"author":{"gitId":"Francis-Tan"},"content":"            BufferedReader br \u003d new BufferedReader(new FileReader(saveData));","lastModifiedDate":"2022-08-27"},{"lineNumber":37,"author":{"gitId":"Francis-Tan"},"content":"            String line \u003d br.readLine();","lastModifiedDate":"2022-08-27"},{"lineNumber":38,"author":{"gitId":"Francis-Tan"},"content":"            String[] words;","lastModifiedDate":"2022-08-27"},{"lineNumber":39,"author":{"gitId":"Francis-Tan"},"content":"            Task task;","lastModifiedDate":"2022-08-27"},{"lineNumber":40,"author":{"gitId":"Francis-Tan"},"content":"            while (line !\u003d null) {","lastModifiedDate":"2022-08-27"},{"lineNumber":41,"author":{"gitId":"Francis-Tan"},"content":"                //[typeSymbol][1 or 0] [desc] [flag] [timing]","lastModifiedDate":"2022-08-28"},{"lineNumber":42,"author":{"gitId":"Francis-Tan"},"content":"                words \u003d Arrays.stream(line.split(\" \")).toArray(String[]::new);","lastModifiedDate":"2022-08-27"},{"lineNumber":43,"author":{"gitId":"Francis-Tan"},"content":"                if (line.charAt(0) \u003d\u003d \u0027T\u0027) {","lastModifiedDate":"2022-08-27"},{"lineNumber":44,"author":{"gitId":"Francis-Tan"},"content":"                    task \u003d new Todo(Parser.getDescription(words, null));","lastModifiedDate":"2022-08-27"},{"lineNumber":45,"author":{"gitId":"Francis-Tan"},"content":"                } else if (line.charAt(0) \u003d\u003d \u0027D\u0027) {","lastModifiedDate":"2022-08-27"},{"lineNumber":46,"author":{"gitId":"Francis-Tan"},"content":"                    task \u003d new Deadline(Parser.getDescription(words, \"/by\"), Parser.getTiming(words, \"/by\"));","lastModifiedDate":"2022-08-27"},{"lineNumber":47,"author":{"gitId":"Francis-Tan"},"content":"                } else if (line.charAt(0) \u003d\u003d \u0027E\u0027) {","lastModifiedDate":"2022-08-27"},{"lineNumber":48,"author":{"gitId":"Francis-Tan"},"content":"                    task \u003d new Event(Parser.getDescription(words, \"/at\"), Parser.getTiming(words, \"/at\"));","lastModifiedDate":"2022-08-27"},{"lineNumber":49,"author":{"gitId":"Francis-Tan"},"content":"                } else {","lastModifiedDate":"2022-08-27"},{"lineNumber":50,"author":{"gitId":"Francis-Tan"},"content":"                    throw new IllegalArgumentException(\"OOPS!!! Found a stored task of unknown type\");","lastModifiedDate":"2022-08-27"},{"lineNumber":51,"author":{"gitId":"Francis-Tan"},"content":"                }","lastModifiedDate":"2022-08-27"},{"lineNumber":52,"author":{"gitId":"Francis-Tan"},"content":"                if (line.charAt(1) \u003d\u003d \u00271\u0027) {","lastModifiedDate":"2022-08-28"},{"lineNumber":53,"author":{"gitId":"Francis-Tan"},"content":"                    task.markAsDone();","lastModifiedDate":"2022-08-27"},{"lineNumber":54,"author":{"gitId":"Francis-Tan"},"content":"                }","lastModifiedDate":"2022-08-27"},{"lineNumber":55,"author":{"gitId":"Francis-Tan"},"content":"                TaskList.tasks.add(task);","lastModifiedDate":"2022-08-27"},{"lineNumber":56,"author":{"gitId":"Francis-Tan"},"content":"                line \u003d br.readLine();","lastModifiedDate":"2022-08-27"},{"lineNumber":57,"author":{"gitId":"Francis-Tan"},"content":"            }","lastModifiedDate":"2022-08-27"},{"lineNumber":58,"author":{"gitId":"Francis-Tan"},"content":"        } else {","lastModifiedDate":"2022-08-27"},{"lineNumber":59,"author":{"gitId":"Francis-Tan"},"content":"            saveData \u003d Files.createFile(path).toFile();","lastModifiedDate":"2022-08-27"},{"lineNumber":60,"author":{"gitId":"Francis-Tan"},"content":"        }","lastModifiedDate":"2022-08-27"},{"lineNumber":61,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":62,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":63,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":64,"author":{"gitId":"Francis-Tan"},"content":"     * Writes saved data on stored tasks to Duke_Tasks.txt","lastModifiedDate":"2022-08-27"},{"lineNumber":65,"author":{"gitId":"Francis-Tan"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":66,"author":{"gitId":"Francis-Tan"},"content":"     * @throws IOException If an I/O error occurs or the parent directory doesn\u0027t exist","lastModifiedDate":"2022-08-27"},{"lineNumber":67,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":68,"author":{"gitId":"Francis-Tan"},"content":"    public static void SaveData() throws IOException {","lastModifiedDate":"2022-08-27"},{"lineNumber":69,"author":{"gitId":"Francis-Tan"},"content":"        new FileWriter(saveData).close();","lastModifiedDate":"2022-08-27"},{"lineNumber":70,"author":{"gitId":"Francis-Tan"},"content":"        if (!willWipeData) {","lastModifiedDate":"2022-08-28"},{"lineNumber":71,"author":{"gitId":"Francis-Tan"},"content":"            BufferedWriter bf \u003d new BufferedWriter(new FileWriter(saveData));","lastModifiedDate":"2022-08-27"},{"lineNumber":72,"author":{"gitId":"Francis-Tan"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-08-27"},{"lineNumber":73,"author":{"gitId":"Francis-Tan"},"content":"            for (Task task : TaskList.tasks) {","lastModifiedDate":"2022-08-27"},{"lineNumber":74,"author":{"gitId":"Francis-Tan"},"content":"                //[typeSymbol][1 or 0] [desc] [flag] [timing]","lastModifiedDate":"2022-08-28"},{"lineNumber":75,"author":{"gitId":"Francis-Tan"},"content":"                sb.append(task.getTypeSymbol()).append(task.getStatusIcon().equals(\"X\") ? \u00271\u0027 : \u00270\u0027).append(\" \")","lastModifiedDate":"2022-08-28"},{"lineNumber":76,"author":{"gitId":"Francis-Tan"},"content":"                        .append(task.getDescription());","lastModifiedDate":"2022-08-27"},{"lineNumber":77,"author":{"gitId":"Francis-Tan"},"content":"                if (task instanceof Deadline) {","lastModifiedDate":"2022-08-27"},{"lineNumber":78,"author":{"gitId":"Francis-Tan"},"content":"                    sb.append(\" /by \").append(((Deadline) task).getEnteredDeadline());","lastModifiedDate":"2022-08-28"},{"lineNumber":79,"author":{"gitId":"Francis-Tan"},"content":"                } else if (task instanceof Event) {","lastModifiedDate":"2022-08-27"},{"lineNumber":80,"author":{"gitId":"Francis-Tan"},"content":"                    sb.append(\" /at \").append(((Event) task).getEnteredTime());","lastModifiedDate":"2022-08-28"},{"lineNumber":81,"author":{"gitId":"Francis-Tan"},"content":"                }","lastModifiedDate":"2022-08-27"},{"lineNumber":82,"author":{"gitId":"Francis-Tan"},"content":"                bf.write(sb.toString());","lastModifiedDate":"2022-08-27"},{"lineNumber":83,"author":{"gitId":"Francis-Tan"},"content":"                bf.newLine();","lastModifiedDate":"2022-08-27"},{"lineNumber":84,"author":{"gitId":"Francis-Tan"},"content":"                sb \u003d new StringBuilder();","lastModifiedDate":"2022-08-27"},{"lineNumber":85,"author":{"gitId":"Francis-Tan"},"content":"            }","lastModifiedDate":"2022-08-27"},{"lineNumber":86,"author":{"gitId":"Francis-Tan"},"content":"            bf.close();","lastModifiedDate":"2022-08-27"},{"lineNumber":87,"author":{"gitId":"Francis-Tan"},"content":"        }","lastModifiedDate":"2022-08-27"},{"lineNumber":88,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":89,"author":{"gitId":"Francis-Tan"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"Francis-Tan":89}},{"path":"src/main/java/duke/services/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Francis-Tan"},"content":"package duke.services;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"Francis-Tan"},"content":"import duke.tasks.*;","lastModifiedDate":"2022-08-26"},{"lineNumber":4,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":5,"author":{"gitId":"Francis-Tan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-26"},{"lineNumber":6,"author":{"gitId":"Francis-Tan"},"content":"import java.util.List;","lastModifiedDate":"2022-08-26"},{"lineNumber":7,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":8,"author":{"gitId":"Francis-Tan"},"content":"/** Handles tasks */","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"Francis-Tan"},"content":"public class TaskList {","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"Francis-Tan"},"content":"    /** The tasks stored */","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"Francis-Tan"},"content":"    public static List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-08-27"},{"lineNumber":12,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"Francis-Tan"},"content":"     * Gets the number of tasks stored","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":16,"author":{"gitId":"Francis-Tan"},"content":"    public static int getTaskCount() {","lastModifiedDate":"2022-08-26"},{"lineNumber":17,"author":{"gitId":"Francis-Tan"},"content":"        return tasks.size();","lastModifiedDate":"2022-08-26"},{"lineNumber":18,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"Francis-Tan"},"content":"     * Stores the task and displays outcome","lastModifiedDate":"2022-08-26"},{"lineNumber":22,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":23,"author":{"gitId":"Francis-Tan"},"content":"    public static void addTask(Task task) {","lastModifiedDate":"2022-08-26"},{"lineNumber":24,"author":{"gitId":"Francis-Tan"},"content":"        tasks.add(task);","lastModifiedDate":"2022-08-26"},{"lineNumber":25,"author":{"gitId":"Francis-Tan"},"content":"        UI.sayLines(new String[] {","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"Francis-Tan"},"content":"                \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2022-08-26"},{"lineNumber":27,"author":{"gitId":"Francis-Tan"},"content":"                \"  \" + task,","lastModifiedDate":"2022-08-26"},{"lineNumber":28,"author":{"gitId":"Francis-Tan"},"content":"                \"Now you have \" + tasks.size() + \" task\" + (tasks.size() \u003d\u003d 1 ? \"\" : \"s\") + \" in the list.\"","lastModifiedDate":"2022-08-26"},{"lineNumber":29,"author":{"gitId":"Francis-Tan"},"content":"        });","lastModifiedDate":"2022-08-26"},{"lineNumber":30,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":31,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":32,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":33,"author":{"gitId":"Francis-Tan"},"content":"     * Stores a Todo outlined in the command and displays outcome","lastModifiedDate":"2022-08-26"},{"lineNumber":34,"author":{"gitId":"Francis-Tan"},"content":"     * @param words The words of the command entered, first is always \"todo\"","lastModifiedDate":"2022-08-26"},{"lineNumber":35,"author":{"gitId":"Francis-Tan"},"content":"     * @throws IllegalArgumentException If words specifies an empty description","lastModifiedDate":"2022-08-26"},{"lineNumber":36,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":37,"author":{"gitId":"Francis-Tan"},"content":"    public static void addTodo(String[] words) {","lastModifiedDate":"2022-08-26"},{"lineNumber":38,"author":{"gitId":"Francis-Tan"},"content":"        addTask(new Todo(Parser.getDescription(words, null)));","lastModifiedDate":"2022-08-26"},{"lineNumber":39,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":40,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":41,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":42,"author":{"gitId":"Francis-Tan"},"content":"     * Stores a Deadline outlined in the command and displays outcome","lastModifiedDate":"2022-08-26"},{"lineNumber":43,"author":{"gitId":"Francis-Tan"},"content":"     * @param words The words of the command entered, first is always \"deadline\"","lastModifiedDate":"2022-08-26"},{"lineNumber":44,"author":{"gitId":"Francis-Tan"},"content":"     * @throws IllegalArgumentException if words specifies an empty description or empty date or is missing /by","lastModifiedDate":"2022-08-26"},{"lineNumber":45,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":46,"author":{"gitId":"Francis-Tan"},"content":"    public static void addDeadline(String[] words) {","lastModifiedDate":"2022-08-26"},{"lineNumber":47,"author":{"gitId":"Francis-Tan"},"content":"        addTask(new Deadline(Parser.getDescription(words, \"/by\"), Parser.getTiming(words, \"/by\")));","lastModifiedDate":"2022-08-26"},{"lineNumber":48,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":49,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":50,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":51,"author":{"gitId":"Francis-Tan"},"content":"     * Stores an Event outlined in the command and displays outcome","lastModifiedDate":"2022-08-26"},{"lineNumber":52,"author":{"gitId":"Francis-Tan"},"content":"     * @param words The words of the command entered, first is always \"event\"","lastModifiedDate":"2022-08-26"},{"lineNumber":53,"author":{"gitId":"Francis-Tan"},"content":"     * @throws IllegalArgumentException If words specifies an empty description or empty date or is missing /at","lastModifiedDate":"2022-08-26"},{"lineNumber":54,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":55,"author":{"gitId":"Francis-Tan"},"content":"    public static void addEvent(String[] words) {","lastModifiedDate":"2022-08-26"},{"lineNumber":56,"author":{"gitId":"Francis-Tan"},"content":"        addTask(new Event(Parser.getDescription(words, \"/at\"), Parser.getTiming(words, \"/at\")));","lastModifiedDate":"2022-08-26"},{"lineNumber":57,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":58,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":59,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":60,"author":{"gitId":"Francis-Tan"},"content":"     * Marks the specified task as done and displays outcome","lastModifiedDate":"2022-08-26"},{"lineNumber":61,"author":{"gitId":"Francis-Tan"},"content":"     * @param words The words of the command entered, first is always \"mark\"","lastModifiedDate":"2022-08-26"},{"lineNumber":62,"author":{"gitId":"Francis-Tan"},"content":"     * @throws IllegalArgumentException If the argument(s) supplied in words isn\u0027t an integer from 1 to the number of stored tasks","lastModifiedDate":"2022-08-26"},{"lineNumber":63,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":64,"author":{"gitId":"Francis-Tan"},"content":"    public static void markTaskAsDone(String[] words) {","lastModifiedDate":"2022-08-26"},{"lineNumber":65,"author":{"gitId":"Francis-Tan"},"content":"        Task task \u003d tasks.get(Parser.getTaskNumber(words) - 1).markAsDone();","lastModifiedDate":"2022-08-26"},{"lineNumber":66,"author":{"gitId":"Francis-Tan"},"content":"        UI.sayLines(new String[]{","lastModifiedDate":"2022-08-26"},{"lineNumber":67,"author":{"gitId":"Francis-Tan"},"content":"                \"Nice! I\u0027ve marked this task as done:\",","lastModifiedDate":"2022-08-26"},{"lineNumber":68,"author":{"gitId":"Francis-Tan"},"content":"                \"  \" + task","lastModifiedDate":"2022-08-26"},{"lineNumber":69,"author":{"gitId":"Francis-Tan"},"content":"        });","lastModifiedDate":"2022-08-26"},{"lineNumber":70,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":71,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":72,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":73,"author":{"gitId":"Francis-Tan"},"content":"     * Marks the specified task as not done and displays outcome","lastModifiedDate":"2022-08-26"},{"lineNumber":74,"author":{"gitId":"Francis-Tan"},"content":"     * @param words The words of the command entered, first is always \"unmark\"","lastModifiedDate":"2022-08-26"},{"lineNumber":75,"author":{"gitId":"Francis-Tan"},"content":"     * @throws IllegalArgumentException If the argument(s) supplied in words isn\u0027t an integer from 1 to the number of stored tasks","lastModifiedDate":"2022-08-26"},{"lineNumber":76,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":77,"author":{"gitId":"Francis-Tan"},"content":"    public static void markTaskAsNotDone(String[] words) {","lastModifiedDate":"2022-08-26"},{"lineNumber":78,"author":{"gitId":"Francis-Tan"},"content":"        Task task \u003d tasks.get(Parser.getTaskNumber(words) - 1).markAsNotDone();","lastModifiedDate":"2022-08-26"},{"lineNumber":79,"author":{"gitId":"Francis-Tan"},"content":"        UI.sayLines(new String[]{","lastModifiedDate":"2022-08-26"},{"lineNumber":80,"author":{"gitId":"Francis-Tan"},"content":"                \"OK, I\u0027ve marked this task as not done yet:\",","lastModifiedDate":"2022-08-26"},{"lineNumber":81,"author":{"gitId":"Francis-Tan"},"content":"                \"  \" + task","lastModifiedDate":"2022-08-26"},{"lineNumber":82,"author":{"gitId":"Francis-Tan"},"content":"        });","lastModifiedDate":"2022-08-26"},{"lineNumber":83,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":84,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":85,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":86,"author":{"gitId":"Francis-Tan"},"content":"     * Deletes the specified task and displays outcome","lastModifiedDate":"2022-08-26"},{"lineNumber":87,"author":{"gitId":"Francis-Tan"},"content":"     * @param words The words of the command entered, first is always \"delete\"","lastModifiedDate":"2022-08-26"},{"lineNumber":88,"author":{"gitId":"Francis-Tan"},"content":"     * @throws IllegalArgumentException If the argument(s) supplied in words isn\u0027t an integer from 1 to the number of stored tasks","lastModifiedDate":"2022-08-26"},{"lineNumber":89,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":90,"author":{"gitId":"Francis-Tan"},"content":"    public static void deleteTask(String[] words) {","lastModifiedDate":"2022-08-26"},{"lineNumber":91,"author":{"gitId":"Francis-Tan"},"content":"        Task removedTask \u003d tasks.remove(Parser.getTaskNumber(words) - 1);","lastModifiedDate":"2022-08-26"},{"lineNumber":92,"author":{"gitId":"Francis-Tan"},"content":"        UI.sayLines(new String[]{","lastModifiedDate":"2022-08-26"},{"lineNumber":93,"author":{"gitId":"Francis-Tan"},"content":"                \"Noted. I\u0027ve removed this task:\",","lastModifiedDate":"2022-08-26"},{"lineNumber":94,"author":{"gitId":"Francis-Tan"},"content":"                \"  \" + removedTask,","lastModifiedDate":"2022-08-26"},{"lineNumber":95,"author":{"gitId":"Francis-Tan"},"content":"                \"Now you have \" + tasks.size() + \" task\" + (tasks.size() \u003d\u003d 1 ? \"\" : \"s\") + \" in the list.\"","lastModifiedDate":"2022-08-26"},{"lineNumber":96,"author":{"gitId":"Francis-Tan"},"content":"        });","lastModifiedDate":"2022-08-26"},{"lineNumber":97,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":98,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":99,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":100,"author":{"gitId":"Francis-Tan"},"content":"     * Lists out information on all tasks stored","lastModifiedDate":"2022-08-26"},{"lineNumber":101,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":102,"author":{"gitId":"Francis-Tan"},"content":"    public static void listTasks()  {","lastModifiedDate":"2022-08-26"},{"lineNumber":103,"author":{"gitId":"Francis-Tan"},"content":"        String[] taskDescriptions \u003d new String[getTaskCount() + 1];","lastModifiedDate":"2022-08-26"},{"lineNumber":104,"author":{"gitId":"Francis-Tan"},"content":"        taskDescriptions[0] \u003d \"Here are the tasks in your list:\";","lastModifiedDate":"2022-08-26"},{"lineNumber":105,"author":{"gitId":"Francis-Tan"},"content":"        for (int i \u003d 1; i \u003c taskDescriptions.length; ++i) {","lastModifiedDate":"2022-08-26"},{"lineNumber":106,"author":{"gitId":"Francis-Tan"},"content":"            taskDescriptions[i] \u003d \"  \" + i + \".\" + tasks.get(i - 1);","lastModifiedDate":"2022-08-26"},{"lineNumber":107,"author":{"gitId":"Francis-Tan"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":108,"author":{"gitId":"Francis-Tan"},"content":"        UI.sayLines(taskDescriptions);","lastModifiedDate":"2022-08-26"},{"lineNumber":109,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":110,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":111,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-28"},{"lineNumber":112,"author":{"gitId":"Francis-Tan"},"content":"     * Displays all tasks whose descriptions contain the keyword specified in words","lastModifiedDate":"2022-08-28"},{"lineNumber":113,"author":{"gitId":"Francis-Tan"},"content":"     * @param words The words of the command entered, first is always \"find\"","lastModifiedDate":"2022-08-28"},{"lineNumber":114,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-28"},{"lineNumber":115,"author":{"gitId":"Francis-Tan"},"content":"    public static void findTasksContainingKeyword(String[] words)  {","lastModifiedDate":"2022-08-28"},{"lineNumber":116,"author":{"gitId":"Francis-Tan"},"content":"        StringBuilder keywordBuilder \u003d new StringBuilder();","lastModifiedDate":"2022-08-28"},{"lineNumber":117,"author":{"gitId":"Francis-Tan"},"content":"        for (int i \u003d 1; i \u003c words.length; ++i) {","lastModifiedDate":"2022-08-28"},{"lineNumber":118,"author":{"gitId":"Francis-Tan"},"content":"            keywordBuilder.append(words[i]).append(\" \");","lastModifiedDate":"2022-08-28"},{"lineNumber":119,"author":{"gitId":"Francis-Tan"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":120,"author":{"gitId":"Francis-Tan"},"content":"        String keyword \u003d words.length \u003d\u003d 1 ? \"\" : keywordBuilder.deleteCharAt(keywordBuilder.length() - 1).toString();","lastModifiedDate":"2022-08-28"},{"lineNumber":121,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":122,"author":{"gitId":"Francis-Tan"},"content":"        ArrayList\u003cString\u003e matchingTasks \u003d  new ArrayList\u003cString\u003e();","lastModifiedDate":"2022-08-28"},{"lineNumber":123,"author":{"gitId":"Francis-Tan"},"content":"        matchingTasks.add(\"Here are the tasks containing the keyword \\\"\" + keyword + \"\\\" :\");","lastModifiedDate":"2022-08-28"},{"lineNumber":124,"author":{"gitId":"Francis-Tan"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); ++i) {","lastModifiedDate":"2022-08-28"},{"lineNumber":125,"author":{"gitId":"Francis-Tan"},"content":"            Task currTask \u003d tasks.get(i);","lastModifiedDate":"2022-08-28"},{"lineNumber":126,"author":{"gitId":"Francis-Tan"},"content":"            if (currTask.getDescription().contains(keyword)) {","lastModifiedDate":"2022-08-28"},{"lineNumber":127,"author":{"gitId":"Francis-Tan"},"content":"                matchingTasks.add(\"  \" + (i + 1) + \".\" + currTask);","lastModifiedDate":"2022-08-28"},{"lineNumber":128,"author":{"gitId":"Francis-Tan"},"content":"            }","lastModifiedDate":"2022-08-28"},{"lineNumber":129,"author":{"gitId":"Francis-Tan"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":130,"author":{"gitId":"Francis-Tan"},"content":"        UI.sayLines(matchingTasks.toArray(String[]::new));","lastModifiedDate":"2022-08-28"},{"lineNumber":131,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":132,"author":{"gitId":"Francis-Tan"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"Francis-Tan":132}},{"path":"src/main/java/duke/services/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Francis-Tan"},"content":"package duke.services;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"Francis-Tan"},"content":"/** Handles display */","lastModifiedDate":"2022-08-26"},{"lineNumber":4,"author":{"gitId":"Francis-Tan"},"content":"public class UI {","lastModifiedDate":"2022-08-26"},{"lineNumber":5,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":6,"author":{"gitId":"Francis-Tan"},"content":"     * Prints Duke\u0027s greeting on opening the app","lastModifiedDate":"2022-08-26"},{"lineNumber":7,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":8,"author":{"gitId":"Francis-Tan"},"content":"    public static void introduceSelf() {","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"Francis-Tan"},"content":"        sayLines(new String[] {","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"Francis-Tan"},"content":"                \"Hello! I\u0027m Duke\",","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"Francis-Tan"},"content":"                \"What can I do for you?\",","lastModifiedDate":"2022-08-26"},{"lineNumber":12,"author":{"gitId":"Francis-Tan"},"content":"        });","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":14,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":16,"author":{"gitId":"Francis-Tan"},"content":"     * Displays the lines using a format","lastModifiedDate":"2022-08-26"},{"lineNumber":17,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":18,"author":{"gitId":"Francis-Tan"},"content":"    public static void sayLines(String[] lines) {","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"Francis-Tan"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"Francis-Tan"},"content":"        for (String line : lines) {","lastModifiedDate":"2022-08-26"},{"lineNumber":21,"author":{"gitId":"Francis-Tan"},"content":"            System.out.println(line);","lastModifiedDate":"2022-08-26"},{"lineNumber":22,"author":{"gitId":"Francis-Tan"},"content":"        }","lastModifiedDate":"2022-08-26"},{"lineNumber":23,"author":{"gitId":"Francis-Tan"},"content":"        System.out.println(\"____________________________________________________________\\n\");","lastModifiedDate":"2022-08-26"},{"lineNumber":24,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":25,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":27,"author":{"gitId":"Francis-Tan"},"content":"     * Prints Duke\u0027s closing statement on exiting the app","lastModifiedDate":"2022-08-26"},{"lineNumber":28,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":29,"author":{"gitId":"Francis-Tan"},"content":"    public static void sayGoodbye() {","lastModifiedDate":"2022-08-26"},{"lineNumber":30,"author":{"gitId":"Francis-Tan"},"content":"        sayLines(new String[] {","lastModifiedDate":"2022-08-26"},{"lineNumber":31,"author":{"gitId":"Francis-Tan"},"content":"                \"Bye. Hope to see you again soon!\",","lastModifiedDate":"2022-08-26"},{"lineNumber":32,"author":{"gitId":"Francis-Tan"},"content":"        });","lastModifiedDate":"2022-08-26"},{"lineNumber":33,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":34,"author":{"gitId":"Francis-Tan"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"Francis-Tan":34}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Francis-Tan"},"content":"package duke.tasks;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":3,"author":{"gitId":"Francis-Tan"},"content":"import duke.services.Parser;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"Francis-Tan"},"content":"/**","lastModifiedDate":"2022-08-17"},{"lineNumber":6,"author":{"gitId":"Francis-Tan"},"content":" * Tasks with a deadline","lastModifiedDate":"2022-08-17"},{"lineNumber":7,"author":{"gitId":"Francis-Tan"},"content":" */","lastModifiedDate":"2022-08-17"},{"lineNumber":8,"author":{"gitId":"Francis-Tan"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":9,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":10,"author":{"gitId":"Francis-Tan"},"content":"    /** The deadline */","lastModifiedDate":"2022-08-17"},{"lineNumber":11,"author":{"gitId":"Francis-Tan"},"content":"    private String deadline;","lastModifiedDate":"2022-08-28"},{"lineNumber":12,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":13,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":14,"author":{"gitId":"Francis-Tan"},"content":"     * Constructs a new Deadline with the given description and deadline ","lastModifiedDate":"2022-08-17"},{"lineNumber":15,"author":{"gitId":"Francis-Tan"},"content":"     *","lastModifiedDate":"2022-08-17"},{"lineNumber":16,"author":{"gitId":"Francis-Tan"},"content":"     * @param description The task description","lastModifiedDate":"2022-08-17"},{"lineNumber":17,"author":{"gitId":"Francis-Tan"},"content":"     * @param deadline The task deadline","lastModifiedDate":"2022-08-28"},{"lineNumber":18,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":19,"author":{"gitId":"Francis-Tan"},"content":"    public Deadline(String description, String deadline) {","lastModifiedDate":"2022-08-28"},{"lineNumber":20,"author":{"gitId":"Francis-Tan"},"content":"        super(description, \u0027D\u0027);","lastModifiedDate":"2022-08-25"},{"lineNumber":21,"author":{"gitId":"Francis-Tan"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2022-08-28"},{"lineNumber":22,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":23,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":24,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-28"},{"lineNumber":25,"author":{"gitId":"Francis-Tan"},"content":"     * @return The deadline in the format that was entered","lastModifiedDate":"2022-08-28"},{"lineNumber":26,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-28"},{"lineNumber":27,"author":{"gitId":"Francis-Tan"},"content":"    public String getEnteredDeadline() {","lastModifiedDate":"2022-08-28"},{"lineNumber":28,"author":{"gitId":"Francis-Tan"},"content":"        return (deadline.indexOf(\u0027,\u0027) \u003d\u003d -1)","lastModifiedDate":"2022-08-28"},{"lineNumber":29,"author":{"gitId":"Francis-Tan"},"content":"                ? Parser.reformatDate(deadline, \"d MMM yyyy\", \"d/M/yyyy\")","lastModifiedDate":"2022-08-28"},{"lineNumber":30,"author":{"gitId":"Francis-Tan"},"content":"                : Parser.reformatDateTime(deadline, \"d MMM yyyy, h:mma\", \"d/M/yyyy h:mma\");","lastModifiedDate":"2022-08-28"},{"lineNumber":31,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":32,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":33,"author":{"gitId":"Francis-Tan"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":34,"author":{"gitId":"Francis-Tan"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":35,"author":{"gitId":"Francis-Tan"},"content":"        return super.toString() + \" (by: \" + deadline + \")\";","lastModifiedDate":"2022-08-28"},{"lineNumber":36,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":37,"author":{"gitId":"Francis-Tan"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"Francis-Tan":37}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Francis-Tan"},"content":"package duke.tasks;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":3,"author":{"gitId":"Francis-Tan"},"content":"import duke.services.Parser;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"Francis-Tan"},"content":"/**","lastModifiedDate":"2022-08-25"},{"lineNumber":6,"author":{"gitId":"Francis-Tan"},"content":" * Tasks that occur at a certain time","lastModifiedDate":"2022-08-25"},{"lineNumber":7,"author":{"gitId":"Francis-Tan"},"content":" */","lastModifiedDate":"2022-08-25"},{"lineNumber":8,"author":{"gitId":"Francis-Tan"},"content":"public class Event extends Task {","lastModifiedDate":"2022-08-25"},{"lineNumber":9,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":10,"author":{"gitId":"Francis-Tan"},"content":"    /** The time of occurrence */","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"Francis-Tan"},"content":"    private String time;","lastModifiedDate":"2022-08-28"},{"lineNumber":12,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":13,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":14,"author":{"gitId":"Francis-Tan"},"content":"     * Constructs a new Event with the given description and timing of occurrence","lastModifiedDate":"2022-08-25"},{"lineNumber":15,"author":{"gitId":"Francis-Tan"},"content":"     *","lastModifiedDate":"2022-08-25"},{"lineNumber":16,"author":{"gitId":"Francis-Tan"},"content":"     * @param description The task description","lastModifiedDate":"2022-08-25"},{"lineNumber":17,"author":{"gitId":"Francis-Tan"},"content":"     * @param time The time of occurrence","lastModifiedDate":"2022-08-28"},{"lineNumber":18,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":19,"author":{"gitId":"Francis-Tan"},"content":"    public Event(String description, String time) {","lastModifiedDate":"2022-08-28"},{"lineNumber":20,"author":{"gitId":"Francis-Tan"},"content":"        super(description, \u0027E\u0027);","lastModifiedDate":"2022-08-25"},{"lineNumber":21,"author":{"gitId":"Francis-Tan"},"content":"        this.time \u003d time;","lastModifiedDate":"2022-08-28"},{"lineNumber":22,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":23,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":24,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-28"},{"lineNumber":25,"author":{"gitId":"Francis-Tan"},"content":"     * @return The time in the format that was entered","lastModifiedDate":"2022-08-28"},{"lineNumber":26,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-28"},{"lineNumber":27,"author":{"gitId":"Francis-Tan"},"content":"    public String getEnteredTime() {","lastModifiedDate":"2022-08-28"},{"lineNumber":28,"author":{"gitId":"Francis-Tan"},"content":"        return (time.indexOf(\u0027,\u0027) \u003d\u003d -1)","lastModifiedDate":"2022-08-28"},{"lineNumber":29,"author":{"gitId":"Francis-Tan"},"content":"                ? Parser.reformatDate(time, \"d MMM yyyy\", \"d/M/yyyy\")","lastModifiedDate":"2022-08-28"},{"lineNumber":30,"author":{"gitId":"Francis-Tan"},"content":"                : Parser.reformatDateTime(time, \"d MMM yyyy, h:mma\", \"d/M/yyyy h:mma\");","lastModifiedDate":"2022-08-28"},{"lineNumber":31,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":32,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":33,"author":{"gitId":"Francis-Tan"},"content":"    @Override","lastModifiedDate":"2022-08-25"},{"lineNumber":34,"author":{"gitId":"Francis-Tan"},"content":"    public String toString() {","lastModifiedDate":"2022-08-25"},{"lineNumber":35,"author":{"gitId":"Francis-Tan"},"content":"        return super.toString() + \" (at: \" + time + \")\";","lastModifiedDate":"2022-08-28"},{"lineNumber":36,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":37,"author":{"gitId":"Francis-Tan"},"content":"}","lastModifiedDate":"2022-08-25"}],"authorContributionMap":{"Francis-Tan":37}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Francis-Tan"},"content":"package duke.tasks;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":3,"author":{"gitId":"Francis-Tan"},"content":"/**","lastModifiedDate":"2022-08-17"},{"lineNumber":4,"author":{"gitId":"Francis-Tan"},"content":" * Tasks that can be marked as done or not done","lastModifiedDate":"2022-08-17"},{"lineNumber":5,"author":{"gitId":"Francis-Tan"},"content":" */","lastModifiedDate":"2022-08-17"},{"lineNumber":6,"author":{"gitId":"Francis-Tan"},"content":"public abstract class Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":7,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":8,"author":{"gitId":"Francis-Tan"},"content":"    /** Description of what this task entails */","lastModifiedDate":"2022-08-25"},{"lineNumber":9,"author":{"gitId":"Francis-Tan"},"content":"    protected String description;","lastModifiedDate":"2022-08-17"},{"lineNumber":10,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":11,"author":{"gitId":"Francis-Tan"},"content":"    /** A symbol indicating what kind of task this is */","lastModifiedDate":"2022-08-25"},{"lineNumber":12,"author":{"gitId":"Francis-Tan"},"content":"    protected final char typeSymbol;","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":14,"author":{"gitId":"Francis-Tan"},"content":"    /** Is this task done? */","lastModifiedDate":"2022-08-17"},{"lineNumber":15,"author":{"gitId":"Francis-Tan"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-08-17"},{"lineNumber":16,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":17,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":18,"author":{"gitId":"Francis-Tan"},"content":"     * Constructs a new task with the given description","lastModifiedDate":"2022-08-17"},{"lineNumber":19,"author":{"gitId":"Francis-Tan"},"content":"     * @param description The task description","lastModifiedDate":"2022-08-17"},{"lineNumber":20,"author":{"gitId":"Francis-Tan"},"content":"     * @param typeSymbol The symbol to indicate type","lastModifiedDate":"2022-08-25"},{"lineNumber":21,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":22,"author":{"gitId":"Francis-Tan"},"content":"    public Task(String description, char typeSymbol) {","lastModifiedDate":"2022-08-25"},{"lineNumber":23,"author":{"gitId":"Francis-Tan"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-08-17"},{"lineNumber":24,"author":{"gitId":"Francis-Tan"},"content":"        this.typeSymbol \u003d typeSymbol;","lastModifiedDate":"2022-08-25"},{"lineNumber":25,"author":{"gitId":"Francis-Tan"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-17"},{"lineNumber":26,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":27,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":28,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":29,"author":{"gitId":"Francis-Tan"},"content":"     * Marks this task as done","lastModifiedDate":"2022-08-17"},{"lineNumber":30,"author":{"gitId":"Francis-Tan"},"content":"     * @return The task","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":32,"author":{"gitId":"Francis-Tan"},"content":"    public Task markAsDone() {","lastModifiedDate":"2022-08-25"},{"lineNumber":33,"author":{"gitId":"Francis-Tan"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-08-17"},{"lineNumber":34,"author":{"gitId":"Francis-Tan"},"content":"        return this;","lastModifiedDate":"2022-08-25"},{"lineNumber":35,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":36,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":37,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":38,"author":{"gitId":"Francis-Tan"},"content":"     * Marks this task as not done","lastModifiedDate":"2022-08-17"},{"lineNumber":39,"author":{"gitId":"Francis-Tan"},"content":"     * @return The task","lastModifiedDate":"2022-08-25"},{"lineNumber":40,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":41,"author":{"gitId":"Francis-Tan"},"content":"    public Task markAsNotDone() {","lastModifiedDate":"2022-08-25"},{"lineNumber":42,"author":{"gitId":"Francis-Tan"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-17"},{"lineNumber":43,"author":{"gitId":"Francis-Tan"},"content":"        return this;","lastModifiedDate":"2022-08-25"},{"lineNumber":44,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":45,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":46,"author":{"gitId":"Francis-Tan"},"content":"    public char getTypeSymbol() {","lastModifiedDate":"2022-08-27"},{"lineNumber":47,"author":{"gitId":"Francis-Tan"},"content":"        return typeSymbol;","lastModifiedDate":"2022-08-25"},{"lineNumber":48,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-25"},{"lineNumber":49,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":50,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":51,"author":{"gitId":"Francis-Tan"},"content":"     * @return \"X\" if the task is done, \" \" otherwise","lastModifiedDate":"2022-08-17"},{"lineNumber":52,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":53,"author":{"gitId":"Francis-Tan"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-08-27"},{"lineNumber":54,"author":{"gitId":"Francis-Tan"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2022-08-17"},{"lineNumber":55,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":56,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":57,"author":{"gitId":"Francis-Tan"},"content":"    public String getDescription() {","lastModifiedDate":"2022-08-27"},{"lineNumber":58,"author":{"gitId":"Francis-Tan"},"content":"        return description;","lastModifiedDate":"2022-08-17"},{"lineNumber":59,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":60,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":61,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":62,"author":{"gitId":"Francis-Tan"},"content":"     * @return The task type, status and description","lastModifiedDate":"2022-08-17"},{"lineNumber":63,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":64,"author":{"gitId":"Francis-Tan"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":65,"author":{"gitId":"Francis-Tan"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":66,"author":{"gitId":"Francis-Tan"},"content":"        return \"[\" + getTypeSymbol() + \"][\" + getStatusIcon() + \"] \" + getDescription();","lastModifiedDate":"2022-08-17"},{"lineNumber":67,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":68,"author":{"gitId":"Francis-Tan"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"Francis-Tan":68}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Francis-Tan"},"content":"package duke.tasks;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-25"},{"lineNumber":3,"author":{"gitId":"Francis-Tan"},"content":"/**","lastModifiedDate":"2022-08-17"},{"lineNumber":4,"author":{"gitId":"Francis-Tan"},"content":" * Tasks with only a description","lastModifiedDate":"2022-08-25"},{"lineNumber":5,"author":{"gitId":"Francis-Tan"},"content":" */","lastModifiedDate":"2022-08-17"},{"lineNumber":6,"author":{"gitId":"Francis-Tan"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":7,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":8,"author":{"gitId":"Francis-Tan"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":9,"author":{"gitId":"Francis-Tan"},"content":"     * Constructs a new Todo with the given description","lastModifiedDate":"2022-08-17"},{"lineNumber":10,"author":{"gitId":"Francis-Tan"},"content":"     *","lastModifiedDate":"2022-08-17"},{"lineNumber":11,"author":{"gitId":"Francis-Tan"},"content":"     * @param description The task description","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"Francis-Tan"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":13,"author":{"gitId":"Francis-Tan"},"content":"    public Todo(String description) {","lastModifiedDate":"2022-08-17"},{"lineNumber":14,"author":{"gitId":"Francis-Tan"},"content":"        super(description, \u0027T\u0027);","lastModifiedDate":"2022-08-25"},{"lineNumber":15,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":16,"author":{"gitId":"Francis-Tan"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"Francis-Tan":16}},{"path":"src/test/java/duke/services/Parser_Test.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Francis-Tan"},"content":"package duke.services;","lastModifiedDate":"2022-08-27"},{"lineNumber":2,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":3,"author":{"gitId":"Francis-Tan"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2022-08-27"},{"lineNumber":4,"author":{"gitId":"Francis-Tan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-27"},{"lineNumber":5,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":6,"author":{"gitId":"Francis-Tan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-27"},{"lineNumber":7,"author":{"gitId":"Francis-Tan"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-08-27"},{"lineNumber":8,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":9,"author":{"gitId":"Francis-Tan"},"content":"public class Parser_Test {","lastModifiedDate":"2022-08-27"},{"lineNumber":10,"author":{"gitId":"Francis-Tan"},"content":"    @Test","lastModifiedDate":"2022-08-27"},{"lineNumber":11,"author":{"gitId":"Francis-Tan"},"content":"    public void testGetTaskNumber() {","lastModifiedDate":"2022-08-27"},{"lineNumber":12,"author":{"gitId":"Francis-Tan"},"content":"        //exception on trying to get task number when there are no tasks","lastModifiedDate":"2022-08-27"},{"lineNumber":13,"author":{"gitId":"Francis-Tan"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Parser.getTaskNumber(new String[] {\"mark\", \"1\"}));","lastModifiedDate":"2022-08-27"},{"lineNumber":14,"author":{"gitId":"Francis-Tan"},"content":"        TaskList.addTask(new Todo(\"\"));","lastModifiedDate":"2022-08-27"},{"lineNumber":15,"author":{"gitId":"Francis-Tan"},"content":"        assertEquals(Parser.getTaskNumber(new String[] {\"mark\", \"1\"}), 1);","lastModifiedDate":"2022-08-27"},{"lineNumber":16,"author":{"gitId":"Francis-Tan"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Parser.getTaskNumber(new String[] {\"mark\"}));","lastModifiedDate":"2022-08-27"},{"lineNumber":17,"author":{"gitId":"Francis-Tan"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Parser.getTaskNumber(new String[] {\"mark\", \"2a\"}));","lastModifiedDate":"2022-08-27"},{"lineNumber":18,"author":{"gitId":"Francis-Tan"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Parser.getTaskNumber(new String[] {\"mark\", \"9\"}));","lastModifiedDate":"2022-08-27"},{"lineNumber":19,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":20,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":21,"author":{"gitId":"Francis-Tan"},"content":"    @Test","lastModifiedDate":"2022-08-27"},{"lineNumber":22,"author":{"gitId":"Francis-Tan"},"content":"    public void testGetDescriptionAndDate() {","lastModifiedDate":"2022-08-27"},{"lineNumber":23,"author":{"gitId":"Francis-Tan"},"content":"        String[] event1 \u003d new String[] {\"event\", \"presentation\", \"/at\", \"9/10/2022\"};","lastModifiedDate":"2022-08-27"},{"lineNumber":24,"author":{"gitId":"Francis-Tan"},"content":"        assertEquals(Parser.getDescription(event1, \"/at\"), \"presentation\");","lastModifiedDate":"2022-08-27"},{"lineNumber":25,"author":{"gitId":"Francis-Tan"},"content":"        assertEquals(Parser.getTiming(event1, \"/at\"), \"9/10/2022\");","lastModifiedDate":"2022-08-27"},{"lineNumber":26,"author":{"gitId":"Francis-Tan"},"content":"        String[] deadline1 \u003d new String[] {\"deadline\", \"do es2660\", \"\", \"\", \"essay\", \"/by\", \"tmr\", \"night\",","lastModifiedDate":"2022-08-27"},{"lineNumber":27,"author":{"gitId":"Francis-Tan"},"content":"                \"\", \"\", \"\", \"or\", \"ask\", \"4\", \"extension\"};","lastModifiedDate":"2022-08-27"},{"lineNumber":28,"author":{"gitId":"Francis-Tan"},"content":"        assertEquals(Parser.getDescription(deadline1, \"/by\"), \"do es2660   essay\");","lastModifiedDate":"2022-08-27"},{"lineNumber":29,"author":{"gitId":"Francis-Tan"},"content":"        assertEquals(Parser.getTiming(deadline1, \"/by\"), \"tmr night    or ask 4 extension\");","lastModifiedDate":"2022-08-27"},{"lineNumber":30,"author":{"gitId":"Francis-Tan"},"content":"        //does it throw exception for missing all other arguments?","lastModifiedDate":"2022-08-27"},{"lineNumber":31,"author":{"gitId":"Francis-Tan"},"content":"        assertThrows(IllegalArgumentException.class,","lastModifiedDate":"2022-08-27"},{"lineNumber":32,"author":{"gitId":"Francis-Tan"},"content":"                () -\u003e Parser.getDescription(new String[] {\"event\"}, \"/at\"));","lastModifiedDate":"2022-08-27"},{"lineNumber":33,"author":{"gitId":"Francis-Tan"},"content":"        //exception on timing flag included but missing desc?","lastModifiedDate":"2022-08-27"},{"lineNumber":34,"author":{"gitId":"Francis-Tan"},"content":"        assertThrows(IllegalArgumentException.class,","lastModifiedDate":"2022-08-27"},{"lineNumber":35,"author":{"gitId":"Francis-Tan"},"content":"                () -\u003e Parser.getDescription(new String[] {\"deadline\", \"/by\"}, \"/by\"));","lastModifiedDate":"2022-08-27"},{"lineNumber":36,"author":{"gitId":"Francis-Tan"},"content":"        //exception on missing flag?","lastModifiedDate":"2022-08-27"},{"lineNumber":37,"author":{"gitId":"Francis-Tan"},"content":"        assertThrows(IllegalArgumentException.class,","lastModifiedDate":"2022-08-27"},{"lineNumber":38,"author":{"gitId":"Francis-Tan"},"content":"                () -\u003e {","lastModifiedDate":"2022-08-27"},{"lineNumber":39,"author":{"gitId":"Francis-Tan"},"content":"                    String[] deadline \u003d new String[]{\"deadline\", \"help\", \"by\"};","lastModifiedDate":"2022-08-27"},{"lineNumber":40,"author":{"gitId":"Francis-Tan"},"content":"                    Parser.getDescription(deadline, \"/by\");","lastModifiedDate":"2022-08-27"},{"lineNumber":41,"author":{"gitId":"Francis-Tan"},"content":"                    Parser.getTiming(deadline, \"/by\");","lastModifiedDate":"2022-08-27"},{"lineNumber":42,"author":{"gitId":"Francis-Tan"},"content":"                });","lastModifiedDate":"2022-08-27"},{"lineNumber":43,"author":{"gitId":"Francis-Tan"},"content":"        //exception on missing timing?","lastModifiedDate":"2022-08-27"},{"lineNumber":44,"author":{"gitId":"Francis-Tan"},"content":"        assertThrows(IllegalArgumentException.class,","lastModifiedDate":"2022-08-27"},{"lineNumber":45,"author":{"gitId":"Francis-Tan"},"content":"                () -\u003e {","lastModifiedDate":"2022-08-27"},{"lineNumber":46,"author":{"gitId":"Francis-Tan"},"content":"                    String[] deadline \u003d new String[]{\"deadline\", \"buy\", \"food\", \"/by\"};","lastModifiedDate":"2022-08-27"},{"lineNumber":47,"author":{"gitId":"Francis-Tan"},"content":"                    Parser.getDescription(deadline, \"/by\");","lastModifiedDate":"2022-08-27"},{"lineNumber":48,"author":{"gitId":"Francis-Tan"},"content":"                    Parser.getTiming(deadline, \"/by\");","lastModifiedDate":"2022-08-27"},{"lineNumber":49,"author":{"gitId":"Francis-Tan"},"content":"                });","lastModifiedDate":"2022-08-27"},{"lineNumber":50,"author":{"gitId":"Francis-Tan"},"content":"        //exception on wrong flag?","lastModifiedDate":"2022-08-27"},{"lineNumber":51,"author":{"gitId":"Francis-Tan"},"content":"        assertThrows(IllegalArgumentException.class,","lastModifiedDate":"2022-08-27"},{"lineNumber":52,"author":{"gitId":"Francis-Tan"},"content":"                () -\u003e {","lastModifiedDate":"2022-08-27"},{"lineNumber":53,"author":{"gitId":"Francis-Tan"},"content":"                    String[] deadline \u003d new String[]{\"deadline\", \"buy\", \"food\", \"/at\", \"tmr\"};","lastModifiedDate":"2022-08-27"},{"lineNumber":54,"author":{"gitId":"Francis-Tan"},"content":"                    Parser.getDescription(deadline, \"/by\");","lastModifiedDate":"2022-08-27"},{"lineNumber":55,"author":{"gitId":"Francis-Tan"},"content":"                    Parser.getTiming(deadline, \"/by\");","lastModifiedDate":"2022-08-27"},{"lineNumber":56,"author":{"gitId":"Francis-Tan"},"content":"                });","lastModifiedDate":"2022-08-27"},{"lineNumber":57,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":58,"author":{"gitId":"Francis-Tan"},"content":"}","lastModifiedDate":"2022-08-27"}],"authorContributionMap":{"Francis-Tan":58}},{"path":"src/test/java/duke/tasks/Todo_Test.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Francis-Tan"},"content":"package duke.tasks;","lastModifiedDate":"2022-08-27"},{"lineNumber":2,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":3,"author":{"gitId":"Francis-Tan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-27"},{"lineNumber":4,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":5,"author":{"gitId":"Francis-Tan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-27"},{"lineNumber":6,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":7,"author":{"gitId":"Francis-Tan"},"content":"public class Todo_Test {","lastModifiedDate":"2022-08-27"},{"lineNumber":8,"author":{"gitId":"Francis-Tan"},"content":"    @Test","lastModifiedDate":"2022-08-27"},{"lineNumber":9,"author":{"gitId":"Francis-Tan"},"content":"    public void testDescription() {","lastModifiedDate":"2022-08-27"},{"lineNumber":10,"author":{"gitId":"Francis-Tan"},"content":"        assertEquals(new Todo(\"run\").toString(), \"[T][ ] run\");","lastModifiedDate":"2022-08-27"},{"lineNumber":11,"author":{"gitId":"Francis-Tan"},"content":"        assertEquals(new Todo(\"create  test methods for every single class\").toString(),","lastModifiedDate":"2022-08-27"},{"lineNumber":12,"author":{"gitId":"Francis-Tan"},"content":"                \"[T][ ] create  test methods for every single class\");","lastModifiedDate":"2022-08-27"},{"lineNumber":13,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":14,"author":{"gitId":"Francis-Tan"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":15,"author":{"gitId":"Francis-Tan"},"content":"    @Test","lastModifiedDate":"2022-08-27"},{"lineNumber":16,"author":{"gitId":"Francis-Tan"},"content":"    public void testMarking() {","lastModifiedDate":"2022-08-27"},{"lineNumber":17,"author":{"gitId":"Francis-Tan"},"content":"        Todo todo \u003d new Todo(\"run\");","lastModifiedDate":"2022-08-27"},{"lineNumber":18,"author":{"gitId":"Francis-Tan"},"content":"        todo.markAsDone();","lastModifiedDate":"2022-08-27"},{"lineNumber":19,"author":{"gitId":"Francis-Tan"},"content":"        assertEquals(todo.toString(), \"[T][X] run\");","lastModifiedDate":"2022-08-27"},{"lineNumber":20,"author":{"gitId":"Francis-Tan"},"content":"        todo.markAsDone();","lastModifiedDate":"2022-08-27"},{"lineNumber":21,"author":{"gitId":"Francis-Tan"},"content":"        assertEquals(todo.toString(), \"[T][X] run\");","lastModifiedDate":"2022-08-27"},{"lineNumber":22,"author":{"gitId":"Francis-Tan"},"content":"        todo.markAsNotDone();","lastModifiedDate":"2022-08-27"},{"lineNumber":23,"author":{"gitId":"Francis-Tan"},"content":"        assertEquals(todo.toString(), \"[T][ ] run\");","lastModifiedDate":"2022-08-27"},{"lineNumber":24,"author":{"gitId":"Francis-Tan"},"content":"        todo.markAsNotDone();","lastModifiedDate":"2022-08-27"},{"lineNumber":25,"author":{"gitId":"Francis-Tan"},"content":"        assertEquals(todo.toString(), \"[T][ ] run\");","lastModifiedDate":"2022-08-27"},{"lineNumber":26,"author":{"gitId":"Francis-Tan"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":27,"author":{"gitId":"Francis-Tan"},"content":"}","lastModifiedDate":"2022-08-27"}],"authorContributionMap":{"Francis-Tan":27}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Francis-Tan"},"content":"java -classpath ..\\bin duke.services.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-08-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Francis-Tan":1,"-":20}}]
