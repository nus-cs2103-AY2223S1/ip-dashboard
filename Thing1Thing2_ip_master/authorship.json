[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Thing1Thing2"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Thing1Thing2"},"content":"/**","lastModifiedDate":"2022-08-14"},{"lineNumber":4,"author":{"gitId":"Thing1Thing2"},"content":" * Deadline class has a by field","lastModifiedDate":"2022-08-14"},{"lineNumber":5,"author":{"gitId":"Thing1Thing2"},"content":" */","lastModifiedDate":"2022-08-14"},{"lineNumber":6,"author":{"gitId":"Thing1Thing2"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Thing1Thing2"},"content":"    protected LocalDate date;","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":9,"author":{"gitId":"Thing1Thing2"},"content":"    public Deadline(String description, LocalDate by) {","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Thing1Thing2"},"content":"        super(description);","lastModifiedDate":"2022-08-14"},{"lineNumber":11,"author":{"gitId":"Thing1Thing2"},"content":"        this.date \u003d by;","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":13,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":14,"author":{"gitId":"Thing1Thing2"},"content":"    @Override","lastModifiedDate":"2022-08-14"},{"lineNumber":15,"author":{"gitId":"Thing1Thing2"},"content":"    public String toString() {","lastModifiedDate":"2022-08-14"},{"lineNumber":16,"author":{"gitId":"Thing1Thing2"},"content":"        String status;","lastModifiedDate":"2022-08-14"},{"lineNumber":17,"author":{"gitId":"Thing1Thing2"},"content":"        if (this.isDone) {","lastModifiedDate":"2022-08-14"},{"lineNumber":18,"author":{"gitId":"Thing1Thing2"},"content":"            status \u003d String.format(\"[D][âœ“] %s\", this.description);","lastModifiedDate":"2022-08-14"},{"lineNumber":19,"author":{"gitId":"Thing1Thing2"},"content":"        } else {","lastModifiedDate":"2022-08-14"},{"lineNumber":20,"author":{"gitId":"Thing1Thing2"},"content":"            status \u003d String.format(\"[D][ ] %s (by: %s)\", this.description, date);","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-14"},{"lineNumber":22,"author":{"gitId":"Thing1Thing2"},"content":"        return status;","lastModifiedDate":"2022-08-14"},{"lineNumber":23,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":24,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Thing1Thing2"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Thing1Thing2"},"content":"    public boolean isToday() {","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"Thing1Thing2"},"content":"        return date.isEqual(LocalDate.now());","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"Thing1Thing2"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Thing1Thing2"},"content":"    public String longDescription() {","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Thing1Thing2"},"content":"        String status;","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Thing1Thing2"},"content":"        String done \u003d this.isDone? \"was\": \"is\";","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"Thing1Thing2"},"content":"        status \u003d String.format(\"Deadline %s %s at %s %d %s %d\",","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"Thing1Thing2"},"content":"                this.description, done, this.date.getDayOfWeek(),","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"Thing1Thing2"},"content":"                this.date.getDayOfMonth() , this.date.getMonth(),","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"Thing1Thing2"},"content":"                this.date.getYear());","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"Thing1Thing2"},"content":"        return status;","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"Thing1Thing2"},"content":"}","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"Thing1Thing2":40}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Thing1Thing2"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-20"},{"lineNumber":2,"author":{"gitId":"Thing1Thing2"},"content":"import java.util.InputMismatchException;","lastModifiedDate":"2022-08-14"},{"lineNumber":3,"author":{"gitId":"Thing1Thing2"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-13"},{"lineNumber":4,"author":{"gitId":"Thing1Thing2"},"content":"import java.util.concurrent.TimeUnit;","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"Thing1Thing2"},"content":"    DukeToStorage dukeToStorage;","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Thing1Thing2"},"content":"    enum CommandType {TODO, MARK, UNMARK, DEADLINE, EVENT, BYE, LIST, DELETE, ISTODAY, LONGDESCRIPTION};","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Thing1Thing2"},"content":"     * Greets user.","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Thing1Thing2"},"content":"    private static void greetUser() {","lastModifiedDate":"2022-08-13"},{"lineNumber":14,"author":{"gitId":"Thing1Thing2"},"content":"        String logo \u003d \"_______     _\\n\" +","lastModifiedDate":"2022-08-13"},{"lineNumber":15,"author":{"gitId":"Thing1Thing2"},"content":"                \"|  ___|    | |\\n\" +","lastModifiedDate":"2022-08-13"},{"lineNumber":16,"author":{"gitId":"Thing1Thing2"},"content":"                \"|  |_  ____| |_____ ____  _  __\\n\" +","lastModifiedDate":"2022-08-13"},{"lineNumber":17,"author":{"gitId":"Thing1Thing2"},"content":"                \"|   _|/ _  \\\\ | ___|/  _ \\\\| |/  \\\\\\n\"+","lastModifiedDate":"2022-08-13"},{"lineNumber":18,"author":{"gitId":"Thing1Thing2"},"content":"                \"|  | | |_| | | |___| |_| |  / \\\\ |\\n\" +","lastModifiedDate":"2022-08-13"},{"lineNumber":19,"author":{"gitId":"Thing1Thing2"},"content":"                \"|__|  \\\\__|_|_|____|\\\\____/|_|  |_|\\n\";","lastModifiedDate":"2022-08-13"},{"lineNumber":20,"author":{"gitId":"Thing1Thing2"},"content":"        System.out.println(\"Hello from\" );","lastModifiedDate":"2022-08-13"},{"lineNumber":21,"author":{"gitId":"Thing1Thing2"},"content":"        System.out.println(logo);","lastModifiedDate":"2022-08-13"},{"lineNumber":22,"author":{"gitId":"Thing1Thing2"},"content":"        // prompt user","lastModifiedDate":"2022-08-13"},{"lineNumber":23,"author":{"gitId":"Thing1Thing2"},"content":"        System.out.println(\"Where would you like to go next?\");","lastModifiedDate":"2022-08-13"},{"lineNumber":24,"author":{"gitId":"Thing1Thing2"},"content":"        System.out.print(\"\u003e\u003e \");","lastModifiedDate":"2022-08-13"},{"lineNumber":25,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":26,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":27,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-13"},{"lineNumber":28,"author":{"gitId":"Thing1Thing2"},"content":"     * Intialises duke storage and greets user.","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-15"},{"lineNumber":30,"author":{"gitId":"Thing1Thing2"},"content":"    public Duke() {","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Thing1Thing2"},"content":"        this.dukeToStorage \u003d new DukeToStorage();","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Thing1Thing2"},"content":"        greetUser();","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-15"},{"lineNumber":34,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-15"},{"lineNumber":35,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-14"},{"lineNumber":36,"author":{"gitId":"Thing1Thing2"},"content":"     * Menu handler","lastModifiedDate":"2022-08-14"},{"lineNumber":37,"author":{"gitId":"Thing1Thing2"},"content":"     * @param userInput text entered by user that must be handled.","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-14"},{"lineNumber":39,"author":{"gitId":"Thing1Thing2"},"content":"    private void handleInput(String userInput) throws DukeException, IOException{","lastModifiedDate":"2022-08-20"},{"lineNumber":40,"author":{"gitId":"Thing1Thing2"},"content":"        CommandType command \u003d TypeConverter.getCommand(userInput);","lastModifiedDate":"2022-08-21"},{"lineNumber":41,"author":{"gitId":"Thing1Thing2"},"content":"        int n, numOfElements;","lastModifiedDate":"2022-08-21"},{"lineNumber":42,"author":{"gitId":"Thing1Thing2"},"content":"        if (command \u003d\u003d null) {","lastModifiedDate":"2022-08-15"},{"lineNumber":43,"author":{"gitId":"Thing1Thing2"},"content":"            throw new DukeException( \"Enter a valid command (todo, event, deadline, list, mark, unmark, bye, longdescription, istoday)\\n\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":44,"author":{"gitId":"Thing1Thing2"},"content":"        } else {","lastModifiedDate":"2022-08-15"},{"lineNumber":45,"author":{"gitId":"Thing1Thing2"},"content":"            switch(command) {","lastModifiedDate":"2022-08-15"},{"lineNumber":46,"author":{"gitId":"Thing1Thing2"},"content":"            case BYE:","lastModifiedDate":"2022-08-15"},{"lineNumber":47,"author":{"gitId":"Thing1Thing2"},"content":"                System.out.println(\"Thank you for swinging by :)\");","lastModifiedDate":"2022-08-13"},{"lineNumber":48,"author":{"gitId":"Thing1Thing2"},"content":"                System.exit(0);","lastModifiedDate":"2022-08-13"},{"lineNumber":49,"author":{"gitId":"Thing1Thing2"},"content":"                break;","lastModifiedDate":"2022-08-15"},{"lineNumber":50,"author":{"gitId":"Thing1Thing2"},"content":"            case LIST:","lastModifiedDate":"2022-08-15"},{"lineNumber":51,"author":{"gitId":"Thing1Thing2"},"content":"                dukeToStorage.showHistory();","lastModifiedDate":"2022-08-21"},{"lineNumber":52,"author":{"gitId":"Thing1Thing2"},"content":"                break;","lastModifiedDate":"2022-08-15"},{"lineNumber":53,"author":{"gitId":"Thing1Thing2"},"content":"            case MARK:","lastModifiedDate":"2022-08-15"},{"lineNumber":54,"author":{"gitId":"Thing1Thing2"},"content":"                numOfElements  \u003d dukeToStorage.numberOfTasksInList();","lastModifiedDate":"2022-08-21"},{"lineNumber":55,"author":{"gitId":"Thing1Thing2"},"content":"                n \u003d TypeConverter.getTaskNumber(userInput, numOfElements);","lastModifiedDate":"2022-08-21"},{"lineNumber":56,"author":{"gitId":"Thing1Thing2"},"content":"                dukeToStorage.markTask(n);","lastModifiedDate":"2022-08-21"},{"lineNumber":57,"author":{"gitId":"Thing1Thing2"},"content":"                break;","lastModifiedDate":"2022-08-15"},{"lineNumber":58,"author":{"gitId":"Thing1Thing2"},"content":"            case UNMARK:","lastModifiedDate":"2022-08-15"},{"lineNumber":59,"author":{"gitId":"Thing1Thing2"},"content":"                numOfElements  \u003d dukeToStorage.numberOfTasksInList();","lastModifiedDate":"2022-08-21"},{"lineNumber":60,"author":{"gitId":"Thing1Thing2"},"content":"                n \u003d TypeConverter.getTaskNumber(userInput, numOfElements);","lastModifiedDate":"2022-08-21"},{"lineNumber":61,"author":{"gitId":"Thing1Thing2"},"content":"                dukeToStorage.unMarkTask(n);","lastModifiedDate":"2022-08-21"},{"lineNumber":62,"author":{"gitId":"Thing1Thing2"},"content":"                break;","lastModifiedDate":"2022-08-15"},{"lineNumber":63,"author":{"gitId":"Thing1Thing2"},"content":"            case EVENT:","lastModifiedDate":"2022-08-15"},{"lineNumber":64,"author":{"gitId":"Thing1Thing2"},"content":"                Event e \u003d TypeConverter.stringToEvent(userInput);","lastModifiedDate":"2022-08-21"},{"lineNumber":65,"author":{"gitId":"Thing1Thing2"},"content":"                dukeToStorage.addEventToHistory(e);","lastModifiedDate":"2022-08-21"},{"lineNumber":66,"author":{"gitId":"Thing1Thing2"},"content":"                break;","lastModifiedDate":"2022-08-21"},{"lineNumber":67,"author":{"gitId":"Thing1Thing2"},"content":"            case DEADLINE:","lastModifiedDate":"2022-08-15"},{"lineNumber":68,"author":{"gitId":"Thing1Thing2"},"content":"                Deadline d \u003d TypeConverter.stringToDeadline(userInput);","lastModifiedDate":"2022-08-21"},{"lineNumber":69,"author":{"gitId":"Thing1Thing2"},"content":"                dukeToStorage.addDeadlineToHistory(d);","lastModifiedDate":"2022-08-21"},{"lineNumber":70,"author":{"gitId":"Thing1Thing2"},"content":"                break;","lastModifiedDate":"2022-08-21"},{"lineNumber":71,"author":{"gitId":"Thing1Thing2"},"content":"            case TODO:","lastModifiedDate":"2022-08-21"},{"lineNumber":72,"author":{"gitId":"Thing1Thing2"},"content":"                Task t \u003d TypeConverter.stringToTask(userInput);","lastModifiedDate":"2022-08-21"},{"lineNumber":73,"author":{"gitId":"Thing1Thing2"},"content":"                dukeToStorage.addTaskToHistory(t);","lastModifiedDate":"2022-08-21"},{"lineNumber":74,"author":{"gitId":"Thing1Thing2"},"content":"                break;","lastModifiedDate":"2022-08-15"},{"lineNumber":75,"author":{"gitId":"Thing1Thing2"},"content":"            case DELETE:","lastModifiedDate":"2022-08-18"},{"lineNumber":76,"author":{"gitId":"Thing1Thing2"},"content":"                numOfElements \u003d dukeToStorage.numberOfTasksInList();","lastModifiedDate":"2022-08-21"},{"lineNumber":77,"author":{"gitId":"Thing1Thing2"},"content":"                n \u003d TypeConverter.getTaskNumber(userInput, numOfElements);","lastModifiedDate":"2022-08-21"},{"lineNumber":78,"author":{"gitId":"Thing1Thing2"},"content":"                dukeToStorage.deleteTask(n);","lastModifiedDate":"2022-08-21"},{"lineNumber":79,"author":{"gitId":"Thing1Thing2"},"content":"                break;","lastModifiedDate":"2022-08-18"},{"lineNumber":80,"author":{"gitId":"Thing1Thing2"},"content":"            case ISTODAY:","lastModifiedDate":"2022-08-21"},{"lineNumber":81,"author":{"gitId":"Thing1Thing2"},"content":"                numOfElements \u003d dukeToStorage.numberOfTasksInList();","lastModifiedDate":"2022-08-21"},{"lineNumber":82,"author":{"gitId":"Thing1Thing2"},"content":"                n \u003d TypeConverter.getTaskNumber(userInput, numOfElements);","lastModifiedDate":"2022-08-21"},{"lineNumber":83,"author":{"gitId":"Thing1Thing2"},"content":"                dukeToStorage.isToday(n);","lastModifiedDate":"2022-08-21"},{"lineNumber":84,"author":{"gitId":"Thing1Thing2"},"content":"                break;","lastModifiedDate":"2022-08-21"},{"lineNumber":85,"author":{"gitId":"Thing1Thing2"},"content":"            case LONGDESCRIPTION:","lastModifiedDate":"2022-08-21"},{"lineNumber":86,"author":{"gitId":"Thing1Thing2"},"content":"                numOfElements \u003d dukeToStorage.numberOfTasksInList();","lastModifiedDate":"2022-08-21"},{"lineNumber":87,"author":{"gitId":"Thing1Thing2"},"content":"                n \u003d TypeConverter.getTaskNumber(userInput, numOfElements);","lastModifiedDate":"2022-08-21"},{"lineNumber":88,"author":{"gitId":"Thing1Thing2"},"content":"                dukeToStorage.longDescription(n);","lastModifiedDate":"2022-08-21"},{"lineNumber":89,"author":{"gitId":"Thing1Thing2"},"content":"                break;","lastModifiedDate":"2022-08-21"},{"lineNumber":90,"author":{"gitId":"Thing1Thing2"},"content":"            default:","lastModifiedDate":"2022-08-15"},{"lineNumber":91,"author":{"gitId":"Thing1Thing2"},"content":"                throw new DukeException(\"Enter a valid command (todo, event, deadline, list, mark, unmark, bye)\\n\u003e\u003e\");","lastModifiedDate":"2022-08-15"},{"lineNumber":92,"author":{"gitId":"Thing1Thing2"},"content":"            }","lastModifiedDate":"2022-08-14"},{"lineNumber":93,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-20"},{"lineNumber":94,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-13"},{"lineNumber":95,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-13"},{"lineNumber":96,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-08-13"},{"lineNumber":98,"author":{"gitId":"Thing1Thing2"},"content":"        Duke dukeProgram \u003d new Duke();","lastModifiedDate":"2022-08-20"},{"lineNumber":99,"author":{"gitId":"Thing1Thing2"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2022-08-13"},{"lineNumber":100,"author":{"gitId":"Thing1Thing2"},"content":"        String s;","lastModifiedDate":"2022-08-13"},{"lineNumber":101,"author":{"gitId":"Thing1Thing2"},"content":"        while(true) {","lastModifiedDate":"2022-08-13"},{"lineNumber":102,"author":{"gitId":"Thing1Thing2"},"content":"            try {","lastModifiedDate":"2022-08-14"},{"lineNumber":103,"author":{"gitId":"Thing1Thing2"},"content":"                s \u003d in.nextLine();","lastModifiedDate":"2022-08-13"},{"lineNumber":104,"author":{"gitId":"Thing1Thing2"},"content":"                dukeProgram.handleInput(s);","lastModifiedDate":"2022-08-20"},{"lineNumber":105,"author":{"gitId":"Thing1Thing2"},"content":"            } catch (InputMismatchException ime) {","lastModifiedDate":"2022-08-14"},{"lineNumber":106,"author":{"gitId":"Thing1Thing2"},"content":"                System.out.print(ime);","lastModifiedDate":"2022-08-15"},{"lineNumber":107,"author":{"gitId":"Thing1Thing2"},"content":"                System.exit(0);","lastModifiedDate":"2022-08-14"},{"lineNumber":108,"author":{"gitId":"Thing1Thing2"},"content":"            } catch (DukeException de) {","lastModifiedDate":"2022-08-15"},{"lineNumber":109,"author":{"gitId":"Thing1Thing2"},"content":"                System.out.print(de);","lastModifiedDate":"2022-08-15"},{"lineNumber":110,"author":{"gitId":"Thing1Thing2"},"content":"            } catch (IOException ioe) {","lastModifiedDate":"2022-08-20"},{"lineNumber":111,"author":{"gitId":"Thing1Thing2"},"content":"                System.out.print(ioe);","lastModifiedDate":"2022-08-20"},{"lineNumber":112,"author":{"gitId":"Thing1Thing2"},"content":"            }","lastModifiedDate":"2022-08-14"},{"lineNumber":113,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Thing1Thing2":111,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Thing1Thing2"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2022-08-15"},{"lineNumber":2,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-15"},{"lineNumber":3,"author":{"gitId":"Thing1Thing2"},"content":"    DukeException(String errorMessage) {","lastModifiedDate":"2022-08-15"},{"lineNumber":4,"author":{"gitId":"Thing1Thing2"},"content":"        super(\"DUKEERROR: \" + errorMessage);","lastModifiedDate":"2022-08-15"},{"lineNumber":5,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-15"},{"lineNumber":6,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-15"},{"lineNumber":7,"author":{"gitId":"Thing1Thing2"},"content":"    @Override","lastModifiedDate":"2022-08-15"},{"lineNumber":8,"author":{"gitId":"Thing1Thing2"},"content":"    public String toString() {","lastModifiedDate":"2022-08-15"},{"lineNumber":9,"author":{"gitId":"Thing1Thing2"},"content":"        return getMessage();","lastModifiedDate":"2022-08-15"},{"lineNumber":10,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-15"},{"lineNumber":11,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":12,"author":{"gitId":"Thing1Thing2"},"content":"}","lastModifiedDate":"2022-08-14"},{"lineNumber":13,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-15"}],"authorContributionMap":{"Thing1Thing2":13}},{"path":"src/main/java/DukeToStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Thing1Thing2"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Thing1Thing2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Thing1Thing2"},"content":"import java.util.Date;","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Thing1Thing2"},"content":"import java.util.List;","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"Thing1Thing2"},"content":"/**","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Thing1Thing2"},"content":" * Manage all interactions between Duke and UserInputHistory file storage","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Thing1Thing2"},"content":" */","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"Thing1Thing2"},"content":"public class DukeToStorage {","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Thing1Thing2"},"content":"    private ArrayList\u003cTask\u003e userInputHistory \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Thing1Thing2"},"content":"    private UserInputHistory file \u003d new UserInputHistory();","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"Thing1Thing2"},"content":"     * Called by Duke to start storage.","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"Thing1Thing2"},"content":"     * Syncs userInputHistory array with disk storage.","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"Thing1Thing2"},"content":"    public DukeToStorage()  {","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"Thing1Thing2"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"Thing1Thing2"},"content":"            syncArrayListWithFile();","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"Thing1Thing2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.println(\"IOException: \" + e);","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"Thing1Thing2"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.println(\"DukeException: \" + e);","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"Thing1Thing2"},"content":"     * Syncs all changes stored in disk to arrayList maintained by program, by:","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Thing1Thing2"},"content":"     * 1. Emptying userInputHistory arraylist,","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"Thing1Thing2"},"content":"     * 2. Copying all lines on disk to userInputHistory","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Thing1Thing2"},"content":"     * @throws IOException when fileLineToTask() fails","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Thing1Thing2"},"content":"    private void syncArrayListWithFile() throws IOException, DukeException {","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"Thing1Thing2"},"content":"        userInputHistory.removeAll(userInputHistory);","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"Thing1Thing2"},"content":"        List\u003cString\u003e linesInFile \u003d file.getAllLines();","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"Thing1Thing2"},"content":"        Task currTask;","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"Thing1Thing2"},"content":"        int n \u003d linesInFile.size(), i \u003d 0;","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"Thing1Thing2"},"content":"        for (; i \u003c n; i ++) {","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"Thing1Thing2"},"content":"            currTask \u003d TypeConverter.fileLineToTask(linesInFile.get(i));","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"Thing1Thing2"},"content":"            userInputHistory.add(currTask);","lastModifiedDate":"2022-08-21"},{"lineNumber":41,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.println(currTask);","lastModifiedDate":"2022-08-21"},{"lineNumber":42,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":43,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":44,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":45,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":46,"author":{"gitId":"Thing1Thing2"},"content":"     * Adds Task to arrayList and updates file storage.","lastModifiedDate":"2022-08-21"},{"lineNumber":47,"author":{"gitId":"Thing1Thing2"},"content":"     * @param t task to be added.","lastModifiedDate":"2022-08-21"},{"lineNumber":48,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":49,"author":{"gitId":"Thing1Thing2"},"content":"    public void addTaskToHistory(Task t) {","lastModifiedDate":"2022-08-21"},{"lineNumber":50,"author":{"gitId":"Thing1Thing2"},"content":"        String str \u003d t.toString() + \"\\n\";","lastModifiedDate":"2022-08-21"},{"lineNumber":51,"author":{"gitId":"Thing1Thing2"},"content":"        if (file.appendLine(str)) {","lastModifiedDate":"2022-08-21"},{"lineNumber":52,"author":{"gitId":"Thing1Thing2"},"content":"            userInputHistory.add(t);","lastModifiedDate":"2022-08-21"},{"lineNumber":53,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.printf(\"Noted down: %s\\n There are %d items on your list now. \\n\", t, userInputHistory.size());","lastModifiedDate":"2022-08-21"},{"lineNumber":54,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.print(\"\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":55,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":56,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":57,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":58,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":59,"author":{"gitId":"Thing1Thing2"},"content":"     * Adds Deadline to arrayList and updates file storage.","lastModifiedDate":"2022-08-21"},{"lineNumber":60,"author":{"gitId":"Thing1Thing2"},"content":"     * @param d deadline to be added.","lastModifiedDate":"2022-08-21"},{"lineNumber":61,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":62,"author":{"gitId":"Thing1Thing2"},"content":"    public void addDeadlineToHistory(Deadline d) {","lastModifiedDate":"2022-08-21"},{"lineNumber":63,"author":{"gitId":"Thing1Thing2"},"content":"        String str \u003d d.toString() + \"\\n\";","lastModifiedDate":"2022-08-21"},{"lineNumber":64,"author":{"gitId":"Thing1Thing2"},"content":"        if (file.appendLine(str)) {","lastModifiedDate":"2022-08-21"},{"lineNumber":65,"author":{"gitId":"Thing1Thing2"},"content":"            userInputHistory.add(d);","lastModifiedDate":"2022-08-21"},{"lineNumber":66,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.printf(\"Noted down: %s\\n There are %d items on your list now. \\n\", d, userInputHistory.size());","lastModifiedDate":"2022-08-21"},{"lineNumber":67,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.print(\"\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":68,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":69,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":70,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":71,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":72,"author":{"gitId":"Thing1Thing2"},"content":"     * Adds Event to arrayList and updates file storage.","lastModifiedDate":"2022-08-21"},{"lineNumber":73,"author":{"gitId":"Thing1Thing2"},"content":"     * @param e event to be added.","lastModifiedDate":"2022-08-21"},{"lineNumber":74,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":75,"author":{"gitId":"Thing1Thing2"},"content":"    public void addEventToHistory(Event e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":76,"author":{"gitId":"Thing1Thing2"},"content":"        String str \u003d e.toString() + \"\\n\";","lastModifiedDate":"2022-08-21"},{"lineNumber":77,"author":{"gitId":"Thing1Thing2"},"content":"        if (file.appendLine(str)) {","lastModifiedDate":"2022-08-21"},{"lineNumber":78,"author":{"gitId":"Thing1Thing2"},"content":"            userInputHistory.add(e);","lastModifiedDate":"2022-08-21"},{"lineNumber":79,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.printf(\"Noted down: %s\\n There are %d items on your list now. \\n\", e, userInputHistory.size());","lastModifiedDate":"2022-08-21"},{"lineNumber":80,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.print(\"\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":81,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":82,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":83,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":84,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":85,"author":{"gitId":"Thing1Thing2"},"content":"     * Method to show history as stored on disk","lastModifiedDate":"2022-08-21"},{"lineNumber":86,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":87,"author":{"gitId":"Thing1Thing2"},"content":"    public void showHistory() throws IOException{","lastModifiedDate":"2022-08-21"},{"lineNumber":88,"author":{"gitId":"Thing1Thing2"},"content":"        int count \u003d 1;","lastModifiedDate":"2022-08-21"},{"lineNumber":89,"author":{"gitId":"Thing1Thing2"},"content":"        System.out.print(\"______\\n\");","lastModifiedDate":"2022-08-21"},{"lineNumber":90,"author":{"gitId":"Thing1Thing2"},"content":"        System.out.println(\"Tasks in your list are: \");","lastModifiedDate":"2022-08-21"},{"lineNumber":91,"author":{"gitId":"Thing1Thing2"},"content":"        List\u003cString\u003e history \u003d file.getAllLines();","lastModifiedDate":"2022-08-21"},{"lineNumber":92,"author":{"gitId":"Thing1Thing2"},"content":"        for (String s: history) {","lastModifiedDate":"2022-08-21"},{"lineNumber":93,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.printf(\"%d. %s\\n\", count, s);","lastModifiedDate":"2022-08-21"},{"lineNumber":94,"author":{"gitId":"Thing1Thing2"},"content":"            count++;","lastModifiedDate":"2022-08-21"},{"lineNumber":95,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":96,"author":{"gitId":"Thing1Thing2"},"content":"        System.out.printf(\"Total: %d\\n\", userInputHistory.size());","lastModifiedDate":"2022-08-21"},{"lineNumber":97,"author":{"gitId":"Thing1Thing2"},"content":"        System.out.print(\"______\\n\");","lastModifiedDate":"2022-08-21"},{"lineNumber":98,"author":{"gitId":"Thing1Thing2"},"content":"        System.out.print(\"\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":99,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":100,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":101,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":102,"author":{"gitId":"Thing1Thing2"},"content":"     * Return task stored at index n - 1","lastModifiedDate":"2022-08-21"},{"lineNumber":103,"author":{"gitId":"Thing1Thing2"},"content":"     * @param n index to asked for by user.","lastModifiedDate":"2022-08-21"},{"lineNumber":104,"author":{"gitId":"Thing1Thing2"},"content":"     * @return task at index n - 1 in the userInputHistory arraylist","lastModifiedDate":"2022-08-21"},{"lineNumber":105,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":106,"author":{"gitId":"Thing1Thing2"},"content":"    public Task getTask(int n)  {","lastModifiedDate":"2022-08-21"},{"lineNumber":107,"author":{"gitId":"Thing1Thing2"},"content":"        return userInputHistory.get(n - 1);","lastModifiedDate":"2022-08-21"},{"lineNumber":108,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":109,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":110,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":111,"author":{"gitId":"Thing1Thing2"},"content":"     * Delete task at index n - 1 in userInputHistory and disk","lastModifiedDate":"2022-08-21"},{"lineNumber":112,"author":{"gitId":"Thing1Thing2"},"content":"     * @param n index to be deleted","lastModifiedDate":"2022-08-21"},{"lineNumber":113,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":114,"author":{"gitId":"Thing1Thing2"},"content":"    public void deleteTask(int n)  {","lastModifiedDate":"2022-08-21"},{"lineNumber":115,"author":{"gitId":"Thing1Thing2"},"content":"        Task taskToModify \u003d userInputHistory.get(n - 1);","lastModifiedDate":"2022-08-21"},{"lineNumber":116,"author":{"gitId":"Thing1Thing2"},"content":"        if (file.deleteLine(n)) {","lastModifiedDate":"2022-08-21"},{"lineNumber":117,"author":{"gitId":"Thing1Thing2"},"content":"            userInputHistory.remove(n - 1);","lastModifiedDate":"2022-08-21"},{"lineNumber":118,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.printf(\"Task removed: \\n%s\\n\", taskToModify);","lastModifiedDate":"2022-08-21"},{"lineNumber":119,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.printf(\"Total: %d\\n\", userInputHistory.size());","lastModifiedDate":"2022-08-21"},{"lineNumber":120,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.print(\"______\\n\");","lastModifiedDate":"2022-08-21"},{"lineNumber":121,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.print(\"\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":122,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":123,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":124,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":125,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":126,"author":{"gitId":"Thing1Thing2"},"content":"     * Marks task at index n and updates disk with change made.","lastModifiedDate":"2022-08-21"},{"lineNumber":127,"author":{"gitId":"Thing1Thing2"},"content":"     * @param n index of task to be marked.","lastModifiedDate":"2022-08-21"},{"lineNumber":128,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":129,"author":{"gitId":"Thing1Thing2"},"content":"    public void markTask(int n) {","lastModifiedDate":"2022-08-21"},{"lineNumber":130,"author":{"gitId":"Thing1Thing2"},"content":"        Task taskToModify \u003d userInputHistory.get(n - 1);","lastModifiedDate":"2022-08-21"},{"lineNumber":131,"author":{"gitId":"Thing1Thing2"},"content":"        taskToModify.markAsDone();","lastModifiedDate":"2022-08-21"},{"lineNumber":132,"author":{"gitId":"Thing1Thing2"},"content":"        if (file.changeLine(n, taskToModify.toString())) {","lastModifiedDate":"2022-08-21"},{"lineNumber":133,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.printf(\"Marked task %d \\n%s\\n\", n, taskToModify);","lastModifiedDate":"2022-08-21"},{"lineNumber":134,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.print(\"\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":135,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":136,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":137,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":138,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":139,"author":{"gitId":"Thing1Thing2"},"content":"     * Unmarks task at index n and updates disk with change made.","lastModifiedDate":"2022-08-21"},{"lineNumber":140,"author":{"gitId":"Thing1Thing2"},"content":"     * @param n index of task to be unmarked.","lastModifiedDate":"2022-08-21"},{"lineNumber":141,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":142,"author":{"gitId":"Thing1Thing2"},"content":"    public void unMarkTask(int n) {","lastModifiedDate":"2022-08-21"},{"lineNumber":143,"author":{"gitId":"Thing1Thing2"},"content":"        Task taskToModify \u003d userInputHistory.get(n - 1);","lastModifiedDate":"2022-08-21"},{"lineNumber":144,"author":{"gitId":"Thing1Thing2"},"content":"        taskToModify.markAsNotDone();","lastModifiedDate":"2022-08-21"},{"lineNumber":145,"author":{"gitId":"Thing1Thing2"},"content":"        if (file.changeLine(n, taskToModify.toString())) {","lastModifiedDate":"2022-08-21"},{"lineNumber":146,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.printf(\"Unmarked task %d \\n%s\\n\", n, taskToModify);","lastModifiedDate":"2022-08-21"},{"lineNumber":147,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.print(\"\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":148,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":149,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":150,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":151,"author":{"gitId":"Thing1Thing2"},"content":"    public int numberOfTasksInList() {","lastModifiedDate":"2022-08-21"},{"lineNumber":152,"author":{"gitId":"Thing1Thing2"},"content":"        return userInputHistory.size();","lastModifiedDate":"2022-08-21"},{"lineNumber":153,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":154,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":155,"author":{"gitId":"Thing1Thing2"},"content":"    public void isToday(int n) {","lastModifiedDate":"2022-08-21"},{"lineNumber":156,"author":{"gitId":"Thing1Thing2"},"content":"        Task dt \u003d userInputHistory.get(n - 1);","lastModifiedDate":"2022-08-21"},{"lineNumber":157,"author":{"gitId":"Thing1Thing2"},"content":"        boolean isToday \u003d dt.isToday();","lastModifiedDate":"2022-08-21"},{"lineNumber":158,"author":{"gitId":"Thing1Thing2"},"content":"        if (isToday) {","lastModifiedDate":"2022-08-21"},{"lineNumber":159,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.printf(\"Task is due today\\n\u003e\u003e\", n);","lastModifiedDate":"2022-08-21"},{"lineNumber":160,"author":{"gitId":"Thing1Thing2"},"content":"        } else {","lastModifiedDate":"2022-08-21"},{"lineNumber":161,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.printf(\"Task is not due today\\n\u003e\u003e\", n);","lastModifiedDate":"2022-08-21"},{"lineNumber":162,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":163,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":164,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":165,"author":{"gitId":"Thing1Thing2"},"content":"    public void longDescription(int n) {","lastModifiedDate":"2022-08-21"},{"lineNumber":166,"author":{"gitId":"Thing1Thing2"},"content":"        Task dt \u003d userInputHistory.get(n - 1);","lastModifiedDate":"2022-08-21"},{"lineNumber":167,"author":{"gitId":"Thing1Thing2"},"content":"        System.out.printf(\"%s\\n\u003e\u003e\", dt.longDescription());","lastModifiedDate":"2022-08-21"},{"lineNumber":168,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":169,"author":{"gitId":"Thing1Thing2"},"content":"}","lastModifiedDate":"2022-08-21"}],"authorContributionMap":{"Thing1Thing2":169}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Thing1Thing2"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Thing1Thing2"},"content":"/**","lastModifiedDate":"2022-08-14"},{"lineNumber":4,"author":{"gitId":"Thing1Thing2"},"content":" * Event class has a date field.","lastModifiedDate":"2022-08-14"},{"lineNumber":5,"author":{"gitId":"Thing1Thing2"},"content":" */","lastModifiedDate":"2022-08-14"},{"lineNumber":6,"author":{"gitId":"Thing1Thing2"},"content":"public class Event extends Task{","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Thing1Thing2"},"content":"    protected LocalDate date;","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":9,"author":{"gitId":"Thing1Thing2"},"content":"    public Event(String description, LocalDate date) {","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Thing1Thing2"},"content":"        super(description);","lastModifiedDate":"2022-08-14"},{"lineNumber":11,"author":{"gitId":"Thing1Thing2"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-08-14"},{"lineNumber":12,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":13,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":14,"author":{"gitId":"Thing1Thing2"},"content":"    @Override","lastModifiedDate":"2022-08-14"},{"lineNumber":15,"author":{"gitId":"Thing1Thing2"},"content":"    public String toString() {","lastModifiedDate":"2022-08-14"},{"lineNumber":16,"author":{"gitId":"Thing1Thing2"},"content":"        String status;","lastModifiedDate":"2022-08-14"},{"lineNumber":17,"author":{"gitId":"Thing1Thing2"},"content":"        if (this.isDone) {","lastModifiedDate":"2022-08-14"},{"lineNumber":18,"author":{"gitId":"Thing1Thing2"},"content":"            status \u003d String.format(\"[E][âœ“] %s\", this.description);","lastModifiedDate":"2022-08-14"},{"lineNumber":19,"author":{"gitId":"Thing1Thing2"},"content":"        } else {","lastModifiedDate":"2022-08-14"},{"lineNumber":20,"author":{"gitId":"Thing1Thing2"},"content":"            status \u003d String.format(\"[E][ ] %s (at: %s)\", this.description, date);","lastModifiedDate":"2022-08-14"},{"lineNumber":21,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-14"},{"lineNumber":22,"author":{"gitId":"Thing1Thing2"},"content":"        return status;","lastModifiedDate":"2022-08-14"},{"lineNumber":23,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":24,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Thing1Thing2"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Thing1Thing2"},"content":"    public boolean isToday() {","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"Thing1Thing2"},"content":"        return date.isEqual(LocalDate.now());","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"Thing1Thing2"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Thing1Thing2"},"content":"    public String longDescription() {","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Thing1Thing2"},"content":"        String status;","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Thing1Thing2"},"content":"        String done \u003d this.isDone? \"was\": \"is\";","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"Thing1Thing2"},"content":"        status \u003d String.format(\"Event %s %s at %s %d %s %d\",","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"Thing1Thing2"},"content":"                this.description, done, this.date.getDayOfWeek(),","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"Thing1Thing2"},"content":"                this.date.getDayOfMonth() , this.date.getMonth(),","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"Thing1Thing2"},"content":"                this.date.getYear());","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"Thing1Thing2"},"content":"        return status;","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"Thing1Thing2"},"content":"}","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"Thing1Thing2":40}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Thing1Thing2"},"content":"/**","lastModifiedDate":"2022-08-14"},{"lineNumber":2,"author":{"gitId":"Thing1Thing2"},"content":" * Class to encapsulate Task object","lastModifiedDate":"2022-08-14"},{"lineNumber":3,"author":{"gitId":"Thing1Thing2"},"content":" */","lastModifiedDate":"2022-08-14"},{"lineNumber":4,"author":{"gitId":"Thing1Thing2"},"content":"public class Task {","lastModifiedDate":"2022-08-14"},{"lineNumber":5,"author":{"gitId":"Thing1Thing2"},"content":"    protected String description;","lastModifiedDate":"2022-08-14"},{"lineNumber":6,"author":{"gitId":"Thing1Thing2"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-08-14"},{"lineNumber":7,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":8,"author":{"gitId":"Thing1Thing2"},"content":"    public Task(String description) {","lastModifiedDate":"2022-08-14"},{"lineNumber":9,"author":{"gitId":"Thing1Thing2"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-08-14"},{"lineNumber":10,"author":{"gitId":"Thing1Thing2"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-14"},{"lineNumber":11,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":12,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":13,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-14"},{"lineNumber":14,"author":{"gitId":"Thing1Thing2"},"content":"     * String encapsulates Task description and isDone status.","lastModifiedDate":"2022-08-14"},{"lineNumber":15,"author":{"gitId":"Thing1Thing2"},"content":"     * @return String representing Task object","lastModifiedDate":"2022-08-14"},{"lineNumber":16,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-14"},{"lineNumber":17,"author":{"gitId":"Thing1Thing2"},"content":"    @Override","lastModifiedDate":"2022-08-14"},{"lineNumber":18,"author":{"gitId":"Thing1Thing2"},"content":"    public String toString() {","lastModifiedDate":"2022-08-14"},{"lineNumber":19,"author":{"gitId":"Thing1Thing2"},"content":"        String status;","lastModifiedDate":"2022-08-14"},{"lineNumber":20,"author":{"gitId":"Thing1Thing2"},"content":"        if (this.isDone) {","lastModifiedDate":"2022-08-14"},{"lineNumber":21,"author":{"gitId":"Thing1Thing2"},"content":"            status \u003d String.format(\"[T][âœ“] %s\", this.description);","lastModifiedDate":"2022-08-14"},{"lineNumber":22,"author":{"gitId":"Thing1Thing2"},"content":"        } else {","lastModifiedDate":"2022-08-14"},{"lineNumber":23,"author":{"gitId":"Thing1Thing2"},"content":"            status \u003d String.format(\"[T][ ] %s\", this.description);","lastModifiedDate":"2022-08-14"},{"lineNumber":24,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-14"},{"lineNumber":25,"author":{"gitId":"Thing1Thing2"},"content":"        return status;","lastModifiedDate":"2022-08-14"},{"lineNumber":26,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":27,"author":{"gitId":"Thing1Thing2"},"content":"    public String longDescription() {","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"Thing1Thing2"},"content":"        String status;","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Thing1Thing2"},"content":"        if (this.isDone) {","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"Thing1Thing2"},"content":"            status \u003d String.format(\"Task %s\", this.description);","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Thing1Thing2"},"content":"        } else {","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Thing1Thing2"},"content":"            status \u003d String.format(\"Task %s\", this.description);","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"Thing1Thing2"},"content":"        return status;","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":37,"author":{"gitId":"Thing1Thing2"},"content":"    public void markAsDone() {","lastModifiedDate":"2022-08-14"},{"lineNumber":38,"author":{"gitId":"Thing1Thing2"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-08-14"},{"lineNumber":39,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":40,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":41,"author":{"gitId":"Thing1Thing2"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2022-08-14"},{"lineNumber":42,"author":{"gitId":"Thing1Thing2"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-14"},{"lineNumber":43,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":44,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":45,"author":{"gitId":"Thing1Thing2"},"content":"    public boolean isToday() {","lastModifiedDate":"2022-08-21"},{"lineNumber":46,"author":{"gitId":"Thing1Thing2"},"content":"        return true;","lastModifiedDate":"2022-08-21"},{"lineNumber":47,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":48,"author":{"gitId":"Thing1Thing2"},"content":"}","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"Thing1Thing2":48}},{"path":"src/main/java/TypeConverter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Thing1Thing2"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Thing1Thing2"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Thing1Thing2"},"content":"/**","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"Thing1Thing2"},"content":" * Utility class to manage type conversions required in all Duke classes","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"Thing1Thing2"},"content":" */","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"Thing1Thing2"},"content":"public class TypeConverter {","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"Thing1Thing2"},"content":"     * Converts line in disk file to corresponding Task.","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Thing1Thing2"},"content":"     * @param line String stored in file.","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Thing1Thing2"},"content":"     * @return Task object.","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"Thing1Thing2"},"content":"    public static Task fileLineToTask(String line) throws DukeException{","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"Thing1Thing2"},"content":"        String taskType, description;","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"Thing1Thing2"},"content":"        boolean marked;","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"Thing1Thing2"},"content":"        taskType \u003d line.substring(1,2);","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"Thing1Thing2"},"content":"        marked \u003d  line.charAt(4) \u003d\u003d \u0027 \u0027;","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"Thing1Thing2"},"content":"        switch(taskType) {","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"Thing1Thing2"},"content":"        case \"T\":","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"Thing1Thing2"},"content":"            description \u003d line.substring(6);","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"Thing1Thing2"},"content":"            Task t \u003d new Task(description);","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"Thing1Thing2"},"content":"            if (marked) {","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"Thing1Thing2"},"content":"                t.markAsDone();","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Thing1Thing2"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Thing1Thing2"},"content":"            return t;","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"Thing1Thing2"},"content":"        case \"D\":","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"Thing1Thing2"},"content":"            description \u003d line.substring(6, line.indexOf(\"(\"));","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Thing1Thing2"},"content":"            Deadline d \u003d new Deadline(description, getDateFromStorage(line, \"by: \"));","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"Thing1Thing2"},"content":"            if (marked) {","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Thing1Thing2"},"content":"                d.markAsDone();","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Thing1Thing2"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Thing1Thing2"},"content":"            return d;","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"Thing1Thing2"},"content":"        case \"E\":","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"Thing1Thing2"},"content":"            description \u003d line.substring(6, line.indexOf(\"(\"));","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"Thing1Thing2"},"content":"            Event e \u003d new Event(description, getDateFromStorage(line, \"at: \"));","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"Thing1Thing2"},"content":"            if (marked) {","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"Thing1Thing2"},"content":"                e.markAsDone();","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"Thing1Thing2"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"Thing1Thing2"},"content":"            return e;","lastModifiedDate":"2022-08-21"},{"lineNumber":41,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":42,"author":{"gitId":"Thing1Thing2"},"content":"        throw new DukeException(\"file corrupted\");","lastModifiedDate":"2022-08-21"},{"lineNumber":43,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":44,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":45,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":46,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":47,"author":{"gitId":"Thing1Thing2"},"content":"     * Creates Task from user input format of task object creation.","lastModifiedDate":"2022-08-21"},{"lineNumber":48,"author":{"gitId":"Thing1Thing2"},"content":"     * @param str user input command.","lastModifiedDate":"2022-08-21"},{"lineNumber":49,"author":{"gitId":"Thing1Thing2"},"content":"     * @return Task object.","lastModifiedDate":"2022-08-21"},{"lineNumber":50,"author":{"gitId":"Thing1Thing2"},"content":"     * @throws DukeException when user input does not follow correct command structure.","lastModifiedDate":"2022-08-21"},{"lineNumber":51,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":52,"author":{"gitId":"Thing1Thing2"},"content":"    public static Task stringToTask(String str) throws DukeException{","lastModifiedDate":"2022-08-21"},{"lineNumber":53,"author":{"gitId":"Thing1Thing2"},"content":"        Duke.CommandType command \u003d getCommand(str);","lastModifiedDate":"2022-08-21"},{"lineNumber":54,"author":{"gitId":"Thing1Thing2"},"content":"        String description \u003d getDescription(str, command.toString().toLowerCase());","lastModifiedDate":"2022-08-21"},{"lineNumber":55,"author":{"gitId":"Thing1Thing2"},"content":"        LocalDate date;","lastModifiedDate":"2022-08-21"},{"lineNumber":56,"author":{"gitId":"Thing1Thing2"},"content":"        switch (command) {","lastModifiedDate":"2022-08-21"},{"lineNumber":57,"author":{"gitId":"Thing1Thing2"},"content":"        case TODO:","lastModifiedDate":"2022-08-21"},{"lineNumber":58,"author":{"gitId":"Thing1Thing2"},"content":"            return new Task(description);","lastModifiedDate":"2022-08-21"},{"lineNumber":59,"author":{"gitId":"Thing1Thing2"},"content":"        case DEADLINE:","lastModifiedDate":"2022-08-21"},{"lineNumber":60,"author":{"gitId":"Thing1Thing2"},"content":"            date \u003d getDateFromUserInput(str);","lastModifiedDate":"2022-08-21"},{"lineNumber":61,"author":{"gitId":"Thing1Thing2"},"content":"            return new Deadline(description, date);","lastModifiedDate":"2022-08-21"},{"lineNumber":62,"author":{"gitId":"Thing1Thing2"},"content":"        case EVENT:","lastModifiedDate":"2022-08-21"},{"lineNumber":63,"author":{"gitId":"Thing1Thing2"},"content":"            date \u003d getDateFromUserInput(str);","lastModifiedDate":"2022-08-21"},{"lineNumber":64,"author":{"gitId":"Thing1Thing2"},"content":"            return new Event(description, date);","lastModifiedDate":"2022-08-21"},{"lineNumber":65,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":66,"author":{"gitId":"Thing1Thing2"},"content":"        throw new DukeException(\"Cannot create task object\");","lastModifiedDate":"2022-08-21"},{"lineNumber":67,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":68,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":69,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":70,"author":{"gitId":"Thing1Thing2"},"content":"     * Creates Deadline from user input format of deadline object creation.","lastModifiedDate":"2022-08-21"},{"lineNumber":71,"author":{"gitId":"Thing1Thing2"},"content":"     * @param str user input command.","lastModifiedDate":"2022-08-21"},{"lineNumber":72,"author":{"gitId":"Thing1Thing2"},"content":"     * @return Deadline object.","lastModifiedDate":"2022-08-21"},{"lineNumber":73,"author":{"gitId":"Thing1Thing2"},"content":"     * @throws DukeException when user input does not follow correct command structure.","lastModifiedDate":"2022-08-21"},{"lineNumber":74,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":75,"author":{"gitId":"Thing1Thing2"},"content":"    public static Deadline stringToDeadline(String str) throws DukeException{","lastModifiedDate":"2022-08-21"},{"lineNumber":76,"author":{"gitId":"Thing1Thing2"},"content":"        Duke.CommandType command \u003d getCommand(str);","lastModifiedDate":"2022-08-21"},{"lineNumber":77,"author":{"gitId":"Thing1Thing2"},"content":"        String description \u003d getDescription(str, command.toString().toLowerCase());","lastModifiedDate":"2022-08-21"},{"lineNumber":78,"author":{"gitId":"Thing1Thing2"},"content":"        return new Deadline(description, getDateFromUserInput(str));","lastModifiedDate":"2022-08-21"},{"lineNumber":79,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":80,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":81,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":82,"author":{"gitId":"Thing1Thing2"},"content":"     * Creates Event from user input format of event object creation.","lastModifiedDate":"2022-08-21"},{"lineNumber":83,"author":{"gitId":"Thing1Thing2"},"content":"     * @param str user input command.","lastModifiedDate":"2022-08-21"},{"lineNumber":84,"author":{"gitId":"Thing1Thing2"},"content":"     * @return Event object.","lastModifiedDate":"2022-08-21"},{"lineNumber":85,"author":{"gitId":"Thing1Thing2"},"content":"     * @throws DukeException when user input does not follow correct command structure.","lastModifiedDate":"2022-08-21"},{"lineNumber":86,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":87,"author":{"gitId":"Thing1Thing2"},"content":"    public static Event stringToEvent(String str) throws DukeException{","lastModifiedDate":"2022-08-21"},{"lineNumber":88,"author":{"gitId":"Thing1Thing2"},"content":"        Duke.CommandType command \u003d getCommand(str);","lastModifiedDate":"2022-08-21"},{"lineNumber":89,"author":{"gitId":"Thing1Thing2"},"content":"        String description \u003d getDescription(str, command.toString().toLowerCase());","lastModifiedDate":"2022-08-21"},{"lineNumber":90,"author":{"gitId":"Thing1Thing2"},"content":"        return new Event(description, getDateFromUserInput(str));","lastModifiedDate":"2022-08-21"},{"lineNumber":91,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":92,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":93,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":94,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":95,"author":{"gitId":"Thing1Thing2"},"content":"     * Extract task number from string input.","lastModifiedDate":"2022-08-21"},{"lineNumber":96,"author":{"gitId":"Thing1Thing2"},"content":"     * @param s extracts task number from user input \u003ccommand\u003e \u003cnumber\u003e.","lastModifiedDate":"2022-08-21"},{"lineNumber":97,"author":{"gitId":"Thing1Thing2"},"content":"     * @return index of the task in the list plus one.","lastModifiedDate":"2022-08-21"},{"lineNumber":98,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":99,"author":{"gitId":"Thing1Thing2"},"content":"    public static int getTaskNumber(String s, int listSize) throws DukeException {","lastModifiedDate":"2022-08-21"},{"lineNumber":100,"author":{"gitId":"Thing1Thing2"},"content":"        // credit: https://stackoverflow.com/questions/14974033/extract-digits-from-string-stringutils-java","lastModifiedDate":"2022-08-21"},{"lineNumber":101,"author":{"gitId":"Thing1Thing2"},"content":"        String numberOnly\u003d s.replaceAll(\"[^0-9]\", \"\");","lastModifiedDate":"2022-08-21"},{"lineNumber":102,"author":{"gitId":"Thing1Thing2"},"content":"        int n;","lastModifiedDate":"2022-08-21"},{"lineNumber":103,"author":{"gitId":"Thing1Thing2"},"content":"        if (numberOnly.length() \u003c\u003d 0) {","lastModifiedDate":"2022-08-21"},{"lineNumber":104,"author":{"gitId":"Thing1Thing2"},"content":"            throw new DukeException(\"no number given\\n\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":105,"author":{"gitId":"Thing1Thing2"},"content":"        } else {","lastModifiedDate":"2022-08-21"},{"lineNumber":106,"author":{"gitId":"Thing1Thing2"},"content":"            n \u003d Integer.parseInt(numberOnly);","lastModifiedDate":"2022-08-21"},{"lineNumber":107,"author":{"gitId":"Thing1Thing2"},"content":"            if (n \u003e listSize) {","lastModifiedDate":"2022-08-21"},{"lineNumber":108,"author":{"gitId":"Thing1Thing2"},"content":"                throw new DukeException(\"task does not exist in list\\n\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":109,"author":{"gitId":"Thing1Thing2"},"content":"            } else {","lastModifiedDate":"2022-08-21"},{"lineNumber":110,"author":{"gitId":"Thing1Thing2"},"content":"                return n;","lastModifiedDate":"2022-08-21"},{"lineNumber":111,"author":{"gitId":"Thing1Thing2"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":112,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":113,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":114,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":115,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":116,"author":{"gitId":"Thing1Thing2"},"content":"     * Grabs description from string which is expected to have format:","lastModifiedDate":"2022-08-21"},{"lineNumber":117,"author":{"gitId":"Thing1Thing2"},"content":"     * \u003ccommand\u003e \u003cdescription\u003e...","lastModifiedDate":"2022-08-21"},{"lineNumber":118,"author":{"gitId":"Thing1Thing2"},"content":"     * @param input the full string input.","lastModifiedDate":"2022-08-21"},{"lineNumber":119,"author":{"gitId":"Thing1Thing2"},"content":"     * @param commandUsed command type used.","lastModifiedDate":"2022-08-21"},{"lineNumber":120,"author":{"gitId":"Thing1Thing2"},"content":"     * @return description.","lastModifiedDate":"2022-08-21"},{"lineNumber":121,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":122,"author":{"gitId":"Thing1Thing2"},"content":"    private static String getDescription(String input, String commandUsed) throws DukeException{","lastModifiedDate":"2022-08-21"},{"lineNumber":123,"author":{"gitId":"Thing1Thing2"},"content":"        String description;","lastModifiedDate":"2022-08-21"},{"lineNumber":124,"author":{"gitId":"Thing1Thing2"},"content":"        int startDescriptionIndex \u003d input.indexOf(commandUsed) + commandUsed.length();","lastModifiedDate":"2022-08-21"},{"lineNumber":125,"author":{"gitId":"Thing1Thing2"},"content":"        int endDescriptionIndex \u003d input.indexOf(\" /\");","lastModifiedDate":"2022-08-21"},{"lineNumber":126,"author":{"gitId":"Thing1Thing2"},"content":"        if (startDescriptionIndex \u003c 0) {","lastModifiedDate":"2022-08-21"},{"lineNumber":127,"author":{"gitId":"Thing1Thing2"},"content":"            throw new DukeException(\"Command does not follow pattern \u003ccommand\u003e \u003cdescription\u003e...\\n\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":128,"author":{"gitId":"Thing1Thing2"},"content":"        } else {","lastModifiedDate":"2022-08-21"},{"lineNumber":129,"author":{"gitId":"Thing1Thing2"},"content":"            if (commandUsed.equals(\"event\") || commandUsed.equals(\"deadline\")) {","lastModifiedDate":"2022-08-21"},{"lineNumber":130,"author":{"gitId":"Thing1Thing2"},"content":"                if (endDescriptionIndex \u003c 0) {","lastModifiedDate":"2022-08-21"},{"lineNumber":131,"author":{"gitId":"Thing1Thing2"},"content":"                    throw new DukeException(\"Command does not follow pattern  ... /\u003cat/by\u003e \u003cdate in HH:MM DD:MM:YYYY\u003e\\n\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":132,"author":{"gitId":"Thing1Thing2"},"content":"                } else {","lastModifiedDate":"2022-08-21"},{"lineNumber":133,"author":{"gitId":"Thing1Thing2"},"content":"                    description \u003d input.substring(startDescriptionIndex, endDescriptionIndex).trim();","lastModifiedDate":"2022-08-21"},{"lineNumber":134,"author":{"gitId":"Thing1Thing2"},"content":"                }","lastModifiedDate":"2022-08-21"},{"lineNumber":135,"author":{"gitId":"Thing1Thing2"},"content":"            } else {","lastModifiedDate":"2022-08-21"},{"lineNumber":136,"author":{"gitId":"Thing1Thing2"},"content":"                description \u003d input.substring(startDescriptionIndex).trim();","lastModifiedDate":"2022-08-21"},{"lineNumber":137,"author":{"gitId":"Thing1Thing2"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":138,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":139,"author":{"gitId":"Thing1Thing2"},"content":"        if (description.equals(\"\")) {","lastModifiedDate":"2022-08-21"},{"lineNumber":140,"author":{"gitId":"Thing1Thing2"},"content":"            throw new DukeException(\"Empty description field\\n\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":141,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":142,"author":{"gitId":"Thing1Thing2"},"content":"        return description;","lastModifiedDate":"2022-08-21"},{"lineNumber":143,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":144,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":145,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":146,"author":{"gitId":"Thing1Thing2"},"content":"     * Grabs date from user input string which is expected to have format:","lastModifiedDate":"2022-08-21"},{"lineNumber":147,"author":{"gitId":"Thing1Thing2"},"content":"     * ... /\u003cat/by\u003e \u003cdate in YYYY-MM-DD\u003e.","lastModifiedDate":"2022-08-21"},{"lineNumber":148,"author":{"gitId":"Thing1Thing2"},"content":"     * @param command is the string to extract date from.","lastModifiedDate":"2022-08-21"},{"lineNumber":149,"author":{"gitId":"Thing1Thing2"},"content":"     * @return \u003cdate\u003e component of command.","lastModifiedDate":"2022-08-21"},{"lineNumber":150,"author":{"gitId":"Thing1Thing2"},"content":"     * @throws DukeException when date format is not followed or date is empty.","lastModifiedDate":"2022-08-21"},{"lineNumber":151,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":152,"author":{"gitId":"Thing1Thing2"},"content":"    private static LocalDate getDateFromUserInput(String command) throws DukeException{","lastModifiedDate":"2022-08-21"},{"lineNumber":153,"author":{"gitId":"Thing1Thing2"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":154,"author":{"gitId":"Thing1Thing2"},"content":"            String date \u003d \"\";","lastModifiedDate":"2022-08-21"},{"lineNumber":155,"author":{"gitId":"Thing1Thing2"},"content":"            int startDateIndex \u003d command.indexOf(\"/\") + 3;","lastModifiedDate":"2022-08-21"},{"lineNumber":156,"author":{"gitId":"Thing1Thing2"},"content":"            if (startDateIndex \u003c 0) {","lastModifiedDate":"2022-08-21"},{"lineNumber":157,"author":{"gitId":"Thing1Thing2"},"content":"                throw new DukeException(\"Command does not follow pattern ... /\u003cat/by\u003e \u003cYYYY-MM-DD\u003e\\n\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":158,"author":{"gitId":"Thing1Thing2"},"content":"            } else {","lastModifiedDate":"2022-08-21"},{"lineNumber":159,"author":{"gitId":"Thing1Thing2"},"content":"                date \u003d command.substring(startDateIndex).trim();","lastModifiedDate":"2022-08-21"},{"lineNumber":160,"author":{"gitId":"Thing1Thing2"},"content":"                if (date.equals(\"\")) {","lastModifiedDate":"2022-08-21"},{"lineNumber":161,"author":{"gitId":"Thing1Thing2"},"content":"                    throw new DukeException(\"Empty date field\\n\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":162,"author":{"gitId":"Thing1Thing2"},"content":"                }","lastModifiedDate":"2022-08-21"},{"lineNumber":163,"author":{"gitId":"Thing1Thing2"},"content":"                return LocalDate.parse(date);","lastModifiedDate":"2022-08-21"},{"lineNumber":164,"author":{"gitId":"Thing1Thing2"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":165,"author":{"gitId":"Thing1Thing2"},"content":"        } catch (DateTimeParseException dtpe) {","lastModifiedDate":"2022-08-21"},{"lineNumber":166,"author":{"gitId":"Thing1Thing2"},"content":"            throw new DukeException(\"Date is not valid\\n\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":167,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":168,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":169,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":170,"author":{"gitId":"Thing1Thing2"},"content":"    public static LocalDate getDateFromStorage(String line, String compareString) throws DukeException, DateTimeParseException {","lastModifiedDate":"2022-08-21"},{"lineNumber":171,"author":{"gitId":"Thing1Thing2"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":172,"author":{"gitId":"Thing1Thing2"},"content":"            String date \u003d \"\";","lastModifiedDate":"2022-08-21"},{"lineNumber":173,"author":{"gitId":"Thing1Thing2"},"content":"            int NUM_CHARACTERS_TO_CHECK \u003d compareString.length();","lastModifiedDate":"2022-08-21"},{"lineNumber":174,"author":{"gitId":"Thing1Thing2"},"content":"            int DATE_LENGTH \u003d 10;","lastModifiedDate":"2022-08-21"},{"lineNumber":175,"author":{"gitId":"Thing1Thing2"},"content":"            int startOfDateIndex \u003d line.indexOf(compareString) + NUM_CHARACTERS_TO_CHECK;","lastModifiedDate":"2022-08-21"},{"lineNumber":176,"author":{"gitId":"Thing1Thing2"},"content":"            date \u003d line.substring(startOfDateIndex, startOfDateIndex + DATE_LENGTH).trim();","lastModifiedDate":"2022-08-21"},{"lineNumber":177,"author":{"gitId":"Thing1Thing2"},"content":"            return LocalDate.parse(date);","lastModifiedDate":"2022-08-21"},{"lineNumber":178,"author":{"gitId":"Thing1Thing2"},"content":"        } catch (DateTimeParseException dtpe) {","lastModifiedDate":"2022-08-21"},{"lineNumber":179,"author":{"gitId":"Thing1Thing2"},"content":"            throw new DukeException(\"Date in storage is invalid\\n\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":180,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":181,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":182,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":183,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":184,"author":{"gitId":"Thing1Thing2"},"content":"     * Returns enum command type used.","lastModifiedDate":"2022-08-21"},{"lineNumber":185,"author":{"gitId":"Thing1Thing2"},"content":"     * @param userInput user input received.","lastModifiedDate":"2022-08-21"},{"lineNumber":186,"author":{"gitId":"Thing1Thing2"},"content":"     * @return enum command type.","lastModifiedDate":"2022-08-21"},{"lineNumber":187,"author":{"gitId":"Thing1Thing2"},"content":"     * @throws DukeException when no match found.","lastModifiedDate":"2022-08-21"},{"lineNumber":188,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":189,"author":{"gitId":"Thing1Thing2"},"content":"    public static Duke.CommandType getCommand(String userInput) throws DukeException{","lastModifiedDate":"2022-08-21"},{"lineNumber":190,"author":{"gitId":"Thing1Thing2"},"content":"        int firstWhiteSpace \u003d userInput.trim().indexOf(\" \");","lastModifiedDate":"2022-08-21"},{"lineNumber":191,"author":{"gitId":"Thing1Thing2"},"content":"        String command;","lastModifiedDate":"2022-08-21"},{"lineNumber":192,"author":{"gitId":"Thing1Thing2"},"content":"        command \u003d firstWhiteSpace \u003c 0 ? userInput: userInput.trim().substring(0, firstWhiteSpace);","lastModifiedDate":"2022-08-21"},{"lineNumber":193,"author":{"gitId":"Thing1Thing2"},"content":"        if (command.equals(\"\")) {","lastModifiedDate":"2022-08-21"},{"lineNumber":194,"author":{"gitId":"Thing1Thing2"},"content":"            throw new DukeException(\"no command given\\n\u003e\u003e\");","lastModifiedDate":"2022-08-21"},{"lineNumber":195,"author":{"gitId":"Thing1Thing2"},"content":"        } else {","lastModifiedDate":"2022-08-21"},{"lineNumber":196,"author":{"gitId":"Thing1Thing2"},"content":"            for (Duke.CommandType c : Duke.CommandType.values()) {","lastModifiedDate":"2022-08-21"},{"lineNumber":197,"author":{"gitId":"Thing1Thing2"},"content":"                if(c.name().equalsIgnoreCase(command)) {","lastModifiedDate":"2022-08-21"},{"lineNumber":198,"author":{"gitId":"Thing1Thing2"},"content":"                    return c;","lastModifiedDate":"2022-08-21"},{"lineNumber":199,"author":{"gitId":"Thing1Thing2"},"content":"                }","lastModifiedDate":"2022-08-21"},{"lineNumber":200,"author":{"gitId":"Thing1Thing2"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":201,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":202,"author":{"gitId":"Thing1Thing2"},"content":"        return null;","lastModifiedDate":"2022-08-21"},{"lineNumber":203,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":204,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":205,"author":{"gitId":"Thing1Thing2"},"content":"}","lastModifiedDate":"2022-08-21"}],"authorContributionMap":{"Thing1Thing2":205}},{"path":"src/main/java/UserInputHistory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Thing1Thing2"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2022-08-20"},{"lineNumber":2,"author":{"gitId":"Thing1Thing2"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-08-20"},{"lineNumber":3,"author":{"gitId":"Thing1Thing2"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-08-20"},{"lineNumber":4,"author":{"gitId":"Thing1Thing2"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-08-20"},{"lineNumber":5,"author":{"gitId":"Thing1Thing2"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-20"},{"lineNumber":6,"author":{"gitId":"Thing1Thing2"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2022-08-20"},{"lineNumber":7,"author":{"gitId":"Thing1Thing2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-20"},{"lineNumber":8,"author":{"gitId":"Thing1Thing2"},"content":"import java.util.List;","lastModifiedDate":"2022-08-20"},{"lineNumber":9,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-20"},{"lineNumber":10,"author":{"gitId":"Thing1Thing2"},"content":"/**","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"Thing1Thing2"},"content":" * Manages all direct interactions between DukeToStorage and file storage.","lastModifiedDate":"2022-08-21"},{"lineNumber":12,"author":{"gitId":"Thing1Thing2"},"content":" */","lastModifiedDate":"2022-08-21"},{"lineNumber":13,"author":{"gitId":"Thing1Thing2"},"content":"public class UserInputHistory {","lastModifiedDate":"2022-08-20"},{"lineNumber":14,"author":{"gitId":"Thing1Thing2"},"content":"    private Path path;","lastModifiedDate":"2022-08-21"},{"lineNumber":15,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"Thing1Thing2"},"content":"    public UserInputHistory() {","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"Thing1Thing2"},"content":"        createIfDoesntExist();","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":19,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"Thing1Thing2"},"content":"     * Gets location of disk storage file.","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"Thing1Thing2"},"content":"     * @throws DukeException when Duke program run outside of Duke folder.","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"Thing1Thing2"},"content":"    private void getPath() throws DukeException {","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"Thing1Thing2"},"content":"        String pathString \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"Thing1Thing2"},"content":"                if (pathString.contains(\"ip\")) {","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"Thing1Thing2"},"content":"                    pathString \u003d pathString.substring(0, pathString.indexOf(\"ip\") + 2);","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"Thing1Thing2"},"content":"                    this.path \u003d Paths.get(pathString, \"src\", \"main\", \"java\", \"userinputhistory.txt\");","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"Thing1Thing2"},"content":"                } else {","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"Thing1Thing2"},"content":"                    throw new DukeException(\"Cannot run from outside of ip folder of Duke\");","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"Thing1Thing2"},"content":"                }","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"Thing1Thing2"},"content":"     * Creates file at path for disk storage.","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"Thing1Thing2"},"content":"    public void createIfDoesntExist() {","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"Thing1Thing2"},"content":"        try {","lastModifiedDate":"2022-08-20"},{"lineNumber":39,"author":{"gitId":"Thing1Thing2"},"content":"            getPath();","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"Thing1Thing2"},"content":"            if (!Files.exists(path)) {","lastModifiedDate":"2022-08-20"},{"lineNumber":41,"author":{"gitId":"Thing1Thing2"},"content":"                Files.createFile(path);","lastModifiedDate":"2022-08-20"},{"lineNumber":42,"author":{"gitId":"Thing1Thing2"},"content":"            }","lastModifiedDate":"2022-08-20"},{"lineNumber":43,"author":{"gitId":"Thing1Thing2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-20"},{"lineNumber":44,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.println(\"IOException: \" + e);","lastModifiedDate":"2022-08-20"},{"lineNumber":45,"author":{"gitId":"Thing1Thing2"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":46,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.println(\"DukeException: \" + e);","lastModifiedDate":"2022-08-21"},{"lineNumber":47,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-20"},{"lineNumber":48,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-20"},{"lineNumber":49,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":50,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":51,"author":{"gitId":"Thing1Thing2"},"content":"     * Appends line to file and returns true if operation completed successfully.","lastModifiedDate":"2022-08-21"},{"lineNumber":52,"author":{"gitId":"Thing1Thing2"},"content":"     * @param s line to be appended.","lastModifiedDate":"2022-08-21"},{"lineNumber":53,"author":{"gitId":"Thing1Thing2"},"content":"     * @return true if appended successfully.","lastModifiedDate":"2022-08-21"},{"lineNumber":54,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":55,"author":{"gitId":"Thing1Thing2"},"content":"    public boolean appendLine(String s)  {","lastModifiedDate":"2022-08-21"},{"lineNumber":56,"author":{"gitId":"Thing1Thing2"},"content":"        try {","lastModifiedDate":"2022-08-20"},{"lineNumber":57,"author":{"gitId":"Thing1Thing2"},"content":"            Files.write(path, s.getBytes(StandardCharsets.UTF_8), StandardOpenOption.APPEND);","lastModifiedDate":"2022-08-20"},{"lineNumber":58,"author":{"gitId":"Thing1Thing2"},"content":"            return true;","lastModifiedDate":"2022-08-21"},{"lineNumber":59,"author":{"gitId":"Thing1Thing2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-20"},{"lineNumber":60,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.println(\"IOException: \" + e);","lastModifiedDate":"2022-08-20"},{"lineNumber":61,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-20"},{"lineNumber":62,"author":{"gitId":"Thing1Thing2"},"content":"        return false;","lastModifiedDate":"2022-08-21"},{"lineNumber":63,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-20"},{"lineNumber":64,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-20"},{"lineNumber":65,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":66,"author":{"gitId":"Thing1Thing2"},"content":"     * Removes everything from file at path.","lastModifiedDate":"2022-08-21"},{"lineNumber":67,"author":{"gitId":"Thing1Thing2"},"content":"     * Rewrites to file from userInputHistory arraylist in DukeToStorage class.","lastModifiedDate":"2022-08-21"},{"lineNumber":68,"author":{"gitId":"Thing1Thing2"},"content":"     * @param index index of line to delete (1-indexed).","lastModifiedDate":"2022-08-21"},{"lineNumber":69,"author":{"gitId":"Thing1Thing2"},"content":"     * @return true if line deleted successfully.","lastModifiedDate":"2022-08-21"},{"lineNumber":70,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":71,"author":{"gitId":"Thing1Thing2"},"content":"    public boolean deleteLine(int index) {","lastModifiedDate":"2022-08-21"},{"lineNumber":72,"author":{"gitId":"Thing1Thing2"},"content":"        try {","lastModifiedDate":"2022-08-20"},{"lineNumber":73,"author":{"gitId":"Thing1Thing2"},"content":"            String temp \u003d \"\";","lastModifiedDate":"2022-08-21"},{"lineNumber":74,"author":{"gitId":"Thing1Thing2"},"content":"            List\u003cString\u003e history \u003d Files.readAllLines(path);","lastModifiedDate":"2022-08-20"},{"lineNumber":75,"author":{"gitId":"Thing1Thing2"},"content":"            Files.write(path, temp.getBytes(StandardCharsets.UTF_8));","lastModifiedDate":"2022-08-21"},{"lineNumber":76,"author":{"gitId":"Thing1Thing2"},"content":"            int n \u003d history.size(), i \u003d 0;","lastModifiedDate":"2022-08-20"},{"lineNumber":77,"author":{"gitId":"Thing1Thing2"},"content":"            for (i \u003d 0; i \u003c n ; i ++) {","lastModifiedDate":"2022-08-20"},{"lineNumber":78,"author":{"gitId":"Thing1Thing2"},"content":"                if (i !\u003d index - 1) {","lastModifiedDate":"2022-08-20"},{"lineNumber":79,"author":{"gitId":"Thing1Thing2"},"content":"                    temp \u003d history.get(i) + \"\\n\";","lastModifiedDate":"2022-08-21"},{"lineNumber":80,"author":{"gitId":"Thing1Thing2"},"content":"                    Files.write(path, temp.getBytes(StandardCharsets.UTF_8), StandardOpenOption.APPEND);","lastModifiedDate":"2022-08-21"},{"lineNumber":81,"author":{"gitId":"Thing1Thing2"},"content":"                }","lastModifiedDate":"2022-08-20"},{"lineNumber":82,"author":{"gitId":"Thing1Thing2"},"content":"            }","lastModifiedDate":"2022-08-20"},{"lineNumber":83,"author":{"gitId":"Thing1Thing2"},"content":"            return true;","lastModifiedDate":"2022-08-21"},{"lineNumber":84,"author":{"gitId":"Thing1Thing2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-20"},{"lineNumber":85,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.println(\"IOException: \" + e);","lastModifiedDate":"2022-08-20"},{"lineNumber":86,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-20"},{"lineNumber":87,"author":{"gitId":"Thing1Thing2"},"content":"        return false;","lastModifiedDate":"2022-08-21"},{"lineNumber":88,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-20"},{"lineNumber":89,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-20"},{"lineNumber":90,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-20"},{"lineNumber":91,"author":{"gitId":"Thing1Thing2"},"content":"     * Changes line at index (index - 1) in storage file, by:","lastModifiedDate":"2022-08-21"},{"lineNumber":92,"author":{"gitId":"Thing1Thing2"},"content":"     * 1. deleting line at index - 1,","lastModifiedDate":"2022-08-21"},{"lineNumber":93,"author":{"gitId":"Thing1Thing2"},"content":"     * 2. appending newString to end of file.","lastModifiedDate":"2022-08-21"},{"lineNumber":94,"author":{"gitId":"Thing1Thing2"},"content":"     * @param index line to be changed.","lastModifiedDate":"2022-08-21"},{"lineNumber":95,"author":{"gitId":"Thing1Thing2"},"content":"     * @param newString new string to be added instead.","lastModifiedDate":"2022-08-21"},{"lineNumber":96,"author":{"gitId":"Thing1Thing2"},"content":"     * @return true if changed successfully.","lastModifiedDate":"2022-08-21"},{"lineNumber":97,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-20"},{"lineNumber":98,"author":{"gitId":"Thing1Thing2"},"content":"    public boolean changeLine(int index, String newString) {","lastModifiedDate":"2022-08-21"},{"lineNumber":99,"author":{"gitId":"Thing1Thing2"},"content":"        return deleteLine(index) \u0026 appendLine(newString);","lastModifiedDate":"2022-08-21"},{"lineNumber":100,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-20"},{"lineNumber":101,"author":{"gitId":"Thing1Thing2"},"content":"","lastModifiedDate":"2022-08-20"},{"lineNumber":102,"author":{"gitId":"Thing1Thing2"},"content":"    /**","lastModifiedDate":"2022-08-20"},{"lineNumber":103,"author":{"gitId":"Thing1Thing2"},"content":"     * Return contents of file history.","lastModifiedDate":"2022-08-21"},{"lineNumber":104,"author":{"gitId":"Thing1Thing2"},"content":"     * @return arraylist containing all the lines in the file.","lastModifiedDate":"2022-08-21"},{"lineNumber":105,"author":{"gitId":"Thing1Thing2"},"content":"     */","lastModifiedDate":"2022-08-20"},{"lineNumber":106,"author":{"gitId":"Thing1Thing2"},"content":"    public List\u003cString\u003e getAllLines() {","lastModifiedDate":"2022-08-21"},{"lineNumber":107,"author":{"gitId":"Thing1Thing2"},"content":"        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-08-21"},{"lineNumber":108,"author":{"gitId":"Thing1Thing2"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":109,"author":{"gitId":"Thing1Thing2"},"content":"            return Files.readAllLines(path);","lastModifiedDate":"2022-08-21"},{"lineNumber":110,"author":{"gitId":"Thing1Thing2"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":111,"author":{"gitId":"Thing1Thing2"},"content":"            System.out.println(\"IOException: \" + e);","lastModifiedDate":"2022-08-21"},{"lineNumber":112,"author":{"gitId":"Thing1Thing2"},"content":"        }","lastModifiedDate":"2022-08-20"},{"lineNumber":113,"author":{"gitId":"Thing1Thing2"},"content":"        return list;","lastModifiedDate":"2022-08-21"},{"lineNumber":114,"author":{"gitId":"Thing1Thing2"},"content":"    }","lastModifiedDate":"2022-08-20"},{"lineNumber":115,"author":{"gitId":"Thing1Thing2"},"content":"}","lastModifiedDate":"2022-08-20"}],"authorContributionMap":{"Thing1Thing2":115}},{"path":"src/main/java/userinputhistory.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Thing1Thing2"},"content":"[T][ ] newTask","lastModifiedDate":"2022-08-21"},{"lineNumber":2,"author":{"gitId":"Thing1Thing2"},"content":"[E][ ] e1 (at: 2022-04-05)","lastModifiedDate":"2022-08-21"},{"lineNumber":3,"author":{"gitId":"Thing1Thing2"},"content":"[E][ ] 32 (at: 2021-04-02)","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"Thing1Thing2"},"content":"[D][âœ“]  e1 ","lastModifiedDate":"2022-08-21"}],"authorContributionMap":{"Thing1Thing2":4}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Thing1Thing2"},"content":"bye","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"Thing1Thing2":1}},{"path":"text-ui-test/input1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Thing1Thing2"},"content":"todo home","lastModifiedDate":"2022-08-14"},{"lineNumber":2,"author":{"gitId":"Thing1Thing2"},"content":"list","lastModifiedDate":"2022-08-14"},{"lineNumber":3,"author":{"gitId":"Thing1Thing2"},"content":"bye","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"Thing1Thing2":3}},{"path":"text-ui-test/input2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Thing1Thing2"},"content":"event Welcome Tea /at 2oclock","lastModifiedDate":"2022-08-14"},{"lineNumber":2,"author":{"gitId":"Thing1Thing2"},"content":"list","lastModifiedDate":"2022-08-14"},{"lineNumber":3,"author":{"gitId":"Thing1Thing2"},"content":"bye","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"Thing1Thing2":3}},{"path":"text-ui-test/input3.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Thing1Thing2"},"content":"deadline CS2103T Week 2 iP /by next tutorial","lastModifiedDate":"2022-08-14"},{"lineNumber":2,"author":{"gitId":"Thing1Thing2"},"content":"list","lastModifiedDate":"2022-08-14"},{"lineNumber":3,"author":{"gitId":"Thing1Thing2"},"content":"bye","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"Thing1Thing2":3}},{"path":"text-ui-test/input4.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Thing1Thing2"},"content":"todo buy milk","lastModifiedDate":"2022-08-14"},{"lineNumber":2,"author":{"gitId":"Thing1Thing2"},"content":"mark 1","lastModifiedDate":"2022-08-14"},{"lineNumber":3,"author":{"gitId":"Thing1Thing2"},"content":"list","lastModifiedDate":"2022-08-14"},{"lineNumber":4,"author":{"gitId":"Thing1Thing2"},"content":"bye","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"Thing1Thing2":4}},{"path":"text-ui-test/input5.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Thing1Thing2"},"content":"deadline send email /by afternoon","lastModifiedDate":"2022-08-14"},{"lineNumber":2,"author":{"gitId":"Thing1Thing2"},"content":"todo have lunch","lastModifiedDate":"2022-08-14"},{"lineNumber":3,"author":{"gitId":"Thing1Thing2"},"content":"mark 1","lastModifiedDate":"2022-08-14"},{"lineNumber":4,"author":{"gitId":"Thing1Thing2"},"content":"list","lastModifiedDate":"2022-08-14"},{"lineNumber":5,"author":{"gitId":"Thing1Thing2"},"content":"unmark 1","lastModifiedDate":"2022-08-14"},{"lineNumber":6,"author":{"gitId":"Thing1Thing2"},"content":"list","lastModifiedDate":"2022-08-14"},{"lineNumber":7,"author":{"gitId":"Thing1Thing2"},"content":"bye","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"Thing1Thing2":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":" REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":" if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"Thing1Thing2"},"content":" del ACTUAL.TXT","lastModifiedDate":"2022-08-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":" REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":" javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":" IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"         exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"         )","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"Thing1Thing2"},"content":"REM no error here, errorLevel \u003d\u003d 0","lastModifiedDate":"2022-08-14"},{"lineNumber":16,"author":{"gitId":"Thing1Thing2"},"content":"REM run the program, feed command from inputn.txt file and redirect the output to the ACTUAL.txt","lastModifiedDate":"2022-08-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"         java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Thing1Thing2"},"content":"         java -classpath ..\\bin Duke \u003c input1.txt \u003e\u003e ACTUAL.TXT","lastModifiedDate":"2022-08-14"},{"lineNumber":19,"author":{"gitId":"Thing1Thing2"},"content":"         java -classpath ..\\bin Duke \u003c input2.txt \u003e\u003e ACTUAL.TXT","lastModifiedDate":"2022-08-14"},{"lineNumber":20,"author":{"gitId":"Thing1Thing2"},"content":"         java -classpath ..\\bin Duke \u003c input3.txt \u003e\u003e ACTUAL.TXT","lastModifiedDate":"2022-08-14"},{"lineNumber":21,"author":{"gitId":"Thing1Thing2"},"content":"         java -classpath ..\\bin Duke \u003c input4.txt \u003e\u003e ACTUAL.TXT","lastModifiedDate":"2022-08-14"},{"lineNumber":22,"author":{"gitId":"Thing1Thing2"},"content":"         java -classpath ..\\bin Duke \u003c input5.txt \u003e\u003e ACTUAL.TXT","lastModifiedDate":"2022-08-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\t REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"         FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Thing1Thing2":8,"-":17}}]
