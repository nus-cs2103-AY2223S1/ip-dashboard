[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"checkstyle {","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":41,"cadencjk":20}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import duke.command.Command;","lastModifiedDate":"2022-09-01"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"import duke.gui.Ui;","lastModifiedDate":"2022-08-31"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"import duke.parser.Parser;","lastModifiedDate":"2022-09-01"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-08-31"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-08-31"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-08-29"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":" * Contains the methods and attributes necessary for Duke.","lastModifiedDate":"2022-08-29"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-08-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"    private static TaskList tasks;","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"    private static Storage storage;","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"    private Ui ui;","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"     * Default public constructor which stores the saved list in /data/duke.txt.","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"    public Duke() {","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"        this(\"data/duke.txt\");","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"     * Creates new TaskList, Storage and Ui for Duke to run.","lastModifiedDate":"2022-08-29"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"     * @param filePath the path of the file the user wishes to store and write data to","lastModifiedDate":"2022-08-29"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"cadencjk"},"content":"            assert tasks !\u003d null : \"Task is not loaded properly!\";","lastModifiedDate":"2022-09-03"},{"lineNumber":35,"author":{"gitId":"cadencjk"},"content":"        } catch (Exception e) {","lastModifiedDate":"2022-08-29"},{"lineNumber":36,"author":{"gitId":"cadencjk"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"cadencjk"},"content":"            ui.showLoadingError();","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":39,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":41,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":42,"author":{"gitId":"cadencjk"},"content":"     * Processes the information typed by the user, and replies accordingly.","lastModifiedDate":"2022-08-31"},{"lineNumber":43,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":44,"author":{"gitId":"cadencjk"},"content":"     * @param userInput the text inputted by the user","lastModifiedDate":"2022-08-29"},{"lineNumber":45,"author":{"gitId":"cadencjk"},"content":"     * @return the reply in response to the input","lastModifiedDate":"2022-08-29"},{"lineNumber":46,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":47,"author":{"gitId":"cadencjk"},"content":"    public String getResponse(String userInput) {","lastModifiedDate":"2022-08-29"},{"lineNumber":48,"author":{"gitId":"cadencjk"},"content":"        Command command \u003d Parser.parse(userInput);","lastModifiedDate":"2022-09-01"},{"lineNumber":49,"author":{"gitId":"cadencjk"},"content":"        return command.runCommand(storage, tasks);","lastModifiedDate":"2022-09-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"cadencjk":48,"-":3}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke;","lastModifiedDate":"2022-08-29"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import duke.gui.Main;","lastModifiedDate":"2022-08-31"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-08-29"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-08-29"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2022-08-29"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-08-29"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"public class Launcher {","lastModifiedDate":"2022-08-29"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-08-29"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2022-08-29"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-08-29"}],"authorContributionMap":{"cadencjk":13}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.command;","lastModifiedDate":"2022-09-01"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-01"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-01"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-01"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"import duke.task.DeadLine;","lastModifiedDate":"2022-09-01"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"import duke.task.Event;","lastModifiedDate":"2022-09-01"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"import duke.task.Task;","lastModifiedDate":"2022-09-01"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-09-01"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"import duke.task.ToDo;","lastModifiedDate":"2022-09-01"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-09-01"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":" * Manages the adding of new tasks to a specified task list.","lastModifiedDate":"2022-09-01"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-09-01"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2022-09-01"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"    private static final int INDEX_OF_COMMAND_WORD \u003d 0;","lastModifiedDate":"2022-09-04"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"    private String userInput;","lastModifiedDate":"2022-09-01"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"     * Public constructor that stores the input from the user.","lastModifiedDate":"2022-09-01"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-09-01"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"     * @param userInput the String input by the user","lastModifiedDate":"2022-09-01"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"    public AddCommand(String userInput) {","lastModifiedDate":"2022-09-01"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2022-09-01"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-09-01"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"     * Executes the command and add new task to the specified task list.","lastModifiedDate":"2022-09-01"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"     * Saves and updates the storage to include the new task.","lastModifiedDate":"2022-09-01"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-09-01"},{"lineNumber":34,"author":{"gitId":"cadencjk"},"content":"     * @param storage  the storage object which handles reading and writing of data","lastModifiedDate":"2022-09-01"},{"lineNumber":35,"author":{"gitId":"cadencjk"},"content":"     * @param taskList the list of tasks currently stored","lastModifiedDate":"2022-09-01"},{"lineNumber":36,"author":{"gitId":"cadencjk"},"content":"     * @return a String which replies to the user","lastModifiedDate":"2022-09-01"},{"lineNumber":37,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":38,"author":{"gitId":"cadencjk"},"content":"    @Override","lastModifiedDate":"2022-09-01"},{"lineNumber":39,"author":{"gitId":"cadencjk"},"content":"    public String runCommand(Storage storage, TaskList taskList) {","lastModifiedDate":"2022-09-04"},{"lineNumber":40,"author":{"gitId":"cadencjk"},"content":"        String commandWord \u003d userInput.split(\" \", 2)[INDEX_OF_COMMAND_WORD];","lastModifiedDate":"2022-09-04"},{"lineNumber":41,"author":{"gitId":"cadencjk"},"content":"        Task newTask \u003d null;","lastModifiedDate":"2022-09-01"},{"lineNumber":42,"author":{"gitId":"cadencjk"},"content":"        if (commandWord.equals(\"todo\")) {","lastModifiedDate":"2022-09-01"},{"lineNumber":43,"author":{"gitId":"cadencjk"},"content":"            newTask \u003d new ToDo();","lastModifiedDate":"2022-09-01"},{"lineNumber":44,"author":{"gitId":"cadencjk"},"content":"        } else if (commandWord.equals(\"event\")) {","lastModifiedDate":"2022-09-01"},{"lineNumber":45,"author":{"gitId":"cadencjk"},"content":"            newTask \u003d new Event();","lastModifiedDate":"2022-09-01"},{"lineNumber":46,"author":{"gitId":"cadencjk"},"content":"        } else if (commandWord.equals(\"deadline\")) {","lastModifiedDate":"2022-09-01"},{"lineNumber":47,"author":{"gitId":"cadencjk"},"content":"            newTask \u003d new DeadLine();","lastModifiedDate":"2022-09-01"},{"lineNumber":48,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-09-01"},{"lineNumber":49,"author":{"gitId":"cadencjk"},"content":"        try {","lastModifiedDate":"2022-09-01"},{"lineNumber":50,"author":{"gitId":"cadencjk"},"content":"            newTask.addName(userInput);","lastModifiedDate":"2022-09-01"},{"lineNumber":51,"author":{"gitId":"cadencjk"},"content":"            String reply \u003d taskList.add(newTask);","lastModifiedDate":"2022-09-01"},{"lineNumber":52,"author":{"gitId":"cadencjk"},"content":"            assert reply.startsWith(\"Got it. I\u0027ve added this task:\") : \"Add command replies wrongly!\";","lastModifiedDate":"2022-09-03"},{"lineNumber":53,"author":{"gitId":"cadencjk"},"content":"            storage.write(taskList.writeTasks());","lastModifiedDate":"2022-09-01"},{"lineNumber":54,"author":{"gitId":"cadencjk"},"content":"            return reply;","lastModifiedDate":"2022-09-01"},{"lineNumber":55,"author":{"gitId":"cadencjk"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2022-09-01"},{"lineNumber":56,"author":{"gitId":"cadencjk"},"content":"            return e.getMessage();","lastModifiedDate":"2022-09-01"},{"lineNumber":57,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-09-01"},{"lineNumber":58,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-09-01"},{"lineNumber":59,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-09-01"}],"authorContributionMap":{"cadencjk":59}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.command;","lastModifiedDate":"2022-09-01"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-01"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-09-01"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-09-01"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":" * Manages the termination of a chat.","lastModifiedDate":"2022-09-01"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-09-01"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2022-09-01"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"    private String userInput;","lastModifiedDate":"2022-09-01"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"     * Public constructor that stores the input from the user.","lastModifiedDate":"2022-09-01"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-09-01"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"     * @param userInput the String input by the user","lastModifiedDate":"2022-09-01"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"    public ByeCommand(String userInput) {","lastModifiedDate":"2022-09-01"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2022-09-01"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-09-01"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"     * Executes the command and returns a closing message.","lastModifiedDate":"2022-09-01"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-09-01"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"     * @param storage  the storage object which handles reading and writing of data","lastModifiedDate":"2022-09-01"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"     * @param taskList the list of tasks currently stored","lastModifiedDate":"2022-09-01"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"     * @return a String which replies to the user","lastModifiedDate":"2022-09-01"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"    @Override","lastModifiedDate":"2022-09-01"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"    public String runCommand(Storage storage, TaskList taskList) {","lastModifiedDate":"2022-09-04"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2022-09-01"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-09-01"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-09-01"}],"authorContributionMap":{"cadencjk":33}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.command;","lastModifiedDate":"2022-09-01"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-01"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-09-01"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-09-01"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":" * Abstract class that contains method that should be included in all children classes,","lastModifiedDate":"2022-09-01"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":" * with the aim of running a command.","lastModifiedDate":"2022-09-01"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-09-01"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"public abstract class Command {","lastModifiedDate":"2022-09-01"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"     * Abstract method that runs the command internally, handled by all Classes that inherits Command.","lastModifiedDate":"2022-09-01"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-09-04"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"     * @param storage  the storage object which handles reading and writing of data","lastModifiedDate":"2022-09-01"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"     * @param taskList the list of tasks currently stored","lastModifiedDate":"2022-09-01"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"     * @return","lastModifiedDate":"2022-09-01"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"    public abstract String runCommand(Storage storage, TaskList taskList);","lastModifiedDate":"2022-09-04"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-09-01"}],"authorContributionMap":{"cadencjk":20}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.command;","lastModifiedDate":"2022-09-01"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-01"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-01"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-01"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-09-01"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-09-01"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":" * Manages the deletion of task from a specified task list.","lastModifiedDate":"2022-09-01"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-09-01"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2022-09-01"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"    private static final int POSITION_OF_TASK_INDEX \u003d 7;","lastModifiedDate":"2022-09-04"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"    private String userInput;","lastModifiedDate":"2022-09-01"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"     * Public constructor that stores the input from the user.","lastModifiedDate":"2022-09-01"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-09-01"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"     * @param userInput the String input by the user","lastModifiedDate":"2022-09-01"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"    public DeleteCommand(String userInput) {","lastModifiedDate":"2022-09-01"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2022-09-01"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-09-01"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"     * Executes the command and remove an indexed task from the specified task list.","lastModifiedDate":"2022-09-01"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"     * Saves and updates the storage to exclude the new task.","lastModifiedDate":"2022-09-01"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-09-01"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"     * @param storage  the storage object which handles reading and writing of data","lastModifiedDate":"2022-09-01"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"     * @param taskList the list of tasks currently stored","lastModifiedDate":"2022-09-01"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"     * @return a String which replies to the user","lastModifiedDate":"2022-09-01"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":34,"author":{"gitId":"cadencjk"},"content":"    @Override","lastModifiedDate":"2022-09-01"},{"lineNumber":35,"author":{"gitId":"cadencjk"},"content":"    public String runCommand(Storage storage, TaskList taskList) {","lastModifiedDate":"2022-09-04"},{"lineNumber":36,"author":{"gitId":"cadencjk"},"content":"        try {","lastModifiedDate":"2022-09-01"},{"lineNumber":37,"author":{"gitId":"cadencjk"},"content":"            Integer taskIndex \u003d Integer.valueOf(userInput.substring(POSITION_OF_TASK_INDEX));","lastModifiedDate":"2022-09-04"},{"lineNumber":38,"author":{"gitId":"cadencjk"},"content":"            String reply \u003d taskList.delete(taskIndex);","lastModifiedDate":"2022-09-04"},{"lineNumber":39,"author":{"gitId":"cadencjk"},"content":"            assert reply.startsWith(\"Noted. I\u0027ve removed this task:\") : \"Delete command replies wrongly!\";","lastModifiedDate":"2022-09-03"},{"lineNumber":40,"author":{"gitId":"cadencjk"},"content":"            storage.write(taskList.writeTasks());","lastModifiedDate":"2022-09-01"},{"lineNumber":41,"author":{"gitId":"cadencjk"},"content":"            return reply;","lastModifiedDate":"2022-09-01"},{"lineNumber":42,"author":{"gitId":"cadencjk"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2022-09-01"},{"lineNumber":43,"author":{"gitId":"cadencjk"},"content":"            return e.getMessage();","lastModifiedDate":"2022-09-01"},{"lineNumber":44,"author":{"gitId":"cadencjk"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2022-09-01"},{"lineNumber":45,"author":{"gitId":"cadencjk"},"content":"            return \"Please state the index you wish to delete.\";","lastModifiedDate":"2022-09-01"},{"lineNumber":46,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-09-01"},{"lineNumber":47,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-09-01"},{"lineNumber":48,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-09-01"}],"authorContributionMap":{"cadencjk":48}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.command;","lastModifiedDate":"2022-09-01"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-01"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-01"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-09-01"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-09-01"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":" * Manages the finding of certain keywords in a list of tasks.","lastModifiedDate":"2022-09-01"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-09-01"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2022-09-01"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"    private static final int POSITION_OF_KEYWORD \u003d 5;","lastModifiedDate":"2022-09-04"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"    private String userInput;","lastModifiedDate":"2022-09-01"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"     * Public constructor that stores the input from the user.","lastModifiedDate":"2022-09-01"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-09-01"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"     * @param userInput the String input by the user","lastModifiedDate":"2022-09-01"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"    public FindCommand(String userInput) {","lastModifiedDate":"2022-09-01"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2022-09-01"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-09-01"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"     * Executes the command which searches for tasks that contain the specified keyword.","lastModifiedDate":"2022-09-01"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-09-01"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"     * @param storage  the storage object which handles reading and writing of data","lastModifiedDate":"2022-09-01"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"     * @param taskList the list of tasks currently stored","lastModifiedDate":"2022-09-01"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"     * @return a String which replies to the user","lastModifiedDate":"2022-09-01"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"    @Override","lastModifiedDate":"2022-09-01"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"    public String runCommand(Storage storage, TaskList taskList) {","lastModifiedDate":"2022-09-04"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"        try {","lastModifiedDate":"2022-09-01"},{"lineNumber":34,"author":{"gitId":"cadencjk"},"content":"            String keyWord \u003d userInput.substring(POSITION_OF_KEYWORD);","lastModifiedDate":"2022-09-04"},{"lineNumber":35,"author":{"gitId":"cadencjk"},"content":"            String reply \u003d taskList.find(keyWord);","lastModifiedDate":"2022-09-04"},{"lineNumber":36,"author":{"gitId":"cadencjk"},"content":"            assert reply.startsWith(\"Here are the matching tasks in your list:\") : \"Find command replies wrongly!\";","lastModifiedDate":"2022-09-03"},{"lineNumber":37,"author":{"gitId":"cadencjk"},"content":"            return reply;","lastModifiedDate":"2022-09-03"},{"lineNumber":38,"author":{"gitId":"cadencjk"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-09-01"},{"lineNumber":39,"author":{"gitId":"cadencjk"},"content":"            return e.getMessage();","lastModifiedDate":"2022-09-01"},{"lineNumber":40,"author":{"gitId":"cadencjk"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2022-09-01"},{"lineNumber":41,"author":{"gitId":"cadencjk"},"content":"            return \"Please state the keywords you wish to find.\";","lastModifiedDate":"2022-09-01"},{"lineNumber":42,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-09-01"},{"lineNumber":43,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-09-01"},{"lineNumber":44,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-09-01"}],"authorContributionMap":{"cadencjk":44}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.command;","lastModifiedDate":"2022-09-01"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-01"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-09-01"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-09-01"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":" * Lists all the tasks currently stored in a specified task list.","lastModifiedDate":"2022-09-01"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-09-01"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2022-09-01"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"    private String userInput;","lastModifiedDate":"2022-09-01"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"     * Public constructor that stores the input from the user.","lastModifiedDate":"2022-09-01"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-09-01"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"     * @param userInput the String input by the user","lastModifiedDate":"2022-09-01"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"    public ListCommand(String userInput) {","lastModifiedDate":"2022-09-01"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2022-09-01"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-09-01"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"     * Executes the command and list all tasks in the task list.","lastModifiedDate":"2022-09-01"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-09-01"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"     * @param storage  the storage object which handles reading and writing of data","lastModifiedDate":"2022-09-01"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"     * @param taskList the list of tasks currently stored","lastModifiedDate":"2022-09-01"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"     * @return a String which replies to the user","lastModifiedDate":"2022-09-01"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"    @Override","lastModifiedDate":"2022-09-01"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"    public String runCommand(Storage storage, TaskList taskList) {","lastModifiedDate":"2022-09-04"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"        return taskList.getList();","lastModifiedDate":"2022-09-01"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-09-01"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-09-01"}],"authorContributionMap":{"cadencjk":33}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.command;","lastModifiedDate":"2022-09-01"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-01"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-01"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-01"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-09-01"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-09-01"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":" * Marks a task as done.","lastModifiedDate":"2022-09-01"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-09-01"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2022-09-01"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"    private static final int POSITION_OF_TASK_INDEX \u003d 5;","lastModifiedDate":"2022-09-04"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"    private String userInput;","lastModifiedDate":"2022-09-01"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"     * Public constructor that stores the input from the user.","lastModifiedDate":"2022-09-01"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-09-01"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"     * @param userInput the String input by the user","lastModifiedDate":"2022-09-01"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"    public MarkCommand(String userInput) {","lastModifiedDate":"2022-09-01"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2022-09-01"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-09-01"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"     * Executes the command which marks the indexed task as done.","lastModifiedDate":"2022-09-01"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"     * Saves and updates the storage to include the new marked status of the task.","lastModifiedDate":"2022-09-01"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-09-01"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"     * @param storage  the storage object which handles reading and writing of data","lastModifiedDate":"2022-09-01"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"     * @param taskList the list of tasks currently stored","lastModifiedDate":"2022-09-01"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"     * @return a String which replies to the user","lastModifiedDate":"2022-09-01"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":34,"author":{"gitId":"cadencjk"},"content":"    @Override","lastModifiedDate":"2022-09-01"},{"lineNumber":35,"author":{"gitId":"cadencjk"},"content":"    public String runCommand(Storage storage, TaskList taskList) {","lastModifiedDate":"2022-09-04"},{"lineNumber":36,"author":{"gitId":"cadencjk"},"content":"        try {","lastModifiedDate":"2022-09-01"},{"lineNumber":37,"author":{"gitId":"cadencjk"},"content":"            Integer taskIndex \u003d Integer.valueOf(userInput.substring(POSITION_OF_TASK_INDEX));","lastModifiedDate":"2022-09-04"},{"lineNumber":38,"author":{"gitId":"cadencjk"},"content":"            String reply \u003d taskList.mark(taskIndex);","lastModifiedDate":"2022-09-04"},{"lineNumber":39,"author":{"gitId":"cadencjk"},"content":"            assert reply.startsWith(\"Nice! I\u0027ve marked this task as done:\") : \"Mark command replies wrongly!\";","lastModifiedDate":"2022-09-03"},{"lineNumber":40,"author":{"gitId":"cadencjk"},"content":"            storage.write(taskList.writeTasks());","lastModifiedDate":"2022-09-01"},{"lineNumber":41,"author":{"gitId":"cadencjk"},"content":"            return reply;","lastModifiedDate":"2022-09-01"},{"lineNumber":42,"author":{"gitId":"cadencjk"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2022-09-01"},{"lineNumber":43,"author":{"gitId":"cadencjk"},"content":"            return e.getMessage();","lastModifiedDate":"2022-09-01"},{"lineNumber":44,"author":{"gitId":"cadencjk"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2022-09-01"},{"lineNumber":45,"author":{"gitId":"cadencjk"},"content":"            return \"Please state the index you wish to mark.\";","lastModifiedDate":"2022-09-01"},{"lineNumber":46,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-09-01"},{"lineNumber":47,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-09-01"},{"lineNumber":48,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-09-01"}],"authorContributionMap":{"cadencjk":48}},{"path":"src/main/java/duke/command/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.command;","lastModifiedDate":"2022-09-01"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-01"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-09-01"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-09-01"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":" * Class which responds to an unknown command.","lastModifiedDate":"2022-09-01"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-09-01"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"public class UnknownCommand extends Command {","lastModifiedDate":"2022-09-01"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"    private String userInput;","lastModifiedDate":"2022-09-01"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"     * Public constructor that stores the input from the user.","lastModifiedDate":"2022-09-01"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-09-01"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"     * @param userInput the String input by the user","lastModifiedDate":"2022-09-01"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"    public UnknownCommand(String userInput) {","lastModifiedDate":"2022-09-01"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2022-09-01"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-09-01"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"     * Executes the command which responds to an unknown command. Function does not alter anything else.","lastModifiedDate":"2022-09-01"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-09-01"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"     * @param storage  the storage object which handles reading and writing of data","lastModifiedDate":"2022-09-01"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"     * @param taskList the list of tasks currently stored","lastModifiedDate":"2022-09-01"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"     * @return a String which replies to the user","lastModifiedDate":"2022-09-01"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"    @Override","lastModifiedDate":"2022-09-01"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"    public String runCommand(Storage storage, TaskList taskList) {","lastModifiedDate":"2022-09-04"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"        return \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2022-09-01"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-09-01"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-09-01"}],"authorContributionMap":{"cadencjk":33}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.command;","lastModifiedDate":"2022-09-01"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-01"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-01"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-01"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-09-01"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-09-01"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":" * Marks a task as undone.","lastModifiedDate":"2022-09-01"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-09-01"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2022-09-01"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"    private static final int POSITION_OF_TASK_INDEX \u003d 7;","lastModifiedDate":"2022-09-04"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"    private String userInput;","lastModifiedDate":"2022-09-01"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"     * Public constructor that stores the input from the user.","lastModifiedDate":"2022-09-01"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-09-01"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"     * @param userInput the String input by the user","lastModifiedDate":"2022-09-01"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"    public UnmarkCommand(String userInput) {","lastModifiedDate":"2022-09-01"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2022-09-01"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-09-01"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-01"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-09-01"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"     * Executes the command which un-marks the indexed task from done.","lastModifiedDate":"2022-09-01"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"     * Saves and updates the storage to include the new un-marked status of the task.","lastModifiedDate":"2022-09-01"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-09-01"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"     * @param storage  the storage object which handles reading and writing of data","lastModifiedDate":"2022-09-01"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"     * @param taskList the list of tasks currently stored","lastModifiedDate":"2022-09-01"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"     * @return a String which replies to the user","lastModifiedDate":"2022-09-01"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-09-01"},{"lineNumber":34,"author":{"gitId":"cadencjk"},"content":"    @Override","lastModifiedDate":"2022-09-01"},{"lineNumber":35,"author":{"gitId":"cadencjk"},"content":"    public String runCommand(Storage storage, TaskList taskList) {","lastModifiedDate":"2022-09-04"},{"lineNumber":36,"author":{"gitId":"cadencjk"},"content":"        try {","lastModifiedDate":"2022-09-01"},{"lineNumber":37,"author":{"gitId":"cadencjk"},"content":"            Integer taskIndex \u003d Integer.valueOf(userInput.substring(POSITION_OF_TASK_INDEX));","lastModifiedDate":"2022-09-04"},{"lineNumber":38,"author":{"gitId":"cadencjk"},"content":"            String reply \u003d taskList.unmark(taskIndex);","lastModifiedDate":"2022-09-04"},{"lineNumber":39,"author":{"gitId":"cadencjk"},"content":"            assert reply.startsWith(\"OK, I\u0027ve marked this task as not done yet:\") : \"Unmark command replies wrongly!\";","lastModifiedDate":"2022-09-03"},{"lineNumber":40,"author":{"gitId":"cadencjk"},"content":"            storage.write(taskList.writeTasks());","lastModifiedDate":"2022-09-01"},{"lineNumber":41,"author":{"gitId":"cadencjk"},"content":"            return reply;","lastModifiedDate":"2022-09-01"},{"lineNumber":42,"author":{"gitId":"cadencjk"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2022-09-01"},{"lineNumber":43,"author":{"gitId":"cadencjk"},"content":"            return e.getMessage();","lastModifiedDate":"2022-09-01"},{"lineNumber":44,"author":{"gitId":"cadencjk"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2022-09-01"},{"lineNumber":45,"author":{"gitId":"cadencjk"},"content":"            return \"Please state the index you wish to unmark.\";","lastModifiedDate":"2022-09-01"},{"lineNumber":46,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-09-01"},{"lineNumber":47,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-09-01"},{"lineNumber":48,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-09-01"}],"authorContributionMap":{"cadencjk":48}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.exception;","lastModifiedDate":"2022-08-31"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":" * A specified Exception for this project.","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-08-16"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2022-08-16"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"        super(errorMessage);","lastModifiedDate":"2022-08-16"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-08-16"}],"authorContributionMap":{"cadencjk":10}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.gui;","lastModifiedDate":"2022-08-31"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-29"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"import java.util.Collections;","lastModifiedDate":"2022-08-29"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-08-29"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-08-29"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-08-29"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-08-29"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2022-08-29"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"import javafx.scene.Node;","lastModifiedDate":"2022-08-29"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":" * containing text from the speaker.","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"    @FXML","lastModifiedDate":"2022-08-29"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"    private Label dialog;","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"    @FXML","lastModifiedDate":"2022-08-29"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2022-08-29"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2022-08-29"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"        try {","lastModifiedDate":"2022-08-29"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2022-08-29"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-08-29"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-08-29"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-08-29"},{"lineNumber":34,"author":{"gitId":"cadencjk"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-29"},{"lineNumber":35,"author":{"gitId":"cadencjk"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-08-29"},{"lineNumber":36,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-29"},{"lineNumber":37,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":38,"author":{"gitId":"cadencjk"},"content":"        dialog.setText(text);","lastModifiedDate":"2022-08-29"},{"lineNumber":39,"author":{"gitId":"cadencjk"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2022-08-29"},{"lineNumber":40,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":41,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":42,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":43,"author":{"gitId":"cadencjk"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2022-08-29"},{"lineNumber":44,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":45,"author":{"gitId":"cadencjk"},"content":"    private void flip() {","lastModifiedDate":"2022-08-29"},{"lineNumber":46,"author":{"gitId":"cadencjk"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2022-08-29"},{"lineNumber":47,"author":{"gitId":"cadencjk"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2022-08-29"},{"lineNumber":48,"author":{"gitId":"cadencjk"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2022-08-29"},{"lineNumber":49,"author":{"gitId":"cadencjk"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2022-08-29"},{"lineNumber":50,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":51,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":52,"author":{"gitId":"cadencjk"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2022-08-29"},{"lineNumber":53,"author":{"gitId":"cadencjk"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2022-08-29"},{"lineNumber":54,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":55,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":56,"author":{"gitId":"cadencjk"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2022-08-29"},{"lineNumber":57,"author":{"gitId":"cadencjk"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2022-08-29"},{"lineNumber":58,"author":{"gitId":"cadencjk"},"content":"        db.flip();","lastModifiedDate":"2022-08-29"},{"lineNumber":59,"author":{"gitId":"cadencjk"},"content":"        return db;","lastModifiedDate":"2022-08-29"},{"lineNumber":60,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":61,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-08-29"}],"authorContributionMap":{"cadencjk":61}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.gui;","lastModifiedDate":"2022-08-31"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-29"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"import duke.Duke;","lastModifiedDate":"2022-08-31"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-08-29"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-08-29"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-08-29"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-08-29"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-08-29"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"public class Main extends Application {","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"     * Initializes Duke and FXML Loader to start.","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"     * @param stage the primary stage for this application","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"    @Override","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2022-08-29"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"        try {","lastModifiedDate":"2022-08-29"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2022-08-29"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2022-08-29"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2022-08-29"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"            stage.setScene(scene);","lastModifiedDate":"2022-08-29"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2022-08-29"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"            stage.show();","lastModifiedDate":"2022-08-29"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-29"},{"lineNumber":34,"author":{"gitId":"cadencjk"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-08-29"},{"lineNumber":35,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-29"},{"lineNumber":36,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":37,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-08-29"}],"authorContributionMap":{"cadencjk":37}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.gui;","lastModifiedDate":"2022-08-31"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import duke.Duke;","lastModifiedDate":"2022-08-31"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-08-29"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-08-29"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2022-08-29"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-08-29"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-08-29"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-08-29"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-08-29"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"    @FXML","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"    @FXML","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"    @FXML","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"    private TextField userInput;","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"    @FXML","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"    private Button sendButton;","lastModifiedDate":"2022-08-29"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"    private Duke duke;","lastModifiedDate":"2022-08-29"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2022-08-29"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2022-08-29"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"    @FXML","lastModifiedDate":"2022-08-29"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"    public void initialize() {","lastModifiedDate":"2022-08-29"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2022-08-29"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":34,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":35,"author":{"gitId":"cadencjk"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2022-08-29"},{"lineNumber":36,"author":{"gitId":"cadencjk"},"content":"        duke \u003d d;","lastModifiedDate":"2022-08-29"},{"lineNumber":37,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":38,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":39,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":40,"author":{"gitId":"cadencjk"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2022-08-29"},{"lineNumber":41,"author":{"gitId":"cadencjk"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2022-08-29"},{"lineNumber":42,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":43,"author":{"gitId":"cadencjk"},"content":"    @FXML","lastModifiedDate":"2022-08-29"},{"lineNumber":44,"author":{"gitId":"cadencjk"},"content":"    private void handleUserInput() {","lastModifiedDate":"2022-08-29"},{"lineNumber":45,"author":{"gitId":"cadencjk"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2022-08-29"},{"lineNumber":46,"author":{"gitId":"cadencjk"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2022-08-29"},{"lineNumber":47,"author":{"gitId":"cadencjk"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-08-29"},{"lineNumber":48,"author":{"gitId":"cadencjk"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2022-08-29"},{"lineNumber":49,"author":{"gitId":"cadencjk"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2022-08-29"},{"lineNumber":50,"author":{"gitId":"cadencjk"},"content":"        );","lastModifiedDate":"2022-08-29"},{"lineNumber":51,"author":{"gitId":"cadencjk"},"content":"        userInput.clear();","lastModifiedDate":"2022-08-29"},{"lineNumber":52,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":53,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-08-29"}],"authorContributionMap":{"cadencjk":53}},{"path":"src/main/java/duke/gui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.gui;","lastModifiedDate":"2022-08-31"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-08-29"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":" * Stores the format for a better viewing experience in Command Line Interface.","lastModifiedDate":"2022-08-29"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-08-29"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"public class Ui {","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"    private static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2022-09-04"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"     * Prints the input in between 2 lines for better view.","lastModifiedDate":"2022-08-29"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"     * @param replyToBePrinted the String which will be printed","lastModifiedDate":"2022-08-29"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"    public void reply(String replyToBePrinted) {","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"        System.out.print(HORIZONTAL_LINE + replyToBePrinted + \u0027\\n\u0027 + HORIZONTAL_LINE);","lastModifiedDate":"2022-09-04"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"     * Prints a file loading error message.","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"    public void showLoadingError() {","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"        reply(\"File not found. Creating new file...\");","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"cadencjk":24}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.parser;","lastModifiedDate":"2022-08-31"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2022-09-01"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2022-09-01"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"import duke.command.Command;","lastModifiedDate":"2022-09-01"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2022-09-01"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2022-09-01"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2022-09-01"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2022-09-01"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"import duke.command.UnknownCommand;","lastModifiedDate":"2022-09-01"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2022-09-01"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":" * A class that parse the user input into the respective commands.","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"public class Parser {","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"     * Returns the type of command that is given by the user.","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"     * The function reads the first word of the input and will return the respective command types.","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"     * @param userText the text inputted by the user","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"     * @return the type of command given by the user","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"    public static Command parse(String userText) {","lastModifiedDate":"2022-09-01"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"        String commandWord \u003d userText.split(\" \", 2)[0];","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"        Command command;","lastModifiedDate":"2022-09-01"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"        if (commandWord.equals(\"bye\")) {","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"            command \u003d new ByeCommand(userText);","lastModifiedDate":"2022-09-01"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"        } else if (commandWord.equals(\"list\")) {","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"            command \u003d new ListCommand(userText);","lastModifiedDate":"2022-09-01"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"        } else if (commandWord.equals(\"mark\")) {","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"cadencjk"},"content":"            command \u003d new MarkCommand(userText);","lastModifiedDate":"2022-09-01"},{"lineNumber":35,"author":{"gitId":"cadencjk"},"content":"        } else if (commandWord.equals(\"unmark\")) {","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"cadencjk"},"content":"            command \u003d new UnmarkCommand(userText);","lastModifiedDate":"2022-09-01"},{"lineNumber":37,"author":{"gitId":"cadencjk"},"content":"        } else if (commandWord.equals(\"todo\") || commandWord.equals(\"deadline\") || commandWord.equals(\"event\")) {","lastModifiedDate":"2022-09-01"},{"lineNumber":38,"author":{"gitId":"cadencjk"},"content":"            command \u003d new AddCommand(userText);","lastModifiedDate":"2022-09-01"},{"lineNumber":39,"author":{"gitId":"cadencjk"},"content":"        } else if (commandWord.equals(\"delete\")) {","lastModifiedDate":"2022-08-23"},{"lineNumber":40,"author":{"gitId":"cadencjk"},"content":"            command \u003d new DeleteCommand(userText);","lastModifiedDate":"2022-09-01"},{"lineNumber":41,"author":{"gitId":"cadencjk"},"content":"        } else if (commandWord.equals(\"find\")) {","lastModifiedDate":"2022-08-24"},{"lineNumber":42,"author":{"gitId":"cadencjk"},"content":"            command \u003d new FindCommand(userText);","lastModifiedDate":"2022-09-01"},{"lineNumber":43,"author":{"gitId":"cadencjk"},"content":"        } else {","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"cadencjk"},"content":"            command \u003d new UnknownCommand(userText);","lastModifiedDate":"2022-09-01"},{"lineNumber":45,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":46,"author":{"gitId":"cadencjk"},"content":"        return command;","lastModifiedDate":"2022-09-01"},{"lineNumber":47,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":48,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"cadencjk":48}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.storage;","lastModifiedDate":"2022-08-31"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import java.io.File;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-23"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":" * Handles the reading and writing of content to a specified location.","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"public class Storage {","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"    private String filePath;","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"     * Sets the default location of the file to read and write.","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"     * @param filePath the path of the file the user wishes to read and write to","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2022-08-31"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"     * Returns the content of the file in the specified location.","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"     * If the file does not exist in the specified directory, the function will create the path and file.","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"     * @return the content stored in the file","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"     * @throws IOException","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"    public String load() throws Exception {","lastModifiedDate":"2022-08-29"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"        int index \u003d filePath.lastIndexOf(\u0027/\u0027);","lastModifiedDate":"2022-08-23"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"cadencjk"},"content":"        File file \u003d new File(filePath.substring(0, index));","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"cadencjk"},"content":"        boolean dirExists \u003d file.mkdirs();","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"cadencjk"},"content":"        file \u003d new File(filePath);","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"cadencjk"},"content":"        String content \u003d new Scanner(file).useDelimiter(\"\\\\Z\").next();","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"cadencjk"},"content":"        return content;","lastModifiedDate":"2022-08-23"},{"lineNumber":39,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":40,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":41,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":42,"author":{"gitId":"cadencjk"},"content":"     * Stores content into the specified location of a file.","lastModifiedDate":"2022-08-23"},{"lineNumber":43,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"cadencjk"},"content":"     * @param data the data which will be written into the file","lastModifiedDate":"2022-08-23"},{"lineNumber":45,"author":{"gitId":"cadencjk"},"content":"     * @throws IOException","lastModifiedDate":"2022-08-23"},{"lineNumber":46,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":47,"author":{"gitId":"cadencjk"},"content":"    public void write(String data) throws IOException {","lastModifiedDate":"2022-08-23"},{"lineNumber":48,"author":{"gitId":"cadencjk"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2022-08-23"},{"lineNumber":49,"author":{"gitId":"cadencjk"},"content":"        fw.write(data);","lastModifiedDate":"2022-08-23"},{"lineNumber":50,"author":{"gitId":"cadencjk"},"content":"        fw.close();","lastModifiedDate":"2022-08-23"},{"lineNumber":51,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":52,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":53,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"cadencjk":53}},{"path":"src/main/java/duke/task/DeadLine.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.task;","lastModifiedDate":"2022-08-31"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-08-31"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-08-31"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":" * Represents a deadline task which needs to be completed by a certain date.","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"public class DeadLine extends Task {","lastModifiedDate":"2022-08-16"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"    private static final int MINIMUM_COMMAND_LENGTH \u003d 9;","lastModifiedDate":"2022-09-04"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"    private LocalDate eventDate \u003d null;","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"     * Adds the description and the deadline of a task.","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"     * The userInput argument must contain a description of the deadline, followed by a","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"     * date in the format yyyy-mm-dd or yyyy/mm/dd.","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"     * If the date format is not recognised, or the description is empty, the function will throw a DukeException.","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"     * @param userInput a String containing the description and deadline of a task","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"     * @throws DukeException","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"    public void addName(String userInput) throws DukeException {","lastModifiedDate":"2022-08-16"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"        if (userInput.length() \u003c\u003d MINIMUM_COMMAND_LENGTH) {","lastModifiedDate":"2022-09-04"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"            throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-16"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"        int index \u003d userInput.indexOf(\"/by\") - 1;","lastModifiedDate":"2022-08-16"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"cadencjk"},"content":"        if (index \u003c\u003d MINIMUM_COMMAND_LENGTH - 1) {","lastModifiedDate":"2022-09-04"},{"lineNumber":35,"author":{"gitId":"cadencjk"},"content":"            throw new DukeException(\"OOPS!!! Please indicate when the deadline is due with \u0027/by\u0027.\");","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-16"},{"lineNumber":37,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"cadencjk"},"content":"        super.addName(userInput.substring(MINIMUM_COMMAND_LENGTH, index));","lastModifiedDate":"2022-09-04"},{"lineNumber":39,"author":{"gitId":"cadencjk"},"content":"        try {","lastModifiedDate":"2022-08-31"},{"lineNumber":40,"author":{"gitId":"cadencjk"},"content":"            this.eventDate \u003d LocalDate.parse(userInput.substring(index + 5).replace(\u0027/\u0027, \u0027-\u0027));","lastModifiedDate":"2022-08-31"},{"lineNumber":41,"author":{"gitId":"cadencjk"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-08-31"},{"lineNumber":42,"author":{"gitId":"cadencjk"},"content":"            throw new DukeException(\"Date format not recognised! Please input date as \u003cYYYY/MM/DD\u003e or \u003cYYYY-MM-DD\u003e.\");","lastModifiedDate":"2022-08-31"},{"lineNumber":43,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-31"},{"lineNumber":44,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":45,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":46,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":47,"author":{"gitId":"cadencjk"},"content":"     * Returns a String in a format that will be stored in the specified directory.","lastModifiedDate":"2022-08-23"},{"lineNumber":48,"author":{"gitId":"cadencjk"},"content":"     * The String will contain the type of task, the current status (marked or unmarked) of the task and","lastModifiedDate":"2022-08-23"},{"lineNumber":49,"author":{"gitId":"cadencjk"},"content":"     * the description of the task.","lastModifiedDate":"2022-08-23"},{"lineNumber":50,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":51,"author":{"gitId":"cadencjk"},"content":"     * @return the details of the task for Storage","lastModifiedDate":"2022-08-23"},{"lineNumber":52,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":53,"author":{"gitId":"cadencjk"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":54,"author":{"gitId":"cadencjk"},"content":"    public String getTask() {","lastModifiedDate":"2022-08-21"},{"lineNumber":55,"author":{"gitId":"cadencjk"},"content":"        assert this.eventDate !\u003d null : \"Event date is empty!\";","lastModifiedDate":"2022-09-03"},{"lineNumber":56,"author":{"gitId":"cadencjk"},"content":"        return String.format(\"D | \" + super.getTask() + \" | \" + this.eventDate);","lastModifiedDate":"2022-08-29"},{"lineNumber":57,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":58,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":59,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":60,"author":{"gitId":"cadencjk"},"content":"     * Returns a String that will display the task.","lastModifiedDate":"2022-08-23"},{"lineNumber":61,"author":{"gitId":"cadencjk"},"content":"     * The String will contain the type of task, the current status (marked or unmarked) of","lastModifiedDate":"2022-08-23"},{"lineNumber":62,"author":{"gitId":"cadencjk"},"content":"     * the task and the description of the task.","lastModifiedDate":"2022-08-23"},{"lineNumber":63,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":64,"author":{"gitId":"cadencjk"},"content":"     * @return the details of the task for display","lastModifiedDate":"2022-08-23"},{"lineNumber":65,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":66,"author":{"gitId":"cadencjk"},"content":"    @Override","lastModifiedDate":"2022-08-16"},{"lineNumber":67,"author":{"gitId":"cadencjk"},"content":"    public String getStatus() {","lastModifiedDate":"2022-08-16"},{"lineNumber":68,"author":{"gitId":"cadencjk"},"content":"        return String.format(\"[D]%s (by: %s)\", super.getStatus(),","lastModifiedDate":"2022-08-23"},{"lineNumber":69,"author":{"gitId":"cadencjk"},"content":"                this.eventDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));","lastModifiedDate":"2022-08-29"},{"lineNumber":70,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":71,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-08-16"}],"authorContributionMap":{"cadencjk":71}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.task;","lastModifiedDate":"2022-08-31"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-08-31"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-08-31"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":" * Represents an event task which will occur on a certain date.","lastModifiedDate":"2022-08-29"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"public class Event extends Task {","lastModifiedDate":"2022-08-16"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"    private static final int MINIMUM_COMMAND_LENGTH \u003d 6;","lastModifiedDate":"2022-09-04"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"    private LocalDate eventDate \u003d null;","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"     * Adds the description and the deadline of a event.","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"     * The userInput argument must contain a description of the event, followed by a","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"     * date in the format yyyy-mm-dd or yyyy/mm/dd.","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"     * If the date format is not recognised, or the description is empty, the function will throw a DukeException.","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"     * @param userInput the String containing the description and date of an event","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"     * @throws DukeException","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"    public void addName(String userInput) throws DukeException {","lastModifiedDate":"2022-08-16"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"        if (userInput.length() \u003c\u003d MINIMUM_COMMAND_LENGTH) {","lastModifiedDate":"2022-09-04"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"            throw new DukeException(\"OOPS!!! The description of a event cannot be empty.\");","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-16"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"        int index \u003d userInput.indexOf(\"/at\") - 1;","lastModifiedDate":"2022-08-16"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"        if (index \u003c\u003d MINIMUM_COMMAND_LENGTH - 1) {","lastModifiedDate":"2022-09-04"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"            throw new DukeException(\"OOPS!!! Please indicate when the event is happening with \u0027/at\u0027.\");","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-16"},{"lineNumber":35,"author":{"gitId":"cadencjk"},"content":"        super.addName(userInput.substring(MINIMUM_COMMAND_LENGTH, index));","lastModifiedDate":"2022-09-04"},{"lineNumber":36,"author":{"gitId":"cadencjk"},"content":"        try {","lastModifiedDate":"2022-08-31"},{"lineNumber":37,"author":{"gitId":"cadencjk"},"content":"            this.eventDate \u003d LocalDate.parse(userInput.substring(index + 5).replace(\u0027/\u0027, \u0027-\u0027));","lastModifiedDate":"2022-08-29"},{"lineNumber":38,"author":{"gitId":"cadencjk"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-08-31"},{"lineNumber":39,"author":{"gitId":"cadencjk"},"content":"            throw new DukeException(\"Date format not recognised! Please input date as \u003cYYYY/MM/DD\u003e or \u003cYYYY-MM-DD\u003e.\");","lastModifiedDate":"2022-08-31"},{"lineNumber":40,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-31"},{"lineNumber":41,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":42,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":43,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"cadencjk"},"content":"     * Returns a String in a format that will be stored in the specified directory.","lastModifiedDate":"2022-08-23"},{"lineNumber":45,"author":{"gitId":"cadencjk"},"content":"     * The String will contain the type of task, the current status (marked or unmarked) of the task and","lastModifiedDate":"2022-08-23"},{"lineNumber":46,"author":{"gitId":"cadencjk"},"content":"     * the description of the task.","lastModifiedDate":"2022-08-23"},{"lineNumber":47,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":48,"author":{"gitId":"cadencjk"},"content":"     * @return the details of the task for Storage","lastModifiedDate":"2022-08-23"},{"lineNumber":49,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":50,"author":{"gitId":"cadencjk"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":51,"author":{"gitId":"cadencjk"},"content":"    public String getTask() {","lastModifiedDate":"2022-08-21"},{"lineNumber":52,"author":{"gitId":"cadencjk"},"content":"        assert this.eventDate !\u003d null : \"Event date is empty!\";","lastModifiedDate":"2022-09-03"},{"lineNumber":53,"author":{"gitId":"cadencjk"},"content":"        return String.format(\"E | \" + super.getTask() + \" | \" + this.eventDate);","lastModifiedDate":"2022-08-29"},{"lineNumber":54,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":55,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":56,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":57,"author":{"gitId":"cadencjk"},"content":"     * Returns a String that will display the task.","lastModifiedDate":"2022-08-23"},{"lineNumber":58,"author":{"gitId":"cadencjk"},"content":"     * The String will contain the type of task, the current status (marked or unmarked) of","lastModifiedDate":"2022-08-23"},{"lineNumber":59,"author":{"gitId":"cadencjk"},"content":"     * the task and the description of the task.","lastModifiedDate":"2022-08-23"},{"lineNumber":60,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":61,"author":{"gitId":"cadencjk"},"content":"     * @return the details of the task for display","lastModifiedDate":"2022-08-23"},{"lineNumber":62,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":63,"author":{"gitId":"cadencjk"},"content":"    @Override","lastModifiedDate":"2022-08-16"},{"lineNumber":64,"author":{"gitId":"cadencjk"},"content":"    public String getStatus() {","lastModifiedDate":"2022-08-16"},{"lineNumber":65,"author":{"gitId":"cadencjk"},"content":"        return String.format(\"[E]%s (at: %s)\", super.getStatus(),","lastModifiedDate":"2022-08-23"},{"lineNumber":66,"author":{"gitId":"cadencjk"},"content":"                this.eventDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));","lastModifiedDate":"2022-08-29"},{"lineNumber":67,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":68,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-08-16"}],"authorContributionMap":{"cadencjk":68}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.task;","lastModifiedDate":"2022-08-31"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-08-31"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-08-29"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":" * Abstract Task class which can be represented in the form of ToDo, Event and DeadLine.","lastModifiedDate":"2022-08-29"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":" * Stores the name and status of the event.","lastModifiedDate":"2022-08-29"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-08-29"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"public abstract class Task {","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"    private String name \u003d null;","lastModifiedDate":"2022-08-16"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"    private boolean isDone \u003d false;","lastModifiedDate":"2022-08-29"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"     * Marks the task as done.","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"    public void markAsDone() {","lastModifiedDate":"2022-08-16"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"     * Marks the task as undone.","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"    public void markAsUndone() {","lastModifiedDate":"2022-08-16"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"     * Adds the name of the task.","lastModifiedDate":"2022-08-29"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"     * @param name the description of the task","lastModifiedDate":"2022-08-29"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"     * @throws DukeException","lastModifiedDate":"2022-08-29"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"    public void addName(String name) throws DukeException {","lastModifiedDate":"2022-08-16"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-08-16"},{"lineNumber":34,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":35,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":36,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":37,"author":{"gitId":"cadencjk"},"content":"     * Returns the description and the current status of the task for displaying purposes.","lastModifiedDate":"2022-08-29"},{"lineNumber":38,"author":{"gitId":"cadencjk"},"content":"     * @return the description and status of the task","lastModifiedDate":"2022-08-29"},{"lineNumber":39,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":40,"author":{"gitId":"cadencjk"},"content":"    public String getTask() {","lastModifiedDate":"2022-08-23"},{"lineNumber":41,"author":{"gitId":"cadencjk"},"content":"        return String.format(\"%c | %s\", (this.isDone \u003d\u003d true ? \u00271\u0027 : \u00270\u0027), this.name);","lastModifiedDate":"2022-08-29"},{"lineNumber":42,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":43,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":44,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":45,"author":{"gitId":"cadencjk"},"content":"     * Returns the description and the current status of the task for storing purposes.","lastModifiedDate":"2022-08-29"},{"lineNumber":46,"author":{"gitId":"cadencjk"},"content":"     * @return the description and status of the task","lastModifiedDate":"2022-08-29"},{"lineNumber":47,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":48,"author":{"gitId":"cadencjk"},"content":"    public String getStatus() {","lastModifiedDate":"2022-08-16"},{"lineNumber":49,"author":{"gitId":"cadencjk"},"content":"        return String.format(\"[%c] %s\", (this.isDone \u003d\u003d true ? \u0027X\u0027 : \u0027 \u0027), this.name);","lastModifiedDate":"2022-08-29"},{"lineNumber":50,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":51,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":52,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-08-16"}],"authorContributionMap":{"cadencjk":52}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.task;","lastModifiedDate":"2022-08-31"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"import java.util.List;","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-23"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-08-31"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":" * Contains the list of tasks for Duke.","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"public class TaskList {","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"    private static List\u003cTask\u003e savedTasks;","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"    private static final int INDEX_OF_TASK_STATUS \u003d 1;","lastModifiedDate":"2022-09-04"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"    private static final int INDEX_OF_DESCRIPTION \u003d 2;","lastModifiedDate":"2022-09-04"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"    private static final int INDEX_OF_DATE \u003d 3;","lastModifiedDate":"2022-09-04"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"    private static final int POSITION_OF_DESCRIPTION \u003d 7;","lastModifiedDate":"2022-09-05"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"    private static final String OUT_OF_BOUNDS_INDEX_MESSAGE \u003d \"Index has to be between 1 and \";","lastModifiedDate":"2022-09-04"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"     * Constructs a new ArrayList to store tasks in the event when there is no stored tasks.","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"    public TaskList() {","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"        TaskList.savedTasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"     * Translates the stored tasks into an ArrayList for future edits.","lastModifiedDate":"2022-08-29"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"     * @param savedTasks the tasks which were stored previously","lastModifiedDate":"2022-08-29"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"     * @throws DukeException","lastModifiedDate":"2022-08-29"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"    public TaskList(String savedTasks) throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"cadencjk"},"content":"        Scanner s \u003d new Scanner(savedTasks);","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"cadencjk"},"content":"        TaskList.savedTasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"cadencjk"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"cadencjk"},"content":"            Task newTask \u003d null;","lastModifiedDate":"2022-08-23"},{"lineNumber":39,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":40,"author":{"gitId":"cadencjk"},"content":"            String[] inputArr \u003d s.nextLine().split(\" \\\\| \");","lastModifiedDate":"2022-08-23"},{"lineNumber":41,"author":{"gitId":"cadencjk"},"content":"            String taskType \u003d inputArr[0];","lastModifiedDate":"2022-08-23"},{"lineNumber":42,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":43,"author":{"gitId":"cadencjk"},"content":"            if (taskType.equals(\"T\")) {","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"cadencjk"},"content":"                newTask \u003d new ToDo();","lastModifiedDate":"2022-08-23"},{"lineNumber":45,"author":{"gitId":"cadencjk"},"content":"                newTask.addName(\"todo \" + inputArr[INDEX_OF_DESCRIPTION]);","lastModifiedDate":"2022-09-04"},{"lineNumber":46,"author":{"gitId":"cadencjk"},"content":"            } else if (taskType.equals(\"E\")) {","lastModifiedDate":"2022-08-23"},{"lineNumber":47,"author":{"gitId":"cadencjk"},"content":"                newTask \u003d new Event();","lastModifiedDate":"2022-08-23"},{"lineNumber":48,"author":{"gitId":"cadencjk"},"content":"                newTask.addName(\"event \" + inputArr[INDEX_OF_DESCRIPTION] + \" /at \" + inputArr[INDEX_OF_DATE]);","lastModifiedDate":"2022-09-04"},{"lineNumber":49,"author":{"gitId":"cadencjk"},"content":"            } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2022-08-23"},{"lineNumber":50,"author":{"gitId":"cadencjk"},"content":"                newTask \u003d new DeadLine();","lastModifiedDate":"2022-08-23"},{"lineNumber":51,"author":{"gitId":"cadencjk"},"content":"                newTask.addName(\"deadline \" + inputArr[INDEX_OF_DESCRIPTION] + \" /by \" + inputArr[INDEX_OF_DATE]);","lastModifiedDate":"2022-09-04"},{"lineNumber":52,"author":{"gitId":"cadencjk"},"content":"            } else {","lastModifiedDate":"2022-08-23"},{"lineNumber":53,"author":{"gitId":"cadencjk"},"content":"                throw new DukeException(\"File is corrupted!\");","lastModifiedDate":"2022-08-23"},{"lineNumber":54,"author":{"gitId":"cadencjk"},"content":"            }","lastModifiedDate":"2022-08-23"},{"lineNumber":55,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":56,"author":{"gitId":"cadencjk"},"content":"            if (inputArr[INDEX_OF_TASK_STATUS].equals(\"1\")) {","lastModifiedDate":"2022-09-04"},{"lineNumber":57,"author":{"gitId":"cadencjk"},"content":"                newTask.markAsDone();","lastModifiedDate":"2022-08-23"},{"lineNumber":58,"author":{"gitId":"cadencjk"},"content":"            }","lastModifiedDate":"2022-08-23"},{"lineNumber":59,"author":{"gitId":"cadencjk"},"content":"            TaskList.savedTasks.add(newTask);","lastModifiedDate":"2022-08-23"},{"lineNumber":60,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":61,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":62,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":63,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":64,"author":{"gitId":"cadencjk"},"content":"     * Adds a new task into the existing list of tasks.","lastModifiedDate":"2022-08-23"},{"lineNumber":65,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":66,"author":{"gitId":"cadencjk"},"content":"     * @param task the task which will be added","lastModifiedDate":"2022-08-23"},{"lineNumber":67,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":68,"author":{"gitId":"cadencjk"},"content":"    public String add(Task task) {","lastModifiedDate":"2022-08-29"},{"lineNumber":69,"author":{"gitId":"cadencjk"},"content":"        TaskList.savedTasks.add(task);","lastModifiedDate":"2022-08-23"},{"lineNumber":70,"author":{"gitId":"cadencjk"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + task.getStatus()","lastModifiedDate":"2022-08-29"},{"lineNumber":71,"author":{"gitId":"cadencjk"},"content":"                + String.format(\"\\nNow you have %d tasks in the list.\", TaskList.savedTasks.size());","lastModifiedDate":"2022-08-29"},{"lineNumber":72,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":73,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":74,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":75,"author":{"gitId":"cadencjk"},"content":"     * Deletes a task from the existing list of tasks.","lastModifiedDate":"2022-08-23"},{"lineNumber":76,"author":{"gitId":"cadencjk"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-08-23"},{"lineNumber":77,"author":{"gitId":"cadencjk"},"content":"     * The index provided has to be within the length of the current list.","lastModifiedDate":"2022-08-23"},{"lineNumber":78,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":79,"author":{"gitId":"cadencjk"},"content":"     * @param index the index of the task which the user wishes to delete","lastModifiedDate":"2022-08-23"},{"lineNumber":80,"author":{"gitId":"cadencjk"},"content":"     * @throws DukeException","lastModifiedDate":"2022-08-23"},{"lineNumber":81,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":82,"author":{"gitId":"cadencjk"},"content":"    public String delete(int index) throws DukeException {","lastModifiedDate":"2022-08-29"},{"lineNumber":83,"author":{"gitId":"cadencjk"},"content":"        int size \u003d TaskList.savedTasks.size();","lastModifiedDate":"2022-08-23"},{"lineNumber":84,"author":{"gitId":"cadencjk"},"content":"        if (size \u003d\u003d 0) {","lastModifiedDate":"2022-08-29"},{"lineNumber":85,"author":{"gitId":"cadencjk"},"content":"            throw new DukeException(\"You cannot delete anything from an empty Task List!\");","lastModifiedDate":"2022-08-29"},{"lineNumber":86,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-29"},{"lineNumber":87,"author":{"gitId":"cadencjk"},"content":"        if (index \u003c\u003d 0 || index \u003e size) {","lastModifiedDate":"2022-08-23"},{"lineNumber":88,"author":{"gitId":"cadencjk"},"content":"            throw new DukeException(OUT_OF_BOUNDS_INDEX_MESSAGE + String.valueOf(size));","lastModifiedDate":"2022-09-04"},{"lineNumber":89,"author":{"gitId":"cadencjk"},"content":"        } else {","lastModifiedDate":"2022-08-23"},{"lineNumber":90,"author":{"gitId":"cadencjk"},"content":"            Task removedTask \u003d TaskList.savedTasks.remove(index - 1);","lastModifiedDate":"2022-08-23"},{"lineNumber":91,"author":{"gitId":"cadencjk"},"content":"            return \"Noted. I\u0027ve removed this task:\\n\" + removedTask.getStatus()","lastModifiedDate":"2022-08-29"},{"lineNumber":92,"author":{"gitId":"cadencjk"},"content":"                    + String.format(\"\\nNow you have %d tasks in the list.\", size - 1);","lastModifiedDate":"2022-08-29"},{"lineNumber":93,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":94,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":95,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":96,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":97,"author":{"gitId":"cadencjk"},"content":"     * Marks a task from the existing list of tasks.","lastModifiedDate":"2022-08-23"},{"lineNumber":98,"author":{"gitId":"cadencjk"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-08-23"},{"lineNumber":99,"author":{"gitId":"cadencjk"},"content":"     * The index provided has to be within the length of the current list.","lastModifiedDate":"2022-08-23"},{"lineNumber":100,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":101,"author":{"gitId":"cadencjk"},"content":"     * @param index the index of the task to be marked as done","lastModifiedDate":"2022-08-23"},{"lineNumber":102,"author":{"gitId":"cadencjk"},"content":"     * @throws DukeException","lastModifiedDate":"2022-08-23"},{"lineNumber":103,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":104,"author":{"gitId":"cadencjk"},"content":"    public String mark(int index) throws DukeException {","lastModifiedDate":"2022-08-29"},{"lineNumber":105,"author":{"gitId":"cadencjk"},"content":"        int size \u003d TaskList.savedTasks.size();","lastModifiedDate":"2022-08-23"},{"lineNumber":106,"author":{"gitId":"cadencjk"},"content":"        if (size \u003d\u003d 0) {","lastModifiedDate":"2022-08-29"},{"lineNumber":107,"author":{"gitId":"cadencjk"},"content":"            throw new DukeException(\"You cannot mark anything from an empty Task List!\");","lastModifiedDate":"2022-08-29"},{"lineNumber":108,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-29"},{"lineNumber":109,"author":{"gitId":"cadencjk"},"content":"        if (index \u003c\u003d 0 || index \u003e size) {","lastModifiedDate":"2022-08-23"},{"lineNumber":110,"author":{"gitId":"cadencjk"},"content":"            throw new DukeException(OUT_OF_BOUNDS_INDEX_MESSAGE + String.valueOf(size));","lastModifiedDate":"2022-09-04"},{"lineNumber":111,"author":{"gitId":"cadencjk"},"content":"        } else {","lastModifiedDate":"2022-08-23"},{"lineNumber":112,"author":{"gitId":"cadencjk"},"content":"            Task selectedTask \u003d TaskList.savedTasks.get(index - 1);","lastModifiedDate":"2022-08-23"},{"lineNumber":113,"author":{"gitId":"cadencjk"},"content":"            selectedTask.markAsDone();","lastModifiedDate":"2022-08-23"},{"lineNumber":114,"author":{"gitId":"cadencjk"},"content":"            return \"Nice! I\u0027ve marked this task as done:\\n\" + selectedTask.getStatus();","lastModifiedDate":"2022-08-29"},{"lineNumber":115,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":116,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":117,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":118,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":119,"author":{"gitId":"cadencjk"},"content":"     * Unmarks a task from the existing list of tasks.","lastModifiedDate":"2022-08-23"},{"lineNumber":120,"author":{"gitId":"cadencjk"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-08-23"},{"lineNumber":121,"author":{"gitId":"cadencjk"},"content":"     * The index provided has to be within the length of the current list.","lastModifiedDate":"2022-08-23"},{"lineNumber":122,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":123,"author":{"gitId":"cadencjk"},"content":"     * @param index the index of the task to be unmarked as done","lastModifiedDate":"2022-08-23"},{"lineNumber":124,"author":{"gitId":"cadencjk"},"content":"     * @throws DukeException","lastModifiedDate":"2022-08-23"},{"lineNumber":125,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":126,"author":{"gitId":"cadencjk"},"content":"    public String unmark(int index) throws DukeException {","lastModifiedDate":"2022-08-29"},{"lineNumber":127,"author":{"gitId":"cadencjk"},"content":"        int size \u003d TaskList.savedTasks.size();","lastModifiedDate":"2022-08-23"},{"lineNumber":128,"author":{"gitId":"cadencjk"},"content":"        if (size \u003d\u003d 0) {","lastModifiedDate":"2022-08-29"},{"lineNumber":129,"author":{"gitId":"cadencjk"},"content":"            throw new DukeException(\"You cannot unmark anything from an empty Task List!\");","lastModifiedDate":"2022-08-29"},{"lineNumber":130,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-29"},{"lineNumber":131,"author":{"gitId":"cadencjk"},"content":"        if (index \u003c\u003d 0 || index \u003e size) {","lastModifiedDate":"2022-08-23"},{"lineNumber":132,"author":{"gitId":"cadencjk"},"content":"            throw new DukeException(OUT_OF_BOUNDS_INDEX_MESSAGE + String.valueOf(size));","lastModifiedDate":"2022-09-04"},{"lineNumber":133,"author":{"gitId":"cadencjk"},"content":"        } else {","lastModifiedDate":"2022-08-23"},{"lineNumber":134,"author":{"gitId":"cadencjk"},"content":"            Task selectedTask \u003d TaskList.savedTasks.get(index - 1);","lastModifiedDate":"2022-08-23"},{"lineNumber":135,"author":{"gitId":"cadencjk"},"content":"            selectedTask.markAsUndone();","lastModifiedDate":"2022-08-23"},{"lineNumber":136,"author":{"gitId":"cadencjk"},"content":"            return \"OK, I\u0027ve marked this task as not done yet:\\n\"","lastModifiedDate":"2022-08-29"},{"lineNumber":137,"author":{"gitId":"cadencjk"},"content":"                    + selectedTask.getStatus();","lastModifiedDate":"2022-08-29"},{"lineNumber":138,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":139,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":140,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":141,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":142,"author":{"gitId":"cadencjk"},"content":"     * Iterates the list of tasks and print out the individual task with its index, status of tasks,","lastModifiedDate":"2022-08-29"},{"lineNumber":143,"author":{"gitId":"cadencjk"},"content":"     * description of task, and date of task if any.","lastModifiedDate":"2022-08-29"},{"lineNumber":144,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":145,"author":{"gitId":"cadencjk"},"content":"     * @param tasks the list of tasks to be printed out","lastModifiedDate":"2022-08-29"},{"lineNumber":146,"author":{"gitId":"cadencjk"},"content":"     * @return the details of the tasks in a readable format","lastModifiedDate":"2022-08-29"},{"lineNumber":147,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":148,"author":{"gitId":"cadencjk"},"content":"    private String iterateList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2022-08-24"},{"lineNumber":149,"author":{"gitId":"cadencjk"},"content":"        String listString \u003d \"\";","lastModifiedDate":"2022-08-23"},{"lineNumber":150,"author":{"gitId":"cadencjk"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-08-24"},{"lineNumber":151,"author":{"gitId":"cadencjk"},"content":"            listString +\u003d String.format(\"%d. %s\", i + 1, tasks.get(i).getStatus());","lastModifiedDate":"2022-08-24"},{"lineNumber":152,"author":{"gitId":"cadencjk"},"content":"            if (i !\u003d tasks.size() - 1) {","lastModifiedDate":"2022-08-24"},{"lineNumber":153,"author":{"gitId":"cadencjk"},"content":"                listString +\u003d \"\\n\";","lastModifiedDate":"2022-08-23"},{"lineNumber":154,"author":{"gitId":"cadencjk"},"content":"            }","lastModifiedDate":"2022-08-23"},{"lineNumber":155,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":156,"author":{"gitId":"cadencjk"},"content":"        return listString;","lastModifiedDate":"2022-08-23"},{"lineNumber":157,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":158,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":159,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":160,"author":{"gitId":"cadencjk"},"content":"     * Returns a string that is formatted to store the index of a task, the type of task, the","lastModifiedDate":"2022-08-23"},{"lineNumber":161,"author":{"gitId":"cadencjk"},"content":"     * description of the task and the date of the task for future use.","lastModifiedDate":"2022-08-23"},{"lineNumber":162,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":163,"author":{"gitId":"cadencjk"},"content":"     * @return a String for storage purpose","lastModifiedDate":"2022-08-23"},{"lineNumber":164,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":165,"author":{"gitId":"cadencjk"},"content":"    public String writeTasks() {","lastModifiedDate":"2022-08-23"},{"lineNumber":166,"author":{"gitId":"cadencjk"},"content":"        String dataWritten \u003d \"\";","lastModifiedDate":"2022-08-23"},{"lineNumber":167,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":168,"author":{"gitId":"cadencjk"},"content":"        for (int i \u003d 0; i \u003c TaskList.savedTasks.size(); i++) {","lastModifiedDate":"2022-08-23"},{"lineNumber":169,"author":{"gitId":"cadencjk"},"content":"            dataWritten +\u003d TaskList.savedTasks.get(i).getTask();","lastModifiedDate":"2022-08-23"},{"lineNumber":170,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":171,"author":{"gitId":"cadencjk"},"content":"            if (i !\u003d TaskList.savedTasks.size() - 1) {","lastModifiedDate":"2022-08-23"},{"lineNumber":172,"author":{"gitId":"cadencjk"},"content":"                dataWritten +\u003d \"\\n\";","lastModifiedDate":"2022-08-23"},{"lineNumber":173,"author":{"gitId":"cadencjk"},"content":"            }","lastModifiedDate":"2022-08-23"},{"lineNumber":174,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":175,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":176,"author":{"gitId":"cadencjk"},"content":"        return dataWritten;","lastModifiedDate":"2022-08-23"},{"lineNumber":177,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":178,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":179,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":180,"author":{"gitId":"cadencjk"},"content":"     * Returns a string that is formatted to display the index of a task, the type of task, the","lastModifiedDate":"2022-08-24"},{"lineNumber":181,"author":{"gitId":"cadencjk"},"content":"     * description of the task from the current list of tasks.","lastModifiedDate":"2022-08-24"},{"lineNumber":182,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":183,"author":{"gitId":"cadencjk"},"content":"     * @return a String to display the current list of tasks","lastModifiedDate":"2022-08-24"},{"lineNumber":184,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":185,"author":{"gitId":"cadencjk"},"content":"    public String getList() {","lastModifiedDate":"2022-08-24"},{"lineNumber":186,"author":{"gitId":"cadencjk"},"content":"        return iterateList(TaskList.savedTasks);","lastModifiedDate":"2022-08-24"},{"lineNumber":187,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":188,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":189,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":190,"author":{"gitId":"cadencjk"},"content":"     * Finds all the current tasks that contain the keyword specified by the user.","lastModifiedDate":"2022-08-24"},{"lineNumber":191,"author":{"gitId":"cadencjk"},"content":"     * This search includes keywords that are partially in the description.","lastModifiedDate":"2022-09-05"},{"lineNumber":192,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":193,"author":{"gitId":"cadencjk"},"content":"     * @param keyWord the keyword the user would like to search in the current tasks","lastModifiedDate":"2022-08-24"},{"lineNumber":194,"author":{"gitId":"cadencjk"},"content":"     * @throws DukeException","lastModifiedDate":"2022-08-24"},{"lineNumber":195,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":196,"author":{"gitId":"cadencjk"},"content":"    public String find(String keyWord) throws DukeException {","lastModifiedDate":"2022-08-29"},{"lineNumber":197,"author":{"gitId":"cadencjk"},"content":"        List\u003cTask\u003e tasksFound \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-08-24"},{"lineNumber":198,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":199,"author":{"gitId":"cadencjk"},"content":"        if (keyWord.equals(\"\")) {","lastModifiedDate":"2022-08-24"},{"lineNumber":200,"author":{"gitId":"cadencjk"},"content":"            throw new DukeException(\"Please input a keyword to find the task!\");","lastModifiedDate":"2022-08-24"},{"lineNumber":201,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-24"},{"lineNumber":202,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":203,"author":{"gitId":"cadencjk"},"content":"        for (int i \u003d 0; i \u003c TaskList.savedTasks.size(); i++) {","lastModifiedDate":"2022-08-24"},{"lineNumber":204,"author":{"gitId":"cadencjk"},"content":"            Task currentTask \u003d TaskList.savedTasks.get(i);","lastModifiedDate":"2022-08-24"},{"lineNumber":205,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":206,"author":{"gitId":"cadencjk"},"content":"            String taskDescription \u003d currentTask.getStatus().substring(POSITION_OF_DESCRIPTION);","lastModifiedDate":"2022-09-05"},{"lineNumber":207,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":208,"author":{"gitId":"cadencjk"},"content":"            if (taskDescription.contains(keyWord)) {","lastModifiedDate":"2022-09-05"},{"lineNumber":209,"author":{"gitId":"cadencjk"},"content":"                tasksFound.add(currentTask);","lastModifiedDate":"2022-08-24"},{"lineNumber":210,"author":{"gitId":"cadencjk"},"content":"            }","lastModifiedDate":"2022-08-24"},{"lineNumber":211,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-24"},{"lineNumber":212,"author":{"gitId":"cadencjk"},"content":"        return \"Here are the matching tasks in your list:\\n\" + iterateList(tasksFound);","lastModifiedDate":"2022-08-29"},{"lineNumber":213,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":214,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":215,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":216,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":217,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"cadencjk":217}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke.task;","lastModifiedDate":"2022-08-31"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-08-31"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":" * Represents a todo task.","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-08-16"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"    private static final int MINIMUM_COMMAND_LENGTH \u003d 5;","lastModifiedDate":"2022-09-04"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"     * Adds the description of a task.","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"     * The userInput argument must contain a description of the todo task.","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"     * If the description is empty, the function will throw a DukeException.","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"     * @param userInput a String containing the description of a task","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"     * @throws DukeException","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"    @Override","lastModifiedDate":"2022-08-16"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"    public void addName(String userInput) throws DukeException {","lastModifiedDate":"2022-08-16"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"        if (userInput.length() \u003c\u003d MINIMUM_COMMAND_LENGTH) {","lastModifiedDate":"2022-09-04"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-16"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"        super.addName(userInput.substring(MINIMUM_COMMAND_LENGTH));","lastModifiedDate":"2022-09-04"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-16"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"     * Returns a String in a format that will be stored in the specified directory.","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"     * The String will contain the type of task and the current status (marked or unmarked) of the task.","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"     * @return the details of the task for Storage","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"cadencjk"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"cadencjk"},"content":"    public String getTask() {","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"cadencjk"},"content":"        return String.format(\"T | \" + super.getTask());","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"cadencjk"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":41,"author":{"gitId":"cadencjk"},"content":"     * Returns a String that will display the task.","lastModifiedDate":"2022-08-23"},{"lineNumber":42,"author":{"gitId":"cadencjk"},"content":"     * The String will contain the type of task and the current status","lastModifiedDate":"2022-08-23"},{"lineNumber":43,"author":{"gitId":"cadencjk"},"content":"     * (marked or unmarked) of the task.","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"cadencjk"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":45,"author":{"gitId":"cadencjk"},"content":"     * @return the details of the task for display","lastModifiedDate":"2022-08-23"},{"lineNumber":46,"author":{"gitId":"cadencjk"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":47,"author":{"gitId":"cadencjk"},"content":"    @Override","lastModifiedDate":"2022-08-16"},{"lineNumber":48,"author":{"gitId":"cadencjk"},"content":"    public String getStatus() {","lastModifiedDate":"2022-08-16"},{"lineNumber":49,"author":{"gitId":"cadencjk"},"content":"        return String.format(\"[T]%s\", super.getStatus());","lastModifiedDate":"2022-08-16"},{"lineNumber":50,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-16"},{"lineNumber":51,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-08-16"}],"authorContributionMap":{"cadencjk":51}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-08-29"}],"authorContributionMap":{"cadencjk":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/18\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2022-08-31"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Enter your command\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2022-09-13"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #cccccc;\" /\u003e","lastModifiedDate":"2022-09-13"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"            \u003c/content\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2022-08-29"}],"authorContributionMap":{"cadencjk":19}},{"path":"src/test/java/duke/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-29"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-08-31"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"import duke.task.ToDo;","lastModifiedDate":"2022-08-31"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-31"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"public class ToDoTest {","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"cadencjk"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"cadencjk"},"content":"    public void statusTest() throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"cadencjk"},"content":"        assertEquals(\"[T][ ] complete lab\", makeToDo(\"todo complete lab\").getStatus());","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"cadencjk"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"cadencjk"},"content":"    public void saveFormatTest() throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"cadencjk"},"content":"        assertEquals(\"T | 0 | complete lab\", makeToDo(\"todo complete lab\").getTask());","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"cadencjk"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"cadencjk"},"content":"    public void emptyDescriptionTest() {","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"cadencjk"},"content":"        try {","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"cadencjk"},"content":"            ToDo newTodo \u003d makeToDo(\"\");","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"cadencjk"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"cadencjk"},"content":"            assertEquals(\"OOPS!!! The description of a todo cannot be empty.\", e.getMessage());","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"cadencjk"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"cadencjk"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"cadencjk"},"content":"    public ToDo makeToDo(String input) throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"cadencjk"},"content":"        ToDo dummy \u003d new ToDo();","lastModifiedDate":"2022-08-23"},{"lineNumber":33,"author":{"gitId":"cadencjk"},"content":"        dummy.addName(input);","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"cadencjk"},"content":"        return dummy;","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"cadencjk"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"cadencjk"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"cadencjk":36}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"cadencjk"},"content":"todo assignment 1","lastModifiedDate":"2022-08-16"},{"lineNumber":2,"author":{"gitId":"cadencjk"},"content":"event lecture 1 /at Monday 1pm-4pm","lastModifiedDate":"2022-08-16"},{"lineNumber":3,"author":{"gitId":"cadencjk"},"content":"list","lastModifiedDate":"2022-08-16"},{"lineNumber":4,"author":{"gitId":"cadencjk"},"content":"deadline homework 1 /by Tuesday","lastModifiedDate":"2022-08-16"},{"lineNumber":5,"author":{"gitId":"cadencjk"},"content":"mark 1","lastModifiedDate":"2022-08-16"},{"lineNumber":6,"author":{"gitId":"cadencjk"},"content":"todo assignment 2","lastModifiedDate":"2022-08-16"},{"lineNumber":7,"author":{"gitId":"cadencjk"},"content":"unmark 1","lastModifiedDate":"2022-08-16"},{"lineNumber":8,"author":{"gitId":"cadencjk"},"content":"mark 3","lastModifiedDate":"2022-08-16"},{"lineNumber":9,"author":{"gitId":"cadencjk"},"content":"list","lastModifiedDate":"2022-08-16"},{"lineNumber":10,"author":{"gitId":"cadencjk"},"content":"bye","lastModifiedDate":"2022-08-16"}],"authorContributionMap":{"cadencjk":10}}]
