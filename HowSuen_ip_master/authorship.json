[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.10\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"HowSuen"},"content":"    mainClassName \u003d \"duke.Launcher\"","lastModifiedDate":"2022-08-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"HowSuen"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2022-09-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":61,"author":{"gitId":"HowSuen"},"content":"checkstyle {","lastModifiedDate":"2022-08-23"},{"lineNumber":62,"author":{"gitId":"HowSuen"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-08-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-08-23"},{"lineNumber":64,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":65,"author":{"gitId":"HowSuen"},"content":"checkstyleMain {","lastModifiedDate":"2022-08-24"},{"lineNumber":66,"author":{"gitId":"HowSuen"},"content":"    source \u003d \u0027src/main/java\u0027","lastModifiedDate":"2022-08-24"},{"lineNumber":67,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-24"},{"lineNumber":68,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":69,"author":{"gitId":"HowSuen"},"content":"javafx {","lastModifiedDate":"2022-08-28"},{"lineNumber":70,"author":{"gitId":"HowSuen"},"content":"    version \u003d \"18.0.2\"","lastModifiedDate":"2022-08-28"},{"lineNumber":71,"author":{"gitId":"HowSuen"},"content":"    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027, \u0027javafx.graphics\u0027 ]","lastModifiedDate":"2022-08-30"},{"lineNumber":72,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-28"}],"authorContributionMap":{"-":41,"HowSuen":31}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import duke.command.Command;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"import duke.parser.Parser;","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":" * Represents Duke Bot that functions and responds according to user\u0027s commands.","lastModifiedDate":"2022-08-24"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"public class Duke {","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"    private Storage storage;","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"    private Ui ui;","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"     * Creates a Duke bot and initialise the Storage, Ui and TaskList.","lastModifiedDate":"2022-08-30"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"    public Duke() {","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"        try {","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"            this.storage.initialiseSaveFile();","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"            this.taskList \u003d storage.createTaskList();","lastModifiedDate":"2022-08-30"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"            this.ui.showError(e);","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2022-08-30"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"     * Returns the String representation of Duke.","lastModifiedDate":"2022-08-25"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-25"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"     * @return The String representation of Duke.","lastModifiedDate":"2022-08-25"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"    public String toString() {","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"        return \"Duke\";","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-30"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"     * Returns Duke\u0027s response to the given user\u0027s input.","lastModifiedDate":"2022-08-30"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-30"},{"lineNumber":43,"author":{"gitId":"HowSuen"},"content":"     * @param input The String representation of the user\u0027s input.","lastModifiedDate":"2022-08-30"},{"lineNumber":44,"author":{"gitId":"HowSuen"},"content":"     * @return The String representation of Duke\u0027s response.","lastModifiedDate":"2022-08-30"},{"lineNumber":45,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-30"},{"lineNumber":46,"author":{"gitId":"HowSuen"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2022-08-30"},{"lineNumber":47,"author":{"gitId":"HowSuen"},"content":"        while (this.ui.isActive()) {","lastModifiedDate":"2022-08-30"},{"lineNumber":48,"author":{"gitId":"HowSuen"},"content":"            try {","lastModifiedDate":"2022-08-30"},{"lineNumber":49,"author":{"gitId":"HowSuen"},"content":"                Command command \u003d Parser.parse(input, this.storage, this.taskList, this.ui);","lastModifiedDate":"2022-08-30"},{"lineNumber":50,"author":{"gitId":"HowSuen"},"content":"                return command.execute();","lastModifiedDate":"2022-08-30"},{"lineNumber":51,"author":{"gitId":"HowSuen"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-08-30"},{"lineNumber":52,"author":{"gitId":"HowSuen"},"content":"                return this.ui.showError(e);","lastModifiedDate":"2022-08-30"},{"lineNumber":53,"author":{"gitId":"HowSuen"},"content":"            }","lastModifiedDate":"2022-08-30"},{"lineNumber":54,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-30"},{"lineNumber":55,"author":{"gitId":"HowSuen"},"content":"        return \"\";","lastModifiedDate":"2022-08-30"},{"lineNumber":56,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":57,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"HowSuen":57}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":" * Represents Exceptions that arise from Duke\u0027s features.","lastModifiedDate":"2022-08-24"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-08-15"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"     * Creates DukeException with the given message.","lastModifiedDate":"2022-08-24"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"     * @param message The message of the DukeException.","lastModifiedDate":"2022-08-24"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"    public DukeException(String message) {","lastModifiedDate":"2022-08-15"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"        super(message);","lastModifiedDate":"2022-08-15"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-15"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-15"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"     * Returns the String representation of the DukeException.","lastModifiedDate":"2022-08-25"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-25"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"     * @return The String representation of the DukeException.","lastModifiedDate":"2022-08-25"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-15"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"    public String toString() {","lastModifiedDate":"2022-08-15"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"        return \"E R R O R!\\n\" + super.getMessage();","lastModifiedDate":"2022-09-04"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-15"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-15"}],"authorContributionMap":{"HowSuen":25}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke;","lastModifiedDate":"2022-08-28"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"public class Launcher {","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"        Application.launch(duke.Main.class, args);","lastModifiedDate":"2022-08-30"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-28"}],"authorContributionMap":{"HowSuen":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"import duke.ui.MainWindow;","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-08-30"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-08-30"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-08-30"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-08-30"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-08-30"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-30"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":" * Represents a GUI for Duke using FXML.","lastModifiedDate":"2022-08-30"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-30"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"public class Main extends Application {","lastModifiedDate":"2022-08-30"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"    private static Stage stage;","lastModifiedDate":"2022-08-30"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2022-08-30"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-30"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-08-30"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-30"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-30"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2022-08-30"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"        try {","lastModifiedDate":"2022-08-30"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2022-08-30"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"            AnchorPane anchorPane \u003d fxmlLoader.load();","lastModifiedDate":"2022-08-30"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"            Scene scene \u003d new Scene(anchorPane);","lastModifiedDate":"2022-08-30"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"            Main.stage \u003d stage;","lastModifiedDate":"2022-08-30"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"            Main.stage.setScene(scene);","lastModifiedDate":"2022-08-30"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2022-08-30"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"            Main.stage.show();","lastModifiedDate":"2022-08-30"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-30"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-08-30"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-30"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-30"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"     * Closes the stage.","lastModifiedDate":"2022-08-30"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-30"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"    public static void closeStage() {","lastModifiedDate":"2022-08-30"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"        Main.stage.close();","lastModifiedDate":"2022-08-30"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":43,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-30"}],"authorContributionMap":{"HowSuen":43}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-21"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-08-21"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-08-21"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-08-21"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"import java.util.List;","lastModifiedDate":"2022-08-21"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"import duke.task.Task;","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":" * Represents the Storage to deal with loading tasks from and saving tasks to the save file in the user\u0027s hard disk.","lastModifiedDate":"2022-08-24"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"public class Storage {","lastModifiedDate":"2022-08-21"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"    private final Path path;","lastModifiedDate":"2022-08-21"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"     * Represents Storage with the directory of the save file in the user\u0027s hard disk.","lastModifiedDate":"2022-08-24"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"    public Storage() {","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"        this.path \u003d Paths.get(System.getProperty(\"user.dir\"), \"data\", \"duke.txt\");","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"     * Creates save file if it does not already exist.","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if error occurs while creating save directory or save file","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"    public void initialiseSaveFile() throws DukeException {","lastModifiedDate":"2022-08-22"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"        Path dataPath \u003d Paths.get(System.getProperty(\"user.dir\"), \"data\");","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"        if (!Files.exists(dataPath)) {","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"            // Create \u0027data\u0027 directory if it does not exist","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"            try {","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"                Files.createDirectory(dataPath);","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"            } catch (IOException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"                throw new DukeException(\"I/O Error occurred when creating save directory!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"        if (!Files.exists(this.path)) {","lastModifiedDate":"2022-08-21"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"            // Create \u0027save.txt\u0027 file in \u0027data\u0027 directory if it does not exist","lastModifiedDate":"2022-08-21"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"            try {","lastModifiedDate":"2022-08-21"},{"lineNumber":43,"author":{"gitId":"HowSuen"},"content":"                Files.createFile(this.path);","lastModifiedDate":"2022-08-21"},{"lineNumber":44,"author":{"gitId":"HowSuen"},"content":"            } catch (IOException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":45,"author":{"gitId":"HowSuen"},"content":"                throw new DukeException(\"I/O Error occurred when creating save file!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":46,"author":{"gitId":"HowSuen"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":47,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":48,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":49,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":50,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":51,"author":{"gitId":"HowSuen"},"content":"     * Creates TaskList with history of commands from save file.","lastModifiedDate":"2022-08-21"},{"lineNumber":52,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":53,"author":{"gitId":"HowSuen"},"content":"     * @return TaskList from history of commands","lastModifiedDate":"2022-08-21"},{"lineNumber":54,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if error occurs in reading file or when adding previous commands","lastModifiedDate":"2022-08-21"},{"lineNumber":55,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":56,"author":{"gitId":"HowSuen"},"content":"    public TaskList createTaskList() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":57,"author":{"gitId":"HowSuen"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":58,"author":{"gitId":"HowSuen"},"content":"            List\u003cString\u003e history \u003d Files.readAllLines(this.path);","lastModifiedDate":"2022-08-21"},{"lineNumber":59,"author":{"gitId":"HowSuen"},"content":"            TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-08-30"},{"lineNumber":60,"author":{"gitId":"HowSuen"},"content":"            for (String s : history) {","lastModifiedDate":"2022-08-21"},{"lineNumber":61,"author":{"gitId":"HowSuen"},"content":"                taskList.loadFromSave(s);","lastModifiedDate":"2022-08-21"},{"lineNumber":62,"author":{"gitId":"HowSuen"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":63,"author":{"gitId":"HowSuen"},"content":"            return taskList;","lastModifiedDate":"2022-08-21"},{"lineNumber":64,"author":{"gitId":"HowSuen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":65,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"I/O Error occurred when reading from save file!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":66,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":67,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":68,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":69,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":70,"author":{"gitId":"HowSuen"},"content":"     * Overwrites the user\u0027s save file with the current tasks in the list.","lastModifiedDate":"2022-08-21"},{"lineNumber":71,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":72,"author":{"gitId":"HowSuen"},"content":"     * @param taskList The TaskList to save.","lastModifiedDate":"2022-08-30"},{"lineNumber":73,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if error occurs while writing to save file.","lastModifiedDate":"2022-08-21"},{"lineNumber":74,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":75,"author":{"gitId":"HowSuen"},"content":"    public void writeToSave(TaskList taskList) throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":76,"author":{"gitId":"HowSuen"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":77,"author":{"gitId":"HowSuen"},"content":"            if (taskList.isEmpty()) {","lastModifiedDate":"2022-08-30"},{"lineNumber":78,"author":{"gitId":"HowSuen"},"content":"                Files.write(this.path, new byte[0]);","lastModifiedDate":"2022-08-21"},{"lineNumber":79,"author":{"gitId":"HowSuen"},"content":"                return;","lastModifiedDate":"2022-08-21"},{"lineNumber":80,"author":{"gitId":"HowSuen"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":81,"author":{"gitId":"HowSuen"},"content":"            StringBuilder sb \u003d taskList.toStringBuilder();","lastModifiedDate":"2022-08-30"},{"lineNumber":82,"author":{"gitId":"HowSuen"},"content":"            byte[] byteArray \u003d sb.toString().getBytes();","lastModifiedDate":"2022-08-21"},{"lineNumber":83,"author":{"gitId":"HowSuen"},"content":"            Files.write(this.path, byteArray);","lastModifiedDate":"2022-08-21"},{"lineNumber":84,"author":{"gitId":"HowSuen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":85,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"I/O Error occurred while overwriting save file!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":86,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":87,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":88,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":89,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":90,"author":{"gitId":"HowSuen"},"content":"     * Adds task to save file.","lastModifiedDate":"2022-08-25"},{"lineNumber":91,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":92,"author":{"gitId":"HowSuen"},"content":"     * @param task The task to be added to the save file.","lastModifiedDate":"2022-08-21"},{"lineNumber":93,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if error occurs while reading from or writing to save file.","lastModifiedDate":"2022-08-21"},{"lineNumber":94,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":95,"author":{"gitId":"HowSuen"},"content":"    public void addTaskToSave(Task task) throws DukeException {","lastModifiedDate":"2022-08-21"},{"lineNumber":96,"author":{"gitId":"HowSuen"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":97,"author":{"gitId":"HowSuen"},"content":"            List\u003cString\u003e history \u003d Files.readAllLines(this.path);","lastModifiedDate":"2022-08-21"},{"lineNumber":98,"author":{"gitId":"HowSuen"},"content":"            history.add(task.toCommand());","lastModifiedDate":"2022-08-21"},{"lineNumber":99,"author":{"gitId":"HowSuen"},"content":"            String saveResult \u003d history.stream()","lastModifiedDate":"2022-09-04"},{"lineNumber":100,"author":{"gitId":"HowSuen"},"content":"                    .map(s -\u003e s + \"\\n\")","lastModifiedDate":"2022-09-04"},{"lineNumber":101,"author":{"gitId":"HowSuen"},"content":"                    .collect(StringBuilder::new,","lastModifiedDate":"2022-09-04"},{"lineNumber":102,"author":{"gitId":"HowSuen"},"content":"                            StringBuilder::append,","lastModifiedDate":"2022-09-04"},{"lineNumber":103,"author":{"gitId":"HowSuen"},"content":"                            StringBuilder::append)","lastModifiedDate":"2022-09-04"},{"lineNumber":104,"author":{"gitId":"HowSuen"},"content":"                    .toString();","lastModifiedDate":"2022-09-04"},{"lineNumber":105,"author":{"gitId":"HowSuen"},"content":"            Files.write(this.path, saveResult.getBytes());","lastModifiedDate":"2022-09-04"},{"lineNumber":106,"author":{"gitId":"HowSuen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":107,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"I/O Error occurred when reading from save file!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":108,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":109,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":110,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":111,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":112,"author":{"gitId":"HowSuen"},"content":"     * Removes task from save file.","lastModifiedDate":"2022-08-25"},{"lineNumber":113,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":114,"author":{"gitId":"HowSuen"},"content":"     * @param id The id of the task to be removed.","lastModifiedDate":"2022-08-21"},{"lineNumber":115,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if error occurs while reading from or writing to save file.","lastModifiedDate":"2022-08-21"},{"lineNumber":116,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":117,"author":{"gitId":"HowSuen"},"content":"    public void deleteTaskFromSave(int id) throws DukeException {","lastModifiedDate":"2022-08-21"},{"lineNumber":118,"author":{"gitId":"HowSuen"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":119,"author":{"gitId":"HowSuen"},"content":"            List\u003cString\u003e history \u003d Files.readAllLines(this.path);","lastModifiedDate":"2022-08-21"},{"lineNumber":120,"author":{"gitId":"HowSuen"},"content":"            history.remove(id);","lastModifiedDate":"2022-08-21"},{"lineNumber":121,"author":{"gitId":"HowSuen"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-08-21"},{"lineNumber":122,"author":{"gitId":"HowSuen"},"content":"            for (String s : history) {","lastModifiedDate":"2022-08-21"},{"lineNumber":123,"author":{"gitId":"HowSuen"},"content":"                sb.append(s + \"\\n\");","lastModifiedDate":"2022-08-21"},{"lineNumber":124,"author":{"gitId":"HowSuen"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":125,"author":{"gitId":"HowSuen"},"content":"            Files.write(this.path, sb.toString().getBytes());","lastModifiedDate":"2022-08-21"},{"lineNumber":126,"author":{"gitId":"HowSuen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":127,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"I/O Error occurred when reading from save file!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":128,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":129,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":130,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":131,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":132,"author":{"gitId":"HowSuen"},"content":"     * Marks the Task in the save file.","lastModifiedDate":"2022-08-21"},{"lineNumber":133,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":134,"author":{"gitId":"HowSuen"},"content":"     * @param id The id of the task to be marked in the save file.","lastModifiedDate":"2022-08-21"},{"lineNumber":135,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if error occurs while reading from or writing to save file.","lastModifiedDate":"2022-08-21"},{"lineNumber":136,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":137,"author":{"gitId":"HowSuen"},"content":"    public void markTaskInSave(int id) throws DukeException {","lastModifiedDate":"2022-08-21"},{"lineNumber":138,"author":{"gitId":"HowSuen"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":139,"author":{"gitId":"HowSuen"},"content":"            List\u003cString\u003e history \u003d Files.readAllLines(this.path);","lastModifiedDate":"2022-08-21"},{"lineNumber":140,"author":{"gitId":"HowSuen"},"content":"            String[] command \u003d history.get(id).split(\" \\\\| \", 3);","lastModifiedDate":"2022-08-21"},{"lineNumber":141,"author":{"gitId":"HowSuen"},"content":"            assert command.length \u003d\u003d 3 : \"command from save file is not valid\";","lastModifiedDate":"2022-09-04"},{"lineNumber":142,"author":{"gitId":"HowSuen"},"content":"            String newLine \u003d command[0] + \" | 1 | \" + command[2];","lastModifiedDate":"2022-08-21"},{"lineNumber":143,"author":{"gitId":"HowSuen"},"content":"            history.set(id, newLine);","lastModifiedDate":"2022-08-21"},{"lineNumber":144,"author":{"gitId":"HowSuen"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-08-21"},{"lineNumber":145,"author":{"gitId":"HowSuen"},"content":"            for (String s : history) {","lastModifiedDate":"2022-08-21"},{"lineNumber":146,"author":{"gitId":"HowSuen"},"content":"                sb.append(s + \"\\n\");","lastModifiedDate":"2022-08-21"},{"lineNumber":147,"author":{"gitId":"HowSuen"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":148,"author":{"gitId":"HowSuen"},"content":"            Files.write(this.path, sb.toString().getBytes());","lastModifiedDate":"2022-08-21"},{"lineNumber":149,"author":{"gitId":"HowSuen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":150,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"I/O Error occurred when reading from save file!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":151,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":152,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":153,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":154,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":155,"author":{"gitId":"HowSuen"},"content":"     * Unmarks the Task in the save file.","lastModifiedDate":"2022-08-21"},{"lineNumber":156,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":157,"author":{"gitId":"HowSuen"},"content":"     * @param id The id of the task to be unmarked in the save file.","lastModifiedDate":"2022-08-21"},{"lineNumber":158,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if error occurs while reading from or writing to save file.","lastModifiedDate":"2022-08-21"},{"lineNumber":159,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":160,"author":{"gitId":"HowSuen"},"content":"    public void unmarkTaskInSave(int id) throws DukeException {","lastModifiedDate":"2022-08-21"},{"lineNumber":161,"author":{"gitId":"HowSuen"},"content":"        try {","lastModifiedDate":"2022-08-21"},{"lineNumber":162,"author":{"gitId":"HowSuen"},"content":"            List\u003cString\u003e history \u003d Files.readAllLines(this.path);","lastModifiedDate":"2022-08-21"},{"lineNumber":163,"author":{"gitId":"HowSuen"},"content":"            String[] command \u003d history.get(id).split(\" \\\\| \", 3);","lastModifiedDate":"2022-08-21"},{"lineNumber":164,"author":{"gitId":"HowSuen"},"content":"            assert command.length \u003d\u003d 3 : \"command from save file is not valid\";","lastModifiedDate":"2022-09-04"},{"lineNumber":165,"author":{"gitId":"HowSuen"},"content":"            String newLine \u003d command[0] + \" | 0 | \" + command[2];","lastModifiedDate":"2022-08-21"},{"lineNumber":166,"author":{"gitId":"HowSuen"},"content":"            history.set(id, newLine);","lastModifiedDate":"2022-08-21"},{"lineNumber":167,"author":{"gitId":"HowSuen"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-08-21"},{"lineNumber":168,"author":{"gitId":"HowSuen"},"content":"            for (String s : history) {","lastModifiedDate":"2022-08-21"},{"lineNumber":169,"author":{"gitId":"HowSuen"},"content":"                sb.append(s + \"\\n\");","lastModifiedDate":"2022-08-21"},{"lineNumber":170,"author":{"gitId":"HowSuen"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":171,"author":{"gitId":"HowSuen"},"content":"            Files.write(this.path, sb.toString().getBytes());","lastModifiedDate":"2022-08-21"},{"lineNumber":172,"author":{"gitId":"HowSuen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":173,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"I/O Error occurred when reading from save file!\");","lastModifiedDate":"2022-08-21"},{"lineNumber":174,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":175,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":176,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-21"}],"authorContributionMap":{"HowSuen":176}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-22"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":" * Represents the Ui that deals with interactions with the user.","lastModifiedDate":"2022-08-24"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"public class Ui {","lastModifiedDate":"2022-08-22"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"    private final Scanner sc;","lastModifiedDate":"2022-08-22"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"    private boolean isActive;","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"     * Creates Ui that handles the interactions with the user.","lastModifiedDate":"2022-08-24"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"    public Ui() {","lastModifiedDate":"2022-08-22"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2022-08-22"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"        this.isActive \u003d true;","lastModifiedDate":"2022-08-22"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"     * Checks if the scanner is active.","lastModifiedDate":"2022-08-22"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-22"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"     * @return true if the scanner has next, false otherwise.","lastModifiedDate":"2022-08-22"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"    public boolean isActive() {","lastModifiedDate":"2022-08-22"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"        return this.isActive;","lastModifiedDate":"2022-08-30"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"     * Prints the error message when DukeException occurs.","lastModifiedDate":"2022-08-22"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-22"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"     * @param e The DukeException for this error.","lastModifiedDate":"2022-08-22"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"     * @return The String message of the DukeException.","lastModifiedDate":"2022-08-30"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"    public String showError(DukeException e) {","lastModifiedDate":"2022-08-30"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"        return e.toString() + \"\\n\";","lastModifiedDate":"2022-08-30"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"     * Ends the current Duke session.","lastModifiedDate":"2022-08-22"},{"lineNumber":43,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-22"},{"lineNumber":44,"author":{"gitId":"HowSuen"},"content":"     * @param storage The storage associated with Duke.","lastModifiedDate":"2022-08-22"},{"lineNumber":45,"author":{"gitId":"HowSuen"},"content":"     * @param taskList The TaskList associated with Duke.","lastModifiedDate":"2022-08-30"},{"lineNumber":46,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if DukeException occurs when saving to file.","lastModifiedDate":"2022-08-22"},{"lineNumber":47,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":48,"author":{"gitId":"HowSuen"},"content":"    public void endSession(Storage storage, TaskList taskList) throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":49,"author":{"gitId":"HowSuen"},"content":"        this.isActive \u003d false;","lastModifiedDate":"2022-08-22"},{"lineNumber":50,"author":{"gitId":"HowSuen"},"content":"        this.sc.close();","lastModifiedDate":"2022-08-30"},{"lineNumber":51,"author":{"gitId":"HowSuen"},"content":"        storage.writeToSave(taskList);","lastModifiedDate":"2022-08-30"},{"lineNumber":52,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":53,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"HowSuen":53}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.command;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-24"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":" * Represents the command to add tasks (ToDo, Deadline, and Event) to the TaskList.","lastModifiedDate":"2022-08-30"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2022-08-22"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"    private Storage storage;","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"    private String[] command;","lastModifiedDate":"2022-08-24"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"     * Creates AddCommand with the given TaskList, Storage, and command.","lastModifiedDate":"2022-08-30"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"     * @param taskList The TaskList to add the task to.","lastModifiedDate":"2022-08-30"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"     * @param storage The Storage associated with the TaskList.","lastModifiedDate":"2022-08-30"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"     * @param command The String array of the user\u0027s command.","lastModifiedDate":"2022-08-24"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"    public AddCommand(TaskList taskList, Storage storage, String[] command) {","lastModifiedDate":"2022-08-30"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2022-08-22"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"        this.command \u003d command;","lastModifiedDate":"2022-08-24"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-08-25"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-22"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"    public String execute() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"        return taskList.addTask(this.command, this.storage) + \"\\n\";","lastModifiedDate":"2022-08-30"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"     * Checks if the command given refers to adding tasks.","lastModifiedDate":"2022-08-24"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"     * @param s The command word (if any) from the user\u0027s input.","lastModifiedDate":"2022-08-24"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"     * @return true if the command to add tasks is valid, false otherwise.","lastModifiedDate":"2022-08-24"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"    public static boolean isCommand(String s) {","lastModifiedDate":"2022-08-22"},{"lineNumber":43,"author":{"gitId":"HowSuen"},"content":"        boolean isTodo \u003d s.equals(\"todo\");","lastModifiedDate":"2022-09-04"},{"lineNumber":44,"author":{"gitId":"HowSuen"},"content":"        boolean isDeadline \u003d s.equals(\"deadline\");","lastModifiedDate":"2022-09-04"},{"lineNumber":45,"author":{"gitId":"HowSuen"},"content":"        boolean isEvent \u003d s.equals(\"event\");","lastModifiedDate":"2022-09-04"},{"lineNumber":46,"author":{"gitId":"HowSuen"},"content":"        return isTodo || isDeadline || isEvent;","lastModifiedDate":"2022-09-04"},{"lineNumber":47,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":48,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"HowSuen":48}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.command;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":" * Represents a Command with an execute function.","lastModifiedDate":"2022-08-24"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"public abstract class Command {","lastModifiedDate":"2022-08-22"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"     * Executes the purpose of the command and returns the message from Duke.","lastModifiedDate":"2022-08-30"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"     * @return The String message of Duke\u0027s response.","lastModifiedDate":"2022-08-30"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if an error occurs when executing the command.","lastModifiedDate":"2022-08-24"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"    public abstract String execute() throws DukeException;","lastModifiedDate":"2022-08-30"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"HowSuen":16}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.command;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-24"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":" * Represents the command to delete tasks from the TaskList.","lastModifiedDate":"2022-08-30"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2022-08-22"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"    private Storage storage;","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"    private String[] command;","lastModifiedDate":"2022-08-24"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"     * Creates DeleteCommand with the given TaskList, Storage, and command.","lastModifiedDate":"2022-08-30"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"     * @param taskList The TaskList to delete the task from.","lastModifiedDate":"2022-08-30"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"     * @param storage The Storage associated with the TaskList.","lastModifiedDate":"2022-08-30"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"     * @param command The String array of the user\u0027s command.","lastModifiedDate":"2022-08-24"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"    public DeleteCommand(TaskList taskList, Storage storage, String[] command) {","lastModifiedDate":"2022-08-30"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2022-08-22"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"        this.command \u003d command;","lastModifiedDate":"2022-08-24"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-08-25"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-22"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"    public String execute() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"        return taskList.deleteTask(command, storage) + \"\\n\";","lastModifiedDate":"2022-08-30"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"     * Checks if the command given refers to deleting tasks.","lastModifiedDate":"2022-08-24"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"     * @param s The command word (if any) from the user\u0027s input.","lastModifiedDate":"2022-08-24"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"     * @return true if the command to delete tasks is valid, false otherwise.","lastModifiedDate":"2022-08-24"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"    public static boolean isCommand(String s) {","lastModifiedDate":"2022-08-22"},{"lineNumber":43,"author":{"gitId":"HowSuen"},"content":"        return s.equals(\"delete\");","lastModifiedDate":"2022-08-22"},{"lineNumber":44,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":45,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"HowSuen":45}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.command;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"import duke.Main;","lastModifiedDate":"2022-09-04"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-24"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"import duke.Ui;","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":" * Represents the command to exit and close Duke.","lastModifiedDate":"2022-08-24"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"    private Storage storage;","lastModifiedDate":"2022-08-22"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"    private Ui ui;","lastModifiedDate":"2022-08-22"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"     * Creates ExitCommand with the given TaskList, Storage, and Ui.","lastModifiedDate":"2022-08-30"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"     * @param ui The Ui to end the session with.","lastModifiedDate":"2022-08-24"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"     * @param storage The Storage associated with the TaskList.","lastModifiedDate":"2022-08-30"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"     * @param taskList The TaskList to save to Storage.","lastModifiedDate":"2022-08-30"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"    public ExitCommand(Ui ui, Storage storage, TaskList taskList) {","lastModifiedDate":"2022-08-30"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2022-08-22"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2022-08-22"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-08-25"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-22"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"    public String execute() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"        this.ui.endSession(this.storage, this.taskList);","lastModifiedDate":"2022-08-30"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"        Main.closeStage();","lastModifiedDate":"2022-09-04"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"        return \"Bye! Hope to see you again soon!\";","lastModifiedDate":"2022-09-04"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"     * Checks if the command given refers to exiting and closing Duke.","lastModifiedDate":"2022-08-24"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":43,"author":{"gitId":"HowSuen"},"content":"     * @param s The command word (if any) from the user\u0027s input.","lastModifiedDate":"2022-08-24"},{"lineNumber":44,"author":{"gitId":"HowSuen"},"content":"     * @return true if the command to exit is valid, false otherwise.","lastModifiedDate":"2022-08-24"},{"lineNumber":45,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":46,"author":{"gitId":"HowSuen"},"content":"    public static boolean isCommand(String s) {","lastModifiedDate":"2022-08-22"},{"lineNumber":47,"author":{"gitId":"HowSuen"},"content":"        return s.equals(\"bye\") || s.equals(\"exit\");","lastModifiedDate":"2022-09-04"},{"lineNumber":48,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":49,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"HowSuen":49}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.command;","lastModifiedDate":"2022-08-24"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-24"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":" * Represents the command to find a task by searching for a keyword.","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"    private String[] command;","lastModifiedDate":"2022-08-24"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"     * Creates FindCommand with the given TaskList and command.","lastModifiedDate":"2022-08-30"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"     * @param taskList The TaskList to search the task from.","lastModifiedDate":"2022-08-30"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"     * @param command The String array of the user\u0027s command.","lastModifiedDate":"2022-08-24"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"    public FindCommand(TaskList taskList, String[] command) {","lastModifiedDate":"2022-08-30"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"        this.command \u003d command;","lastModifiedDate":"2022-08-24"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-08-25"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-24"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"    public String execute() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"        return taskList.findTask(command) + \"\\n\";","lastModifiedDate":"2022-08-30"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"     * Checks if the command given refers to finding a task from the TaskList.","lastModifiedDate":"2022-08-30"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"     * @param s The command word (if any) from the user\u0027s input.","lastModifiedDate":"2022-08-24"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"     * @return true if the command to find is valid, false otherwise.","lastModifiedDate":"2022-08-24"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"    public static boolean isCommand(String s) {","lastModifiedDate":"2022-08-24"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"        return s.equals(\"find\");","lastModifiedDate":"2022-08-24"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-24"}],"authorContributionMap":{"HowSuen":41}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.command;","lastModifiedDate":"2022-08-26"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-26"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-26"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":" * Represents the command to show all the available commands.","lastModifiedDate":"2022-08-26"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-26"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2022-08-26"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-08-26"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-26"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"    public String execute() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-08-26"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"        sb.append(\"Here is a list of commands Duke knows!\\n\");","lastModifiedDate":"2022-09-04"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"        sb.append(\"1. list\\n- View all the tasks in your list.\\n\");","lastModifiedDate":"2022-09-04"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"        sb.append(\"2. find \u003ckeyword\u003e\\n\"","lastModifiedDate":"2022-08-26"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"                + \"- Search for tasks in your list that contain the keyword or phrase provided.\\n\");","lastModifiedDate":"2022-09-04"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"        sb.append(\"3. todo \u003cdescription\u003e\\n\"","lastModifiedDate":"2022-08-26"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"                + \"- Add a ToDo task with the given description.\\n\");","lastModifiedDate":"2022-09-04"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"        sb.append(\"4. deadline \u003cdescription\u003e /by \u003cdate/time\u003e\\n\"","lastModifiedDate":"2022-08-26"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"                + \"- Add a Deadline task with the given description and date/time.\\n\");","lastModifiedDate":"2022-08-26"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"        sb.append(\"- \u003cdate/time\u003e is written in DD-MM-YYYY HH:mm format, where the time (HH:mm) is optional.\\n\");","lastModifiedDate":"2022-09-04"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"        sb.append(\"5. event \u003cdescription\u003e /at \u003cdate/time\u003e\\n\"","lastModifiedDate":"2022-08-26"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"                + \"- Add an Event task with the given description and date/time.\\n\");","lastModifiedDate":"2022-08-26"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"        sb.append(\"- \u003cdate/time\u003e is written in DD-MM-YYYY HH:mm format, where the time (HH:mm) is optional.\\n\");","lastModifiedDate":"2022-09-04"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"        sb.append(\"6. mark \u003ctask_id\u003e\\n- Mark the task with the given id in your list as done.\\n\");","lastModifiedDate":"2022-09-04"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"        sb.append(\"7. unmark \u003ctask_id\u003e\\n- Mark the task with the given id in your list as not done.\\n\");","lastModifiedDate":"2022-09-04"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"        sb.append(\"8. bye\\n- Exit Duke bot.\");","lastModifiedDate":"2022-08-26"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"        return sb.toString();","lastModifiedDate":"2022-08-30"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-26"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-26"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"     * Checks if the command given refers to help.","lastModifiedDate":"2022-08-26"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-26"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"     * @param s The command word (if any) from the user\u0027s input.","lastModifiedDate":"2022-08-26"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"     * @return true if the command for help is valid, false otherwise.","lastModifiedDate":"2022-08-26"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-26"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"    public static boolean isCommand(String s) {","lastModifiedDate":"2022-08-26"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"        return s.equals(\"help\");","lastModifiedDate":"2022-08-26"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-26"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-26"}],"authorContributionMap":{"HowSuen":42}},{"path":"src/main/java/duke/command/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.command;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":" * Represents an invalid, unrecognised command given by the user.","lastModifiedDate":"2022-08-24"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"public class InvalidCommand extends Command {","lastModifiedDate":"2022-08-22"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-08-25"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"    public String execute() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"        throw new DukeException(\"Unknown command, please try again! \\nType \\\"help\\\" for a list of commands.\");","lastModifiedDate":"2022-09-04"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"HowSuen":16}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.command;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":" * Represents the command to list all the tasks in the given TaskList.","lastModifiedDate":"2022-08-30"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2022-08-22"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"     * Creates ListCommand with the given TaskList.","lastModifiedDate":"2022-08-30"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"     * @param taskList The TaskList to list the tasks from.","lastModifiedDate":"2022-08-30"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"    public ListCommand(TaskList taskList) {","lastModifiedDate":"2022-08-30"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-08-25"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-22"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"    public String execute() {","lastModifiedDate":"2022-08-30"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"        return this.taskList.listTasks();","lastModifiedDate":"2022-08-30"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"     * Checks if the command given refers to listing all the tasks from the TaskList.","lastModifiedDate":"2022-08-30"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"     * @param s The command word (if any) from the user\u0027s input.","lastModifiedDate":"2022-08-24"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"     * @return true if the command to list is valid, false otherwise.","lastModifiedDate":"2022-08-24"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"    public static boolean isCommand(String s) {","lastModifiedDate":"2022-08-22"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"        return s.equals(\"list\");","lastModifiedDate":"2022-08-22"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"HowSuen":37}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.command;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-24"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":" * Represents the command to mark a task as done in the TaskList.","lastModifiedDate":"2022-08-30"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2022-08-22"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"    private Storage storage;","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"    private String[] command;","lastModifiedDate":"2022-08-24"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"     * Creates MarkCommand with the given TaskList, Storage and command.","lastModifiedDate":"2022-08-30"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"     * @param taskList The TaskList to mark the task from.","lastModifiedDate":"2022-08-30"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"     * @param storage The Storage associated with the TaskList.","lastModifiedDate":"2022-08-30"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"     * @param command The String array of the user\u0027s command.","lastModifiedDate":"2022-08-24"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"    public MarkCommand(TaskList taskList, Storage storage, String[] command) {","lastModifiedDate":"2022-08-30"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2022-08-22"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"        this.command \u003d command;","lastModifiedDate":"2022-08-24"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-08-25"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-22"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"    public String execute() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"        return this.taskList.markTask(command, storage) + \"\\n\";","lastModifiedDate":"2022-08-30"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"     * Checks if the command given refers to marking a task.","lastModifiedDate":"2022-08-24"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"     * @param s The command word (if any) from the user\u0027s input.","lastModifiedDate":"2022-08-24"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"     * @return true if the command to mark a task is valid, false otherwise.","lastModifiedDate":"2022-08-24"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"    public static boolean isCommand(String s) {","lastModifiedDate":"2022-08-22"},{"lineNumber":43,"author":{"gitId":"HowSuen"},"content":"        return s.equals(\"mark\");","lastModifiedDate":"2022-08-22"},{"lineNumber":44,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":45,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"HowSuen":45}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.command;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-24"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":" * Represents the command to mark a task as not done in the TaskList.","lastModifiedDate":"2022-08-30"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2022-08-22"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"    private TaskList taskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"    private Storage storage;","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"    private String[] command;","lastModifiedDate":"2022-08-24"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"     * Creates UnmarkCommand with the given TaskList, Storage and command.","lastModifiedDate":"2022-08-30"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"     * @param taskList The TaskList to unmark the task from.","lastModifiedDate":"2022-08-30"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"     * @param storage The Storage associated with the TaskList.","lastModifiedDate":"2022-08-30"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"     * @param command The String array of the user\u0027s command.","lastModifiedDate":"2022-08-24"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"    public UnmarkCommand(TaskList taskList, Storage storage, String[] command) {","lastModifiedDate":"2022-08-30"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2022-08-22"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"        this.command \u003d command;","lastModifiedDate":"2022-08-24"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"     * {@inheritDoc}","lastModifiedDate":"2022-08-25"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-22"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"    public String execute() throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"        return taskList.unmarkTask(command, storage) + \"\\n\";","lastModifiedDate":"2022-08-30"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"     * Checks if the command given refers to unmarking a task.","lastModifiedDate":"2022-08-24"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"     * @param s The command word (if any) from the user\u0027s input.","lastModifiedDate":"2022-08-24"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"     * @return true if the command to unmark a task is valid, false otherwise.","lastModifiedDate":"2022-08-24"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"    public static boolean isCommand(String s) {","lastModifiedDate":"2022-08-22"},{"lineNumber":43,"author":{"gitId":"HowSuen"},"content":"        return s.equals(\"unmark\");","lastModifiedDate":"2022-08-22"},{"lineNumber":44,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":45,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"HowSuen":45}},{"path":"src/main/java/duke/parser/DateParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.parser;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2022-08-22"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-08-22"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-24"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-22"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"import java.time.format.DateTimeFormatterBuilder;","lastModifiedDate":"2022-08-22"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"import java.time.temporal.TemporalAccessor;","lastModifiedDate":"2022-08-22"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":" * Represents a parser that translates between strings of date/time and LocalDateTime objects.","lastModifiedDate":"2022-08-25"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"public class DateParser {","lastModifiedDate":"2022-08-22"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"    // DateTimeFormatter for the formats of date/time","lastModifiedDate":"2022-08-22"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"    private static final DateTimeFormatter FORMAT \u003d new DateTimeFormatterBuilder()","lastModifiedDate":"2022-08-25"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"            .appendOptional(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"))","lastModifiedDate":"2022-08-22"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"            .appendOptional(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"))","lastModifiedDate":"2022-08-22"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"            .appendOptional(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"))","lastModifiedDate":"2022-08-22"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"            .appendOptional(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))","lastModifiedDate":"2022-08-22"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"            .appendOptional(DateTimeFormatter.ofPattern(\"dd MM yyyy HH:mm\"))","lastModifiedDate":"2022-08-22"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"            .appendOptional(DateTimeFormatter.ofPattern(\"dd MM yyyy\"))","lastModifiedDate":"2022-08-22"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"            .toFormatter();","lastModifiedDate":"2022-08-22"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"     * Converts a String of date to LocalDate object","lastModifiedDate":"2022-08-22"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-22"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"     * @param date The String representation of the date.","lastModifiedDate":"2022-08-22"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"     * @return The LocalDate object of the date.","lastModifiedDate":"2022-08-22"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"     * @throws DateTimeException if the text cannot be parsed","lastModifiedDate":"2022-08-22"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"    public static LocalDateTime parseStringToDate(String date) throws DateTimeException {","lastModifiedDate":"2022-09-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // @@author HowSuen-reused","lastModifiedDate":"2022-08-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // Reused from https://stackoverflow.com/questions/48280447/java-8-datetimeformatter-with-optional-part","lastModifiedDate":"2022-08-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // with minor modifications.","lastModifiedDate":"2022-08-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        LocalDateTime dateTime;","lastModifiedDate":"2022-08-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        TemporalAccessor temporalAccessor \u003d DateParser.FORMAT.parseBest(date, LocalDateTime::from, LocalDate::from);","lastModifiedDate":"2022-08-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (temporalAccessor instanceof LocalDateTime) {","lastModifiedDate":"2022-08-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            dateTime \u003d (LocalDateTime) temporalAccessor;","lastModifiedDate":"2022-08-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2022-08-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            dateTime \u003d ((LocalDate) temporalAccessor).atStartOfDay();","lastModifiedDate":"2022-08-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return dateTime;","lastModifiedDate":"2022-08-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // @@author","lastModifiedDate":"2022-08-30"},{"lineNumber":44,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":45,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":46,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":47,"author":{"gitId":"HowSuen"},"content":"     * Converts a LocalDate object to the String representation.","lastModifiedDate":"2022-08-22"},{"lineNumber":48,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-22"},{"lineNumber":49,"author":{"gitId":"HowSuen"},"content":"     * @param date The LocalDate object of the date.","lastModifiedDate":"2022-08-22"},{"lineNumber":50,"author":{"gitId":"HowSuen"},"content":"     * @return The String representation of the date.","lastModifiedDate":"2022-08-22"},{"lineNumber":51,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":52,"author":{"gitId":"HowSuen"},"content":"    public static String parseDateToString(LocalDateTime date) {","lastModifiedDate":"2022-09-04"},{"lineNumber":53,"author":{"gitId":"HowSuen"},"content":"        // Format to show the Date/Time on GUI","lastModifiedDate":"2022-09-04"},{"lineNumber":54,"author":{"gitId":"HowSuen"},"content":"        DateTimeFormatter stringFormat \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2022-08-22"},{"lineNumber":55,"author":{"gitId":"HowSuen"},"content":"        return date.format(stringFormat);","lastModifiedDate":"2022-08-22"},{"lineNumber":56,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":57,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":58,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":59,"author":{"gitId":"HowSuen"},"content":"     * Converts a LocalDate object to command for save file.","lastModifiedDate":"2022-08-22"},{"lineNumber":60,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-22"},{"lineNumber":61,"author":{"gitId":"HowSuen"},"content":"     * @param date The LocalDate object of the date.","lastModifiedDate":"2022-08-22"},{"lineNumber":62,"author":{"gitId":"HowSuen"},"content":"     * @return The String representation of the command.","lastModifiedDate":"2022-08-22"},{"lineNumber":63,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":64,"author":{"gitId":"HowSuen"},"content":"    public static String parseDateToCommand(LocalDateTime date) {","lastModifiedDate":"2022-09-04"},{"lineNumber":65,"author":{"gitId":"HowSuen"},"content":"        // Format to save the Date/Time of the task in the save file","lastModifiedDate":"2022-09-04"},{"lineNumber":66,"author":{"gitId":"HowSuen"},"content":"        DateTimeFormatter stringFormat \u003d DateTimeFormatter.ofPattern(\"dd MM yyyy HH:mm\");","lastModifiedDate":"2022-08-22"},{"lineNumber":67,"author":{"gitId":"HowSuen"},"content":"        return date.format(stringFormat);","lastModifiedDate":"2022-08-22"},{"lineNumber":68,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":69,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"-":12,"HowSuen":57}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.parser;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"import duke.Ui;","lastModifiedDate":"2022-08-23"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"import duke.command.Command;","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2022-08-24"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"import duke.command.HelpCommand;","lastModifiedDate":"2022-08-26"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"import duke.command.InvalidCommand;","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":" * Represents a parser that interprets the user\u0027s command and returns the respective Command object.","lastModifiedDate":"2022-08-24"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"public class Parser {","lastModifiedDate":"2022-08-22"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"     * Returns the respective Command for the given string of command, Storage, TaskList and Ui.","lastModifiedDate":"2022-08-30"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"     * @param command The command to be interpreted.","lastModifiedDate":"2022-08-24"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"     * @param storage The Storage associated with the command, if any.","lastModifiedDate":"2022-08-24"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"     * @param taskList The TaskList associated with the command, if any.","lastModifiedDate":"2022-08-30"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"     * @param ui The Ui associated with the command, if any.","lastModifiedDate":"2022-08-24"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"     * @return The respective Command that should follow from the user\u0027s input.","lastModifiedDate":"2022-08-24"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if error occurs in the Command\u0027s execution.","lastModifiedDate":"2022-08-24"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"    public static Command parse(String command, Storage storage, TaskList taskList, Ui ui) throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"        String[] words \u003d command.split(\" \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"        if (ExitCommand.isCommand(command)) {","lastModifiedDate":"2022-08-22"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"            return new ExitCommand(ui, storage, taskList);","lastModifiedDate":"2022-08-30"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"        } else if (ListCommand.isCommand(command)) {","lastModifiedDate":"2022-08-22"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"            return new ListCommand(taskList);","lastModifiedDate":"2022-08-30"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"        } else if (MarkCommand.isCommand(words[0])) {","lastModifiedDate":"2022-08-22"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"            return new MarkCommand(taskList, storage, words);","lastModifiedDate":"2022-08-30"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"        } else if (UnmarkCommand.isCommand(words[0])) {","lastModifiedDate":"2022-08-22"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"            return new UnmarkCommand(taskList, storage, words);","lastModifiedDate":"2022-08-30"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"        } else if (AddCommand.isCommand(words[0])) {","lastModifiedDate":"2022-08-22"},{"lineNumber":43,"author":{"gitId":"HowSuen"},"content":"            return new AddCommand(taskList, storage, words);","lastModifiedDate":"2022-08-30"},{"lineNumber":44,"author":{"gitId":"HowSuen"},"content":"        } else if (DeleteCommand.isCommand(words[0])) {","lastModifiedDate":"2022-08-22"},{"lineNumber":45,"author":{"gitId":"HowSuen"},"content":"            return new DeleteCommand(taskList, storage, words);","lastModifiedDate":"2022-08-30"},{"lineNumber":46,"author":{"gitId":"HowSuen"},"content":"        } else if (FindCommand.isCommand(words[0])) {","lastModifiedDate":"2022-08-24"},{"lineNumber":47,"author":{"gitId":"HowSuen"},"content":"            return new FindCommand(taskList, words);","lastModifiedDate":"2022-08-30"},{"lineNumber":48,"author":{"gitId":"HowSuen"},"content":"        } else if (HelpCommand.isCommand(command)) {","lastModifiedDate":"2022-08-26"},{"lineNumber":49,"author":{"gitId":"HowSuen"},"content":"            return new HelpCommand();","lastModifiedDate":"2022-08-26"},{"lineNumber":50,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":51,"author":{"gitId":"HowSuen"},"content":"        return new InvalidCommand();","lastModifiedDate":"2022-09-04"},{"lineNumber":52,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":53,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"HowSuen":53}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.task;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2022-08-22"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-22"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"import duke.parser.DateParser;","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":" * Represents a Deadline task with date and time.","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-08-14"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"    private LocalDateTime date;","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"     * Creates a Deadline task with the given description and date.","lastModifiedDate":"2022-08-24"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"     * @param description The description of the Deadline task.","lastModifiedDate":"2022-08-24"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"     * @param date The date which this Deadline task has to be completed by.","lastModifiedDate":"2022-08-24"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"     * @throws DateTimeException if error occurs while interpreting the date/time given.","lastModifiedDate":"2022-08-24"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"    public Deadline(String description, String date) throws DateTimeException {","lastModifiedDate":"2022-08-22"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"        super(description);","lastModifiedDate":"2022-08-14"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"        this.date \u003d DateParser.parseStringToDate(date);","lastModifiedDate":"2022-09-04"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"     * Returns the String representation of this Deadline task.","lastModifiedDate":"2022-08-25"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-25"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"     * @return The String representation of this Deadline task.","lastModifiedDate":"2022-08-25"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-14"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"    public String toString() {","lastModifiedDate":"2022-08-14"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"        return \"[\" + TaskType.D + \"]\" + super.toString() + \" (by: \" + DateParser.parseDateToString(this.date) + \")\";","lastModifiedDate":"2022-09-04"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"     * Returns the String representation of the command to initialise this Deadline task.","lastModifiedDate":"2022-08-25"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-25"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"     * @return The String representation of the command for this Deadline task.","lastModifiedDate":"2022-08-25"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"    public String toCommand() {","lastModifiedDate":"2022-08-21"},{"lineNumber":43,"author":{"gitId":"HowSuen"},"content":"        return TaskType.D + \" | \" + super.toCommand() + \" /by \" + DateParser.parseDateToCommand(this.date);","lastModifiedDate":"2022-09-04"},{"lineNumber":44,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":45,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"HowSuen":45}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.task;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2022-08-22"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-22"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"import duke.parser.DateParser;","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":" * Represents an Event task with date and time.","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"public class Event extends Task {","lastModifiedDate":"2022-08-14"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"    private LocalDateTime date;","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"     * Creates an Event task with the given description and date.","lastModifiedDate":"2022-08-24"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"     * @param description The description of the Event task.","lastModifiedDate":"2022-08-24"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"     * @param date The date which this Event task has to be completed by.","lastModifiedDate":"2022-08-24"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"     * @throws DateTimeException if error occurs while interpreting the date/time given.","lastModifiedDate":"2022-08-24"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"    public Event(String description, String date) throws DateTimeException {","lastModifiedDate":"2022-08-22"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"        super(description);","lastModifiedDate":"2022-08-14"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"        this.date \u003d DateParser.parseStringToDate(date);","lastModifiedDate":"2022-09-04"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"     * Returns the String representation of this Event task.","lastModifiedDate":"2022-08-25"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-25"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"     * @return The String representation of this Event task.","lastModifiedDate":"2022-08-25"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-14"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"    public String toString() {","lastModifiedDate":"2022-08-14"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"        return \"[\" + TaskType.E + \"]\" + super.toString() + \" (at: \" + DateParser.parseDateToString(this.date) + \")\";","lastModifiedDate":"2022-09-04"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"     * Returns the String representation of the command to initialise this Event task.","lastModifiedDate":"2022-08-25"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-25"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"     * @return The String representation of the command for this Event task.","lastModifiedDate":"2022-08-25"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"    public String toCommand() {","lastModifiedDate":"2022-08-21"},{"lineNumber":43,"author":{"gitId":"HowSuen"},"content":"        return TaskType.E + \" | \" + super.toCommand() + \" /at \" + DateParser.parseDateToCommand(this.date);","lastModifiedDate":"2022-09-04"},{"lineNumber":44,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":45,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"HowSuen":45}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.task;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":" * Represents a Task with a description and a completion status.","lastModifiedDate":"2022-08-24"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"public abstract class Task {","lastModifiedDate":"2022-08-14"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"    private String description;","lastModifiedDate":"2022-08-14"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"    private boolean isDone;","lastModifiedDate":"2022-08-15"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"     * Creates a Task with the given description.","lastModifiedDate":"2022-08-24"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"     * @param description The description of the Task.","lastModifiedDate":"2022-08-24"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"    public Task(String description) {","lastModifiedDate":"2022-08-14"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-08-14"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-15"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"     * Sets completion status of this task to true.","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"    public void completeTask() {","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-14"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"     * Prints the completion status and the description of the task.","lastModifiedDate":"2022-08-14"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-14"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"     * @return The completion status and description of the task.","lastModifiedDate":"2022-08-14"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-14"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-14"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"    public String toString() {","lastModifiedDate":"2022-08-14"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"        String status \u003d this.isDone ? \"X\" : \" \";","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"        String line \u003d String.format(\"[%s] %s\", status, this.description);","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"        return line;","lastModifiedDate":"2022-08-14"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"     * Returns the command to be saved in the save file.","lastModifiedDate":"2022-08-21"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"     * @return The String representing the command of this task.","lastModifiedDate":"2022-08-21"},{"lineNumber":43,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":44,"author":{"gitId":"HowSuen"},"content":"    public String toCommand() {","lastModifiedDate":"2022-08-21"},{"lineNumber":45,"author":{"gitId":"HowSuen"},"content":"        String completionStatus \u003d this.isDone ? \"1\" : \"0\";","lastModifiedDate":"2022-08-21"},{"lineNumber":46,"author":{"gitId":"HowSuen"},"content":"        return completionStatus + \" | \" + this.description;","lastModifiedDate":"2022-08-21"},{"lineNumber":47,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":48,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":49,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-14"},{"lineNumber":50,"author":{"gitId":"HowSuen"},"content":"     * Marks the task as completed and prints the task\u0027s description.","lastModifiedDate":"2022-08-14"},{"lineNumber":51,"author":{"gitId":"HowSuen"},"content":"     * If the task was already marked as completed, tell the user.","lastModifiedDate":"2022-08-14"},{"lineNumber":52,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-30"},{"lineNumber":53,"author":{"gitId":"HowSuen"},"content":"     * @return The String message for successfully marking a task.","lastModifiedDate":"2022-08-30"},{"lineNumber":54,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-14"},{"lineNumber":55,"author":{"gitId":"HowSuen"},"content":"    public String mark() {","lastModifiedDate":"2022-08-30"},{"lineNumber":56,"author":{"gitId":"HowSuen"},"content":"        if (this.isDone) {","lastModifiedDate":"2022-08-15"},{"lineNumber":57,"author":{"gitId":"HowSuen"},"content":"            return \"This task has already been marked as done.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":58,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-14"},{"lineNumber":59,"author":{"gitId":"HowSuen"},"content":"        completeTask();","lastModifiedDate":"2022-08-21"},{"lineNumber":60,"author":{"gitId":"HowSuen"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + this;","lastModifiedDate":"2022-09-04"},{"lineNumber":61,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":62,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":63,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-14"},{"lineNumber":64,"author":{"gitId":"HowSuen"},"content":"     * Marks the task as completed and prints the task\u0027s description.","lastModifiedDate":"2022-08-14"},{"lineNumber":65,"author":{"gitId":"HowSuen"},"content":"     * If the task was already marked as completed, tell the user.","lastModifiedDate":"2022-08-14"},{"lineNumber":66,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-30"},{"lineNumber":67,"author":{"gitId":"HowSuen"},"content":"     * @return The String message for successfully marking a task.","lastModifiedDate":"2022-08-30"},{"lineNumber":68,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-14"},{"lineNumber":69,"author":{"gitId":"HowSuen"},"content":"    public String unmark() {","lastModifiedDate":"2022-08-30"},{"lineNumber":70,"author":{"gitId":"HowSuen"},"content":"        if (!this.isDone) {","lastModifiedDate":"2022-08-15"},{"lineNumber":71,"author":{"gitId":"HowSuen"},"content":"            return \"This task has already been marked as not done.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":72,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-14"},{"lineNumber":73,"author":{"gitId":"HowSuen"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-15"},{"lineNumber":74,"author":{"gitId":"HowSuen"},"content":"        return \"OK, I\u0027ve marked this task as not done yet:\\n\" + this;","lastModifiedDate":"2022-09-04"},{"lineNumber":75,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":76,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":77,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":78,"author":{"gitId":"HowSuen"},"content":"     * Checks if the Task\u0027s description contains the given keyword.","lastModifiedDate":"2022-08-24"},{"lineNumber":79,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":80,"author":{"gitId":"HowSuen"},"content":"     * @param keyword The keyword to search for in the task.","lastModifiedDate":"2022-08-24"},{"lineNumber":81,"author":{"gitId":"HowSuen"},"content":"     * @return true if the keyword is in the task\u0027s description, false otherwise.","lastModifiedDate":"2022-08-24"},{"lineNumber":82,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":83,"author":{"gitId":"HowSuen"},"content":"    public boolean hasKeyword(String keyword) {","lastModifiedDate":"2022-08-24"},{"lineNumber":84,"author":{"gitId":"HowSuen"},"content":"        return this.description.contains(keyword);","lastModifiedDate":"2022-08-24"},{"lineNumber":85,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":86,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"HowSuen":86}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.task;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2022-08-22"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-14"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"import java.util.List;","lastModifiedDate":"2022-08-23"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":" * Represents a list of Tasks (ToDo, Deadlines, Events) given by the user.","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"public class TaskList {","lastModifiedDate":"2022-08-30"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"    private final List\u003cTask\u003e taskList;","lastModifiedDate":"2022-08-30"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"     * Creates an empty TaskList.","lastModifiedDate":"2022-08-30"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"    public TaskList() {","lastModifiedDate":"2022-08-30"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-08-30"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"     * Checks if the TaskList is empty or not.","lastModifiedDate":"2022-08-30"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"     * @return true if the list is empty, false otherwise.","lastModifiedDate":"2022-08-24"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"        return this.taskList.size() \u003d\u003d 0;","lastModifiedDate":"2022-08-30"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"     * Adds Task (ToDo, Deadline, Event) to the list of tasks.","lastModifiedDate":"2022-08-25"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"     * @param command The command represented by an array of Strings.","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"     * @param storage The storage associated with this command.","lastModifiedDate":"2022-08-24"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"     * @return The String message for successfully adding a task.","lastModifiedDate":"2022-08-30"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if the add command is invalid.","lastModifiedDate":"2022-08-24"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"    public String addTask(String[] command, Storage storage) throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"        assert command.length \u003e 0 : \"String array command must not be empty.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"        String taskType \u003d command[0];","lastModifiedDate":"2022-08-21"},{"lineNumber":43,"author":{"gitId":"HowSuen"},"content":"        assert taskType.equals(\"todo\") || taskType.equals(\"deadline\") || taskType.equals(\"event\")","lastModifiedDate":"2022-09-04"},{"lineNumber":44,"author":{"gitId":"HowSuen"},"content":"                : \"Add command must be valid, ie. either todo, deadline or event.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":45,"author":{"gitId":"HowSuen"},"content":"        if (taskType.equals(\"todo\")) {","lastModifiedDate":"2022-08-30"},{"lineNumber":46,"author":{"gitId":"HowSuen"},"content":"            return addToDo(command, storage);","lastModifiedDate":"2022-08-30"},{"lineNumber":47,"author":{"gitId":"HowSuen"},"content":"        } else if (taskType.equals(\"deadline\")) {","lastModifiedDate":"2022-08-30"},{"lineNumber":48,"author":{"gitId":"HowSuen"},"content":"            return addDeadline(command, storage);","lastModifiedDate":"2022-08-30"},{"lineNumber":49,"author":{"gitId":"HowSuen"},"content":"        } else if (taskType.equals(\"event\")) {","lastModifiedDate":"2022-08-30"},{"lineNumber":50,"author":{"gitId":"HowSuen"},"content":"            return addEvent(command, storage);","lastModifiedDate":"2022-08-30"},{"lineNumber":51,"author":{"gitId":"HowSuen"},"content":"        } else {","lastModifiedDate":"2022-08-30"},{"lineNumber":52,"author":{"gitId":"HowSuen"},"content":"            return \"\";","lastModifiedDate":"2022-08-30"},{"lineNumber":53,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":54,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":55,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":56,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-14"},{"lineNumber":57,"author":{"gitId":"HowSuen"},"content":"     * Adds To-do task to the list of tasks.","lastModifiedDate":"2022-08-25"},{"lineNumber":58,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-14"},{"lineNumber":59,"author":{"gitId":"HowSuen"},"content":"     * @param command The command represented by an array of Strings.","lastModifiedDate":"2022-08-15"},{"lineNumber":60,"author":{"gitId":"HowSuen"},"content":"     * @param storage The storage associated with this command.","lastModifiedDate":"2022-08-24"},{"lineNumber":61,"author":{"gitId":"HowSuen"},"content":"     * @return The String message for successfully adding a to-do task.","lastModifiedDate":"2022-08-30"},{"lineNumber":62,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if the todo command is invalid.","lastModifiedDate":"2022-08-24"},{"lineNumber":63,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-14"},{"lineNumber":64,"author":{"gitId":"HowSuen"},"content":"    public String addToDo(String[] command, Storage storage) throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":65,"author":{"gitId":"HowSuen"},"content":"        assert command.length \u003e 0 : \"String array command must not be empty.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":66,"author":{"gitId":"HowSuen"},"content":"        if (command.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-15"},{"lineNumber":67,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"Please specify what task you wish to do:\\n\"","lastModifiedDate":"2022-09-04"},{"lineNumber":68,"author":{"gitId":"HowSuen"},"content":"                    + \"todo \u003cdescription\u003e\");","lastModifiedDate":"2022-08-27"},{"lineNumber":69,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-15"},{"lineNumber":70,"author":{"gitId":"HowSuen"},"content":"        assert command[0].equals(\"todo\") : \"command must be todo\";","lastModifiedDate":"2022-09-04"},{"lineNumber":71,"author":{"gitId":"HowSuen"},"content":"        assert command.length \u003d\u003d 2 : \"command must consist of \u0027todo\u0027 and task description only.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":72,"author":{"gitId":"HowSuen"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2022-08-30"},{"lineNumber":73,"author":{"gitId":"HowSuen"},"content":"        result.append(\"Got it! Duke has added this task:\\n\");","lastModifiedDate":"2022-09-04"},{"lineNumber":74,"author":{"gitId":"HowSuen"},"content":"        String description \u003d command[1];","lastModifiedDate":"2022-08-15"},{"lineNumber":75,"author":{"gitId":"HowSuen"},"content":"        Task newTask \u003d new ToDo(description);","lastModifiedDate":"2022-08-14"},{"lineNumber":76,"author":{"gitId":"HowSuen"},"content":"        result.append(newTask);","lastModifiedDate":"2022-08-30"},{"lineNumber":77,"author":{"gitId":"HowSuen"},"content":"        this.taskList.add(newTask);","lastModifiedDate":"2022-08-30"},{"lineNumber":78,"author":{"gitId":"HowSuen"},"content":"        int len \u003d this.taskList.size();","lastModifiedDate":"2022-08-30"},{"lineNumber":79,"author":{"gitId":"HowSuen"},"content":"        String line \u003d String.format(\"\\nNow you have %d task%s in the list.\",","lastModifiedDate":"2022-09-04"},{"lineNumber":80,"author":{"gitId":"HowSuen"},"content":"                len, len !\u003d 1 ? \"s\" : \"\");","lastModifiedDate":"2022-08-15"},{"lineNumber":81,"author":{"gitId":"HowSuen"},"content":"        result.append(line);","lastModifiedDate":"2022-08-30"},{"lineNumber":82,"author":{"gitId":"HowSuen"},"content":"        storage.addTaskToSave(newTask);","lastModifiedDate":"2022-08-21"},{"lineNumber":83,"author":{"gitId":"HowSuen"},"content":"        return result.toString();","lastModifiedDate":"2022-08-30"},{"lineNumber":84,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":85,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":86,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-14"},{"lineNumber":87,"author":{"gitId":"HowSuen"},"content":"     * Adds Deadline task to the list of tasks.","lastModifiedDate":"2022-08-25"},{"lineNumber":88,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-14"},{"lineNumber":89,"author":{"gitId":"HowSuen"},"content":"     * @param command The command represented by an array of Strings.","lastModifiedDate":"2022-08-15"},{"lineNumber":90,"author":{"gitId":"HowSuen"},"content":"     * @param storage The storage associated with this command.","lastModifiedDate":"2022-08-24"},{"lineNumber":91,"author":{"gitId":"HowSuen"},"content":"     * @return The String message for successfully adding a deadline.","lastModifiedDate":"2022-08-30"},{"lineNumber":92,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if the deadline command is invalid.","lastModifiedDate":"2022-08-24"},{"lineNumber":93,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-14"},{"lineNumber":94,"author":{"gitId":"HowSuen"},"content":"    public String addDeadline(String[] command, Storage storage) throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":95,"author":{"gitId":"HowSuen"},"content":"        assert command.length \u003e 0 : \"String array command must not be empty.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":96,"author":{"gitId":"HowSuen"},"content":"        if (command.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-15"},{"lineNumber":97,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"Please specify what task you wish to do:\\n\"","lastModifiedDate":"2022-09-04"},{"lineNumber":98,"author":{"gitId":"HowSuen"},"content":"                    + \"deadline \u003cdescription\u003e /by \u003cdate/time\u003e\");","lastModifiedDate":"2022-08-27"},{"lineNumber":99,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-15"},{"lineNumber":100,"author":{"gitId":"HowSuen"},"content":"        assert command[0].equals(\"deadline\") : \"command must be deadline\";","lastModifiedDate":"2022-09-04"},{"lineNumber":101,"author":{"gitId":"HowSuen"},"content":"        String[] deadline \u003d command[1].split(\" /by \", 2);","lastModifiedDate":"2022-08-15"},{"lineNumber":102,"author":{"gitId":"HowSuen"},"content":"        if (deadline.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-15"},{"lineNumber":103,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"Please specify the description and the date/time of this deadline:\\n\"","lastModifiedDate":"2022-09-04"},{"lineNumber":104,"author":{"gitId":"HowSuen"},"content":"                    + \"deadline \u003cdescription\u003e /by \u003cdate/time\u003e\");","lastModifiedDate":"2022-08-27"},{"lineNumber":105,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-15"},{"lineNumber":106,"author":{"gitId":"HowSuen"},"content":"        assert deadline.length \u003d\u003d 2 : \"command must consist of \u0027deadline\u0027, task description and date/time.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":107,"author":{"gitId":"HowSuen"},"content":"        try {","lastModifiedDate":"2022-08-22"},{"lineNumber":108,"author":{"gitId":"HowSuen"},"content":"            StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2022-08-30"},{"lineNumber":109,"author":{"gitId":"HowSuen"},"content":"            result.append(\"Got it! Duke has added this task:\\n\");","lastModifiedDate":"2022-09-04"},{"lineNumber":110,"author":{"gitId":"HowSuen"},"content":"            Task newTask \u003d new Deadline(deadline[0], deadline[1]);","lastModifiedDate":"2022-08-15"},{"lineNumber":111,"author":{"gitId":"HowSuen"},"content":"            result.append(newTask);","lastModifiedDate":"2022-08-30"},{"lineNumber":112,"author":{"gitId":"HowSuen"},"content":"            this.taskList.add(newTask);","lastModifiedDate":"2022-08-30"},{"lineNumber":113,"author":{"gitId":"HowSuen"},"content":"            int len \u003d this.taskList.size();","lastModifiedDate":"2022-08-30"},{"lineNumber":114,"author":{"gitId":"HowSuen"},"content":"            String line \u003d String.format(\"\\nNow you have %d task%s in the list.\",","lastModifiedDate":"2022-09-04"},{"lineNumber":115,"author":{"gitId":"HowSuen"},"content":"                    len, len !\u003d 1 ? \"s\" : \"\");","lastModifiedDate":"2022-08-15"},{"lineNumber":116,"author":{"gitId":"HowSuen"},"content":"            result.append(line);","lastModifiedDate":"2022-08-30"},{"lineNumber":117,"author":{"gitId":"HowSuen"},"content":"            storage.addTaskToSave(newTask);","lastModifiedDate":"2022-08-21"},{"lineNumber":118,"author":{"gitId":"HowSuen"},"content":"            return result.toString();","lastModifiedDate":"2022-08-30"},{"lineNumber":119,"author":{"gitId":"HowSuen"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2022-08-22"},{"lineNumber":120,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"Uh oh! Please enter your date/time in this format:\\n\"","lastModifiedDate":"2022-09-04"},{"lineNumber":121,"author":{"gitId":"HowSuen"},"content":"                    + \"dd mm yyyy hh:mm(optional)\");","lastModifiedDate":"2022-08-23"},{"lineNumber":122,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":123,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":124,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":125,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-14"},{"lineNumber":126,"author":{"gitId":"HowSuen"},"content":"     * Adds Event task to the list of tasks.","lastModifiedDate":"2022-08-25"},{"lineNumber":127,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-14"},{"lineNumber":128,"author":{"gitId":"HowSuen"},"content":"     * @param command The command represented by an array of Strings.","lastModifiedDate":"2022-08-15"},{"lineNumber":129,"author":{"gitId":"HowSuen"},"content":"     * @param storage The storage associated with this command.","lastModifiedDate":"2022-08-24"},{"lineNumber":130,"author":{"gitId":"HowSuen"},"content":"     * @return The String message for successfully adding an event.","lastModifiedDate":"2022-08-30"},{"lineNumber":131,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if the event command is invalid.","lastModifiedDate":"2022-08-24"},{"lineNumber":132,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-14"},{"lineNumber":133,"author":{"gitId":"HowSuen"},"content":"    public String addEvent(String[] command, Storage storage) throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":134,"author":{"gitId":"HowSuen"},"content":"        assert command.length \u003e 0 : \"String array command must not be empty.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":135,"author":{"gitId":"HowSuen"},"content":"        if (command.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-15"},{"lineNumber":136,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"Please specify what task you wish to do:\\n\"","lastModifiedDate":"2022-09-04"},{"lineNumber":137,"author":{"gitId":"HowSuen"},"content":"                    + \"event \u003cdescription\u003e /at \u003cdate/time\u003e\");","lastModifiedDate":"2022-08-27"},{"lineNumber":138,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-15"},{"lineNumber":139,"author":{"gitId":"HowSuen"},"content":"        assert command[0].equals(\"event\") : \"command must be event\";","lastModifiedDate":"2022-09-04"},{"lineNumber":140,"author":{"gitId":"HowSuen"},"content":"        String[] event \u003d command[1].split(\" /at \", 2);","lastModifiedDate":"2022-08-15"},{"lineNumber":141,"author":{"gitId":"HowSuen"},"content":"        if (event.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-15"},{"lineNumber":142,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"Please specify the description and the date/time of this event:\\n\"","lastModifiedDate":"2022-09-04"},{"lineNumber":143,"author":{"gitId":"HowSuen"},"content":"                    + \"event \u003cdescription\u003e /at \u003cdate/time\u003e\");","lastModifiedDate":"2022-08-27"},{"lineNumber":144,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-15"},{"lineNumber":145,"author":{"gitId":"HowSuen"},"content":"        assert event.length \u003d\u003d 2 : \"command must consist of \u0027event\u0027, task description and date/time.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":146,"author":{"gitId":"HowSuen"},"content":"        try {","lastModifiedDate":"2022-08-22"},{"lineNumber":147,"author":{"gitId":"HowSuen"},"content":"            StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2022-08-30"},{"lineNumber":148,"author":{"gitId":"HowSuen"},"content":"            result.append(\"Got it! Duke has added this task:\\n\");","lastModifiedDate":"2022-09-04"},{"lineNumber":149,"author":{"gitId":"HowSuen"},"content":"            Task newTask \u003d new Event(event[0], event[1]);","lastModifiedDate":"2022-08-15"},{"lineNumber":150,"author":{"gitId":"HowSuen"},"content":"            result.append(newTask);","lastModifiedDate":"2022-08-30"},{"lineNumber":151,"author":{"gitId":"HowSuen"},"content":"            this.taskList.add(newTask);","lastModifiedDate":"2022-08-30"},{"lineNumber":152,"author":{"gitId":"HowSuen"},"content":"            int len \u003d this.taskList.size();","lastModifiedDate":"2022-08-30"},{"lineNumber":153,"author":{"gitId":"HowSuen"},"content":"            String line \u003d String.format(\"\\nNow you have %d task%s in the list.\",","lastModifiedDate":"2022-09-04"},{"lineNumber":154,"author":{"gitId":"HowSuen"},"content":"                    len, len !\u003d 1 ? \"s\" : \"\");","lastModifiedDate":"2022-08-15"},{"lineNumber":155,"author":{"gitId":"HowSuen"},"content":"            result.append(line);","lastModifiedDate":"2022-08-30"},{"lineNumber":156,"author":{"gitId":"HowSuen"},"content":"            storage.addTaskToSave(newTask);","lastModifiedDate":"2022-08-21"},{"lineNumber":157,"author":{"gitId":"HowSuen"},"content":"            return result.toString();","lastModifiedDate":"2022-08-30"},{"lineNumber":158,"author":{"gitId":"HowSuen"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2022-08-22"},{"lineNumber":159,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"Uh oh! Please enter your date/time in this format:\\n\"","lastModifiedDate":"2022-09-04"},{"lineNumber":160,"author":{"gitId":"HowSuen"},"content":"                    + \"dd mm yyyy hh:mm(optional)\");","lastModifiedDate":"2022-08-23"},{"lineNumber":161,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":162,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":163,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":164,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-14"},{"lineNumber":165,"author":{"gitId":"HowSuen"},"content":"     * Prints out the list of the history of tasks","lastModifiedDate":"2022-08-14"},{"lineNumber":166,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-30"},{"lineNumber":167,"author":{"gitId":"HowSuen"},"content":"     * @return The String message for successfully listing all the tasks.","lastModifiedDate":"2022-08-30"},{"lineNumber":168,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-14"},{"lineNumber":169,"author":{"gitId":"HowSuen"},"content":"    public String listTasks() {","lastModifiedDate":"2022-08-30"},{"lineNumber":170,"author":{"gitId":"HowSuen"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2022-08-30"},{"lineNumber":171,"author":{"gitId":"HowSuen"},"content":"        result.append(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2022-09-04"},{"lineNumber":172,"author":{"gitId":"HowSuen"},"content":"        if (isEmpty()) {","lastModifiedDate":"2022-08-21"},{"lineNumber":173,"author":{"gitId":"HowSuen"},"content":"            return result.toString() + \"*No tasks! ^_^*\";","lastModifiedDate":"2022-08-30"},{"lineNumber":174,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-14"},{"lineNumber":175,"author":{"gitId":"HowSuen"},"content":"        assert this.taskList.size() \u003e 0 : \"TaskList should not be empty here.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":176,"author":{"gitId":"HowSuen"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2022-08-30"},{"lineNumber":177,"author":{"gitId":"HowSuen"},"content":"            String line \u003d String.format(\"%d. %s\\n\", i + 1, this.taskList.get(i));","lastModifiedDate":"2022-08-30"},{"lineNumber":178,"author":{"gitId":"HowSuen"},"content":"            result.append(line);","lastModifiedDate":"2022-08-30"},{"lineNumber":179,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-14"},{"lineNumber":180,"author":{"gitId":"HowSuen"},"content":"        return result.toString();","lastModifiedDate":"2022-08-30"},{"lineNumber":181,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":182,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":183,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-14"},{"lineNumber":184,"author":{"gitId":"HowSuen"},"content":"     * Marks the task of the given id as done.","lastModifiedDate":"2022-08-25"},{"lineNumber":185,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-14"},{"lineNumber":186,"author":{"gitId":"HowSuen"},"content":"     * @param command The command represented by an array of Strings.","lastModifiedDate":"2022-08-15"},{"lineNumber":187,"author":{"gitId":"HowSuen"},"content":"     * @param storage The storage associated with this command.","lastModifiedDate":"2022-08-24"},{"lineNumber":188,"author":{"gitId":"HowSuen"},"content":"     * @return The String message for successfully marking a task.","lastModifiedDate":"2022-08-30"},{"lineNumber":189,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if the mark command is invalid.","lastModifiedDate":"2022-08-24"},{"lineNumber":190,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-14"},{"lineNumber":191,"author":{"gitId":"HowSuen"},"content":"    public String markTask(String[] command, Storage storage) throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":192,"author":{"gitId":"HowSuen"},"content":"        assert command.length \u003e 0 : \"String array command must not be empty.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":193,"author":{"gitId":"HowSuen"},"content":"        if (command.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-15"},{"lineNumber":194,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"Please specify the task to mark by its id:\\n\"","lastModifiedDate":"2022-09-04"},{"lineNumber":195,"author":{"gitId":"HowSuen"},"content":"                    + \"mark \u003cid\u003e\");","lastModifiedDate":"2022-08-23"},{"lineNumber":196,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-15"},{"lineNumber":197,"author":{"gitId":"HowSuen"},"content":"        assert command[0].equals(\"mark\") : \"command must be mark\";","lastModifiedDate":"2022-09-04"},{"lineNumber":198,"author":{"gitId":"HowSuen"},"content":"        try {","lastModifiedDate":"2022-08-15"},{"lineNumber":199,"author":{"gitId":"HowSuen"},"content":"            int id \u003d Integer.parseInt(command[1]);","lastModifiedDate":"2022-08-15"},{"lineNumber":200,"author":{"gitId":"HowSuen"},"content":"            int len \u003d this.taskList.size();","lastModifiedDate":"2022-08-30"},{"lineNumber":201,"author":{"gitId":"HowSuen"},"content":"            if (id \u003c\u003d 0 || id \u003e len) {","lastModifiedDate":"2022-08-14"},{"lineNumber":202,"author":{"gitId":"HowSuen"},"content":"                throw new DukeException(\"Invalid task id!\");","lastModifiedDate":"2022-09-04"},{"lineNumber":203,"author":{"gitId":"HowSuen"},"content":"            }","lastModifiedDate":"2022-08-14"},{"lineNumber":204,"author":{"gitId":"HowSuen"},"content":"            storage.markTaskInSave(id - 1);","lastModifiedDate":"2022-08-21"},{"lineNumber":205,"author":{"gitId":"HowSuen"},"content":"            return this.taskList.get(id - 1).mark();","lastModifiedDate":"2022-08-30"},{"lineNumber":206,"author":{"gitId":"HowSuen"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-08-15"},{"lineNumber":207,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"Please specify the task to mark by its integer id:\\n\"","lastModifiedDate":"2022-09-04"},{"lineNumber":208,"author":{"gitId":"HowSuen"},"content":"                    + \"mark \u003cid\u003e\");","lastModifiedDate":"2022-08-23"},{"lineNumber":209,"author":{"gitId":"HowSuen"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-08-21"},{"lineNumber":210,"author":{"gitId":"HowSuen"},"content":"            throw e;","lastModifiedDate":"2022-08-21"},{"lineNumber":211,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-15"},{"lineNumber":212,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":213,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":214,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-14"},{"lineNumber":215,"author":{"gitId":"HowSuen"},"content":"     * Marks the task of the given id as not done.","lastModifiedDate":"2022-08-25"},{"lineNumber":216,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-14"},{"lineNumber":217,"author":{"gitId":"HowSuen"},"content":"     * @param command The command represented by an array of Strings.","lastModifiedDate":"2022-08-15"},{"lineNumber":218,"author":{"gitId":"HowSuen"},"content":"     * @param storage The storage associated with this command.","lastModifiedDate":"2022-08-24"},{"lineNumber":219,"author":{"gitId":"HowSuen"},"content":"     * @return The String message for successfully unmarking a task.","lastModifiedDate":"2022-08-30"},{"lineNumber":220,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if the unmark command is invalid.","lastModifiedDate":"2022-08-24"},{"lineNumber":221,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-14"},{"lineNumber":222,"author":{"gitId":"HowSuen"},"content":"    public String unmarkTask(String[] command, Storage storage) throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":223,"author":{"gitId":"HowSuen"},"content":"        assert command.length \u003e 0 : \"String array command must not be empty.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":224,"author":{"gitId":"HowSuen"},"content":"        if (command.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-15"},{"lineNumber":225,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"Please specify the task to unmark by its id:\\n\"","lastModifiedDate":"2022-09-04"},{"lineNumber":226,"author":{"gitId":"HowSuen"},"content":"                    + \"unmark \u003cid\u003e\");","lastModifiedDate":"2022-08-23"},{"lineNumber":227,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-15"},{"lineNumber":228,"author":{"gitId":"HowSuen"},"content":"        assert command[0].equals(\"unmark\") : \"command must be unmark\";","lastModifiedDate":"2022-09-04"},{"lineNumber":229,"author":{"gitId":"HowSuen"},"content":"        try {","lastModifiedDate":"2022-08-15"},{"lineNumber":230,"author":{"gitId":"HowSuen"},"content":"            int id \u003d Integer.parseInt(command[1]);","lastModifiedDate":"2022-08-15"},{"lineNumber":231,"author":{"gitId":"HowSuen"},"content":"            int len \u003d this.taskList.size();","lastModifiedDate":"2022-08-30"},{"lineNumber":232,"author":{"gitId":"HowSuen"},"content":"            if (id \u003c\u003d 0 || id \u003e len) {","lastModifiedDate":"2022-08-14"},{"lineNumber":233,"author":{"gitId":"HowSuen"},"content":"                throw new DukeException(\"Invalid task id!\");","lastModifiedDate":"2022-09-04"},{"lineNumber":234,"author":{"gitId":"HowSuen"},"content":"            }","lastModifiedDate":"2022-08-14"},{"lineNumber":235,"author":{"gitId":"HowSuen"},"content":"            storage.unmarkTaskInSave(id - 1);","lastModifiedDate":"2022-08-21"},{"lineNumber":236,"author":{"gitId":"HowSuen"},"content":"            return this.taskList.get(id - 1).unmark();","lastModifiedDate":"2022-08-30"},{"lineNumber":237,"author":{"gitId":"HowSuen"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-08-15"},{"lineNumber":238,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"Please specify the task to unmark by its integer id:\\n\"","lastModifiedDate":"2022-09-04"},{"lineNumber":239,"author":{"gitId":"HowSuen"},"content":"                    + \"mark \u003cid\u003e\");","lastModifiedDate":"2022-08-23"},{"lineNumber":240,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-15"},{"lineNumber":241,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-15"},{"lineNumber":242,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-15"},{"lineNumber":243,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-15"},{"lineNumber":244,"author":{"gitId":"HowSuen"},"content":"     * Deletes the task of the given id from the list.","lastModifiedDate":"2022-08-25"},{"lineNumber":245,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-15"},{"lineNumber":246,"author":{"gitId":"HowSuen"},"content":"     * @param command The command represented by an array of Strings.","lastModifiedDate":"2022-08-15"},{"lineNumber":247,"author":{"gitId":"HowSuen"},"content":"     * @param storage The storage associated with this command.","lastModifiedDate":"2022-08-24"},{"lineNumber":248,"author":{"gitId":"HowSuen"},"content":"     * @return The String message for successfully deleting a task.","lastModifiedDate":"2022-08-30"},{"lineNumber":249,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if the delete command is invalid.","lastModifiedDate":"2022-08-24"},{"lineNumber":250,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-15"},{"lineNumber":251,"author":{"gitId":"HowSuen"},"content":"    public String deleteTask(String[] command, Storage storage) throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":252,"author":{"gitId":"HowSuen"},"content":"        assert command.length \u003e 0 : \"String array command must not be empty.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":253,"author":{"gitId":"HowSuen"},"content":"        if (command.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-15"},{"lineNumber":254,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"Please specify the task to be deleted by its id:\\n\"","lastModifiedDate":"2022-09-04"},{"lineNumber":255,"author":{"gitId":"HowSuen"},"content":"                    + \"delete \u003cid\u003e\");","lastModifiedDate":"2022-08-23"},{"lineNumber":256,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-15"},{"lineNumber":257,"author":{"gitId":"HowSuen"},"content":"        assert command[0].equals(\"delete\") : \"command must be delete\";","lastModifiedDate":"2022-09-04"},{"lineNumber":258,"author":{"gitId":"HowSuen"},"content":"        try {","lastModifiedDate":"2022-08-15"},{"lineNumber":259,"author":{"gitId":"HowSuen"},"content":"            int id \u003d Integer.parseInt(command[1]);","lastModifiedDate":"2022-08-15"},{"lineNumber":260,"author":{"gitId":"HowSuen"},"content":"            int len \u003d this.taskList.size();","lastModifiedDate":"2022-08-30"},{"lineNumber":261,"author":{"gitId":"HowSuen"},"content":"            if (len \u003d\u003d 0) {","lastModifiedDate":"2022-09-04"},{"lineNumber":262,"author":{"gitId":"HowSuen"},"content":"                throw new DukeException(\"Your task list is empty!\");","lastModifiedDate":"2022-09-04"},{"lineNumber":263,"author":{"gitId":"HowSuen"},"content":"            }","lastModifiedDate":"2022-09-04"},{"lineNumber":264,"author":{"gitId":"HowSuen"},"content":"            if (id \u003c\u003d 0 || id \u003e len) {","lastModifiedDate":"2022-08-15"},{"lineNumber":265,"author":{"gitId":"HowSuen"},"content":"                throw new DukeException(\"Invalid task id!\");","lastModifiedDate":"2022-09-04"},{"lineNumber":266,"author":{"gitId":"HowSuen"},"content":"            }","lastModifiedDate":"2022-08-15"},{"lineNumber":267,"author":{"gitId":"HowSuen"},"content":"            StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2022-08-30"},{"lineNumber":268,"author":{"gitId":"HowSuen"},"content":"            result.append(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2022-09-04"},{"lineNumber":269,"author":{"gitId":"HowSuen"},"content":"            result.append(this.taskList.get(id - 1));","lastModifiedDate":"2022-08-30"},{"lineNumber":270,"author":{"gitId":"HowSuen"},"content":"            this.taskList.remove(id - 1);","lastModifiedDate":"2022-08-30"},{"lineNumber":271,"author":{"gitId":"HowSuen"},"content":"            String line \u003d String.format(\"Now you have %d task%s in the list.\",","lastModifiedDate":"2022-09-04"},{"lineNumber":272,"author":{"gitId":"HowSuen"},"content":"                    len - 1, len - 1 !\u003d 1 ? \"s\" : \"\");","lastModifiedDate":"2022-08-15"},{"lineNumber":273,"author":{"gitId":"HowSuen"},"content":"            result.append(line);","lastModifiedDate":"2022-08-30"},{"lineNumber":274,"author":{"gitId":"HowSuen"},"content":"            storage.deleteTaskFromSave(id - 1);","lastModifiedDate":"2022-08-21"},{"lineNumber":275,"author":{"gitId":"HowSuen"},"content":"            return result.toString();","lastModifiedDate":"2022-08-30"},{"lineNumber":276,"author":{"gitId":"HowSuen"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-08-15"},{"lineNumber":277,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"Please specify the task to delete by its integer id:\\n\"","lastModifiedDate":"2022-09-04"},{"lineNumber":278,"author":{"gitId":"HowSuen"},"content":"                    + \"mark \u003cid\u003e\");","lastModifiedDate":"2022-08-23"},{"lineNumber":279,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-15"},{"lineNumber":280,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":281,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":282,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":283,"author":{"gitId":"HowSuen"},"content":"     * Converts the tasks in the current tasks list to StringBuilder","lastModifiedDate":"2022-08-21"},{"lineNumber":284,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":285,"author":{"gitId":"HowSuen"},"content":"     * @return The StringBuilder of all the tasks in the list.","lastModifiedDate":"2022-08-21"},{"lineNumber":286,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":287,"author":{"gitId":"HowSuen"},"content":"    public StringBuilder toStringBuilder() {","lastModifiedDate":"2022-08-21"},{"lineNumber":288,"author":{"gitId":"HowSuen"},"content":"        StringBuilder stringBuilder \u003d this.taskList.stream()","lastModifiedDate":"2022-09-04"},{"lineNumber":289,"author":{"gitId":"HowSuen"},"content":"                .map(s -\u003e s.toCommand() + \"\\n\")","lastModifiedDate":"2022-09-04"},{"lineNumber":290,"author":{"gitId":"HowSuen"},"content":"                .collect(StringBuilder::new,","lastModifiedDate":"2022-09-04"},{"lineNumber":291,"author":{"gitId":"HowSuen"},"content":"                        StringBuilder::append,","lastModifiedDate":"2022-09-04"},{"lineNumber":292,"author":{"gitId":"HowSuen"},"content":"                        StringBuilder::append);","lastModifiedDate":"2022-09-04"},{"lineNumber":293,"author":{"gitId":"HowSuen"},"content":"        return stringBuilder;","lastModifiedDate":"2022-09-04"},{"lineNumber":294,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":295,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":296,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":297,"author":{"gitId":"HowSuen"},"content":"     * Loads the given task into the task list.","lastModifiedDate":"2022-08-25"},{"lineNumber":298,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-21"},{"lineNumber":299,"author":{"gitId":"HowSuen"},"content":"     * @param line The String representing the task from the save file.","lastModifiedDate":"2022-08-21"},{"lineNumber":300,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":301,"author":{"gitId":"HowSuen"},"content":"    public void loadFromSave(String line) {","lastModifiedDate":"2022-08-21"},{"lineNumber":302,"author":{"gitId":"HowSuen"},"content":"        String[] command \u003d line.split(\" \\\\| \", 3);","lastModifiedDate":"2022-08-21"},{"lineNumber":303,"author":{"gitId":"HowSuen"},"content":"        assert command.length \u003d\u003d 3 : \"command from save file is not valid.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":304,"author":{"gitId":"HowSuen"},"content":"        String taskType \u003d command[0];","lastModifiedDate":"2022-08-21"},{"lineNumber":305,"author":{"gitId":"HowSuen"},"content":"        String completionStatus \u003d command[1];","lastModifiedDate":"2022-08-21"},{"lineNumber":306,"author":{"gitId":"HowSuen"},"content":"        String details \u003d command[2];","lastModifiedDate":"2022-08-21"},{"lineNumber":307,"author":{"gitId":"HowSuen"},"content":"        switch (taskType) {","lastModifiedDate":"2022-08-21"},{"lineNumber":308,"author":{"gitId":"HowSuen"},"content":"        case \"T\":","lastModifiedDate":"2022-08-21"},{"lineNumber":309,"author":{"gitId":"HowSuen"},"content":"            Task todo \u003d new ToDo(details);","lastModifiedDate":"2022-08-21"},{"lineNumber":310,"author":{"gitId":"HowSuen"},"content":"            this.taskList.add(todo);","lastModifiedDate":"2022-08-30"},{"lineNumber":311,"author":{"gitId":"HowSuen"},"content":"            if (completionStatus.equals(\"1\")) {","lastModifiedDate":"2022-08-21"},{"lineNumber":312,"author":{"gitId":"HowSuen"},"content":"                todo.completeTask();","lastModifiedDate":"2022-08-21"},{"lineNumber":313,"author":{"gitId":"HowSuen"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":314,"author":{"gitId":"HowSuen"},"content":"            break;","lastModifiedDate":"2022-08-21"},{"lineNumber":315,"author":{"gitId":"HowSuen"},"content":"        case \"D\":","lastModifiedDate":"2022-08-21"},{"lineNumber":316,"author":{"gitId":"HowSuen"},"content":"            String[] deadlineDate \u003d details.split(\" /by \", 2);","lastModifiedDate":"2022-08-21"},{"lineNumber":317,"author":{"gitId":"HowSuen"},"content":"            Task deadline \u003d new Deadline(deadlineDate[0], deadlineDate[1]);","lastModifiedDate":"2022-08-21"},{"lineNumber":318,"author":{"gitId":"HowSuen"},"content":"            this.taskList.add(deadline);","lastModifiedDate":"2022-08-30"},{"lineNumber":319,"author":{"gitId":"HowSuen"},"content":"            if (completionStatus.equals(\"1\")) {","lastModifiedDate":"2022-08-21"},{"lineNumber":320,"author":{"gitId":"HowSuen"},"content":"                deadline.completeTask();","lastModifiedDate":"2022-08-21"},{"lineNumber":321,"author":{"gitId":"HowSuen"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":322,"author":{"gitId":"HowSuen"},"content":"            break;","lastModifiedDate":"2022-08-21"},{"lineNumber":323,"author":{"gitId":"HowSuen"},"content":"        case \"E\":","lastModifiedDate":"2022-08-21"},{"lineNumber":324,"author":{"gitId":"HowSuen"},"content":"            String[] eventDate \u003d details.split(\" /at \", 2);","lastModifiedDate":"2022-08-21"},{"lineNumber":325,"author":{"gitId":"HowSuen"},"content":"            Task event \u003d new Event(eventDate[0], eventDate[1]);","lastModifiedDate":"2022-08-21"},{"lineNumber":326,"author":{"gitId":"HowSuen"},"content":"            this.taskList.add(event);","lastModifiedDate":"2022-08-30"},{"lineNumber":327,"author":{"gitId":"HowSuen"},"content":"            if (completionStatus.equals(\"1\")) {","lastModifiedDate":"2022-08-21"},{"lineNumber":328,"author":{"gitId":"HowSuen"},"content":"                event.completeTask();","lastModifiedDate":"2022-08-21"},{"lineNumber":329,"author":{"gitId":"HowSuen"},"content":"            }","lastModifiedDate":"2022-08-21"},{"lineNumber":330,"author":{"gitId":"HowSuen"},"content":"            break;","lastModifiedDate":"2022-08-21"},{"lineNumber":331,"author":{"gitId":"HowSuen"},"content":"        default:","lastModifiedDate":"2022-08-23"},{"lineNumber":332,"author":{"gitId":"HowSuen"},"content":"            break;","lastModifiedDate":"2022-08-23"},{"lineNumber":333,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":334,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":335,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":336,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":337,"author":{"gitId":"HowSuen"},"content":"     * Searches for and lists tasks that contain the keyword in their description.","lastModifiedDate":"2022-08-24"},{"lineNumber":338,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":339,"author":{"gitId":"HowSuen"},"content":"     * @param command The command represented by an array of Strings.","lastModifiedDate":"2022-08-24"},{"lineNumber":340,"author":{"gitId":"HowSuen"},"content":"     * @return The String message for successfully finding a task.","lastModifiedDate":"2022-08-30"},{"lineNumber":341,"author":{"gitId":"HowSuen"},"content":"     * @throws DukeException if the find command is invalid.","lastModifiedDate":"2022-08-24"},{"lineNumber":342,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":343,"author":{"gitId":"HowSuen"},"content":"    public String findTask(String[] command) throws DukeException {","lastModifiedDate":"2022-08-30"},{"lineNumber":344,"author":{"gitId":"HowSuen"},"content":"        assert command.length \u003e 0 : \"String array command must not be empty.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":345,"author":{"gitId":"HowSuen"},"content":"        if (command.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-24"},{"lineNumber":346,"author":{"gitId":"HowSuen"},"content":"            throw new DukeException(\"Please provide a keyword to search for the task:\\n\"","lastModifiedDate":"2022-09-04"},{"lineNumber":347,"author":{"gitId":"HowSuen"},"content":"                    + \"find \u003ckeyword\u003e\");","lastModifiedDate":"2022-08-24"},{"lineNumber":348,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-24"},{"lineNumber":349,"author":{"gitId":"HowSuen"},"content":"        assert command[0].equals(\"find\") : \"command must be find.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":350,"author":{"gitId":"HowSuen"},"content":"        String keyword \u003d command[1];","lastModifiedDate":"2022-08-24"},{"lineNumber":351,"author":{"gitId":"HowSuen"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2022-08-30"},{"lineNumber":352,"author":{"gitId":"HowSuen"},"content":"        int count \u003d 0;","lastModifiedDate":"2022-08-24"},{"lineNumber":353,"author":{"gitId":"HowSuen"},"content":"        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {","lastModifiedDate":"2022-08-30"},{"lineNumber":354,"author":{"gitId":"HowSuen"},"content":"            Task task \u003d this.taskList.get(i);","lastModifiedDate":"2022-08-30"},{"lineNumber":355,"author":{"gitId":"HowSuen"},"content":"            if (task.hasKeyword(keyword)) {","lastModifiedDate":"2022-08-24"},{"lineNumber":356,"author":{"gitId":"HowSuen"},"content":"                count++;","lastModifiedDate":"2022-08-24"},{"lineNumber":357,"author":{"gitId":"HowSuen"},"content":"                String line \u003d String.format(\"%d. %s\\n\", count, task);","lastModifiedDate":"2022-08-24"},{"lineNumber":358,"author":{"gitId":"HowSuen"},"content":"                result.append(line);","lastModifiedDate":"2022-08-30"},{"lineNumber":359,"author":{"gitId":"HowSuen"},"content":"            }","lastModifiedDate":"2022-08-24"},{"lineNumber":360,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-24"},{"lineNumber":361,"author":{"gitId":"HowSuen"},"content":"        if (count \u003e 0) {","lastModifiedDate":"2022-08-24"},{"lineNumber":362,"author":{"gitId":"HowSuen"},"content":"            return \"Here are the matching tasks in your list:\" + result.toString();","lastModifiedDate":"2022-09-04"},{"lineNumber":363,"author":{"gitId":"HowSuen"},"content":"        } else {","lastModifiedDate":"2022-08-24"},{"lineNumber":364,"author":{"gitId":"HowSuen"},"content":"            return \"Hm...I found no matching task in your list.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":365,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-24"},{"lineNumber":366,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":367,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"HowSuen":367}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.task;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":" * Represents the single alphabet indicating the type of the Task.","lastModifiedDate":"2022-08-24"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"public enum TaskType {","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"    T, // ToDo","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"    D, // Deadline","lastModifiedDate":"2022-08-24"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"    E // Event","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"HowSuen":10}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.task;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-24"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":" * Represents a ToDo task.","lastModifiedDate":"2022-08-24"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-24"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-08-14"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-24"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"     * Creates a ToDo task with the given description.","lastModifiedDate":"2022-08-24"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-24"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"     * @param description The description of this ToDo task.","lastModifiedDate":"2022-08-24"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-24"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"    public ToDo(String description) {","lastModifiedDate":"2022-08-14"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"        super(description);","lastModifiedDate":"2022-08-14"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"     * Returns the String representation of this ToDo task.","lastModifiedDate":"2022-08-25"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-25"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"     * @return The String representation of this ToDo task.","lastModifiedDate":"2022-08-25"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-14"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"    public String toString() {","lastModifiedDate":"2022-08-14"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"        return \"[\" + TaskType.T + \"]\" + super.toString();","lastModifiedDate":"2022-08-18"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-25"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"     * Returns the String representation of the command to initialise this ToDo task.","lastModifiedDate":"2022-08-25"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-25"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"     * @return The String representation of the command for this ToDo task.","lastModifiedDate":"2022-08-25"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-25"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"    public String toCommand() {","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"        return TaskType.T + \" | \" + super.toCommand();","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-14"}],"authorContributionMap":{"HowSuen":35}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.ui;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"import java.util.Collections;","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-08-30"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-08-30"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-08-30"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-08-30"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2022-08-30"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"import javafx.scene.Node;","lastModifiedDate":"2022-08-30"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-08-30"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-08-30"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2022-08-30"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-08-30"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-30"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":" * @@author HowSuen-reused","lastModifiedDate":"2022-08-30"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":" * Reused from https://se-education.org/guides/tutorials/javaFxPart4.html","lastModifiedDate":"2022-08-30"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":" *","lastModifiedDate":"2022-08-30"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2022-08-30"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2022-08-30"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":" * containing text from the speaker.","lastModifiedDate":"2022-08-30"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-30"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2022-08-30"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"    @FXML","lastModifiedDate":"2022-08-30"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"    private Label dialog;","lastModifiedDate":"2022-08-30"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"    @FXML","lastModifiedDate":"2022-08-30"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2022-08-30"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2022-08-30"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"        try {","lastModifiedDate":"2022-08-30"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2022-08-30"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-08-30"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-08-30"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-08-30"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-30"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-08-30"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-30"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"        this.dialog.setText(text);","lastModifiedDate":"2022-08-30"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2022-08-30"},{"lineNumber":43,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":44,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":45,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-30"},{"lineNumber":46,"author":{"gitId":"HowSuen"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2022-08-30"},{"lineNumber":47,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-30"},{"lineNumber":48,"author":{"gitId":"HowSuen"},"content":"    private void flip() {","lastModifiedDate":"2022-08-30"},{"lineNumber":49,"author":{"gitId":"HowSuen"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2022-08-30"},{"lineNumber":50,"author":{"gitId":"HowSuen"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2022-08-30"},{"lineNumber":51,"author":{"gitId":"HowSuen"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2022-08-30"},{"lineNumber":52,"author":{"gitId":"HowSuen"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2022-08-30"},{"lineNumber":53,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":54,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":55,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-30"},{"lineNumber":56,"author":{"gitId":"HowSuen"},"content":"     * Returns the user\u0027s dialog box.","lastModifiedDate":"2022-08-30"},{"lineNumber":57,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-30"},{"lineNumber":58,"author":{"gitId":"HowSuen"},"content":"     * @param text The text message associated with the user\u0027s dialog.","lastModifiedDate":"2022-08-30"},{"lineNumber":59,"author":{"gitId":"HowSuen"},"content":"     * @param img The image of the user.","lastModifiedDate":"2022-08-30"},{"lineNumber":60,"author":{"gitId":"HowSuen"},"content":"     * @return The DialogBox of the user\u0027s input.","lastModifiedDate":"2022-08-30"},{"lineNumber":61,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-30"},{"lineNumber":62,"author":{"gitId":"HowSuen"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2022-08-30"},{"lineNumber":63,"author":{"gitId":"HowSuen"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2022-08-30"},{"lineNumber":64,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":65,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":66,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-30"},{"lineNumber":67,"author":{"gitId":"HowSuen"},"content":"     * Returns Duke\u0027s dialog box.","lastModifiedDate":"2022-08-30"},{"lineNumber":68,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-30"},{"lineNumber":69,"author":{"gitId":"HowSuen"},"content":"     * @param text The text message associated with Duke\u0027s response.","lastModifiedDate":"2022-08-30"},{"lineNumber":70,"author":{"gitId":"HowSuen"},"content":"     * @param img Duke\u0027s image.","lastModifiedDate":"2022-08-30"},{"lineNumber":71,"author":{"gitId":"HowSuen"},"content":"     * @return The DialogBox of Duke\u0027s response.","lastModifiedDate":"2022-08-30"},{"lineNumber":72,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-30"},{"lineNumber":73,"author":{"gitId":"HowSuen"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2022-08-30"},{"lineNumber":74,"author":{"gitId":"HowSuen"},"content":"        var dialogBox \u003d new DialogBox(text, img);","lastModifiedDate":"2022-08-30"},{"lineNumber":75,"author":{"gitId":"HowSuen"},"content":"        dialogBox.flip();","lastModifiedDate":"2022-08-30"},{"lineNumber":76,"author":{"gitId":"HowSuen"},"content":"        return dialogBox;","lastModifiedDate":"2022-08-30"},{"lineNumber":77,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    // @@author","lastModifiedDate":"2022-08-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-08-30"}],"authorContributionMap":{"-":2,"HowSuen":77}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke.ui;","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import duke.Duke;","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2022-08-30"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-08-30"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-08-30"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-08-30"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-08-30"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"/**","lastModifiedDate":"2022-08-30"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":" * @@author HowSuen-reused","lastModifiedDate":"2022-08-30"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":" * Reused from https://se-education.org/guides/tutorials/javaFxPart4.html","lastModifiedDate":"2022-08-30"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":" *","lastModifiedDate":"2022-08-30"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2022-08-30"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":" */","lastModifiedDate":"2022-08-30"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2022-08-30"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"    @FXML","lastModifiedDate":"2022-08-30"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2022-08-30"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"    @FXML","lastModifiedDate":"2022-08-30"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2022-08-30"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"    @FXML","lastModifiedDate":"2022-08-30"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"    private TextField userInput;","lastModifiedDate":"2022-08-30"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"    @FXML","lastModifiedDate":"2022-08-30"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"    private Button sendButton;","lastModifiedDate":"2022-08-30"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"    private Duke duke;","lastModifiedDate":"2022-08-30"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));","lastModifiedDate":"2022-08-30"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));","lastModifiedDate":"2022-08-30"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"     * Initialises the main window.","lastModifiedDate":"2022-08-31"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"    @FXML","lastModifiedDate":"2022-08-30"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"    public void initialize() {","lastModifiedDate":"2022-08-30"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2022-08-30"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"        String greetingMessage \u003d \"Hello, I\u0027m Duke!\\n\" + \"What can I do for you?\\n\";","lastModifiedDate":"2022-09-04"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"        this.dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-08-31"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"                DialogBox.getDukeDialog(greetingMessage, this.dukeImage));","lastModifiedDate":"2022-08-31"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":43,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":44,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-31"},{"lineNumber":45,"author":{"gitId":"HowSuen"},"content":"     * Sets the duke of this MainWindow as the Duke object given.","lastModifiedDate":"2022-08-31"},{"lineNumber":46,"author":{"gitId":"HowSuen"},"content":"     *","lastModifiedDate":"2022-08-31"},{"lineNumber":47,"author":{"gitId":"HowSuen"},"content":"     * @param d The given Duke object.","lastModifiedDate":"2022-08-31"},{"lineNumber":48,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-31"},{"lineNumber":49,"author":{"gitId":"HowSuen"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2022-08-30"},{"lineNumber":50,"author":{"gitId":"HowSuen"},"content":"        this.duke \u003d d;","lastModifiedDate":"2022-08-31"},{"lineNumber":51,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":52,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":53,"author":{"gitId":"HowSuen"},"content":"    /**","lastModifiedDate":"2022-08-30"},{"lineNumber":54,"author":{"gitId":"HowSuen"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2022-08-30"},{"lineNumber":55,"author":{"gitId":"HowSuen"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2022-08-30"},{"lineNumber":56,"author":{"gitId":"HowSuen"},"content":"     */","lastModifiedDate":"2022-08-30"},{"lineNumber":57,"author":{"gitId":"HowSuen"},"content":"    @FXML","lastModifiedDate":"2022-08-30"},{"lineNumber":58,"author":{"gitId":"HowSuen"},"content":"    private void handleUserInput() {","lastModifiedDate":"2022-08-30"},{"lineNumber":59,"author":{"gitId":"HowSuen"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2022-08-30"},{"lineNumber":60,"author":{"gitId":"HowSuen"},"content":"        String response \u003d this.duke.getResponse(input);","lastModifiedDate":"2022-08-31"},{"lineNumber":61,"author":{"gitId":"HowSuen"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-08-30"},{"lineNumber":62,"author":{"gitId":"HowSuen"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2022-08-30"},{"lineNumber":63,"author":{"gitId":"HowSuen"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2022-08-30"},{"lineNumber":64,"author":{"gitId":"HowSuen"},"content":"        );","lastModifiedDate":"2022-08-30"},{"lineNumber":65,"author":{"gitId":"HowSuen"},"content":"        userInput.clear();","lastModifiedDate":"2022-08-30"},{"lineNumber":66,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-30"},{"lineNumber":67,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-30"}],"authorContributionMap":{"HowSuen":67}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-08-30"}],"authorContributionMap":{"HowSuen":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-30"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"            \u003c/content\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-08-30"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2022-08-30"}],"authorContributionMap":{"HowSuen":19}},{"path":"src/test/java/duke/CommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-24"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-24"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2022-08-24"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"public class CommandTest {","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"    public void checks_commandWord_success() throws Exception {","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"        assertEquals(true, ExitCommand.isCommand(\"bye\"));","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"        assertEquals(true, ListCommand.isCommand(\"list\"));","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"        assertEquals(true, MarkCommand.isCommand(\"mark\"));","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"        assertEquals(true, UnmarkCommand.isCommand(\"unmark\"));","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"        assertEquals(true, AddCommand.isCommand(\"todo\"));","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"        assertEquals(true, AddCommand.isCommand(\"deadline\"));","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"        assertEquals(true, AddCommand.isCommand(\"event\"));","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"        assertEquals(true, DeleteCommand.isCommand(\"delete\"));","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"        assertEquals(true, FindCommand.isCommand(\"find\"));","lastModifiedDate":"2022-08-24"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"HowSuen":28}},{"path":"src/test/java/duke/DateParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"import duke.parser.DateParser;","lastModifiedDate":"2022-08-24"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"public class DateParserTest {","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"    public void parse_stringToDate_success() throws Exception {","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"        assertEquals(LocalDateTime.parse(\"2022-12-03T10:15:00\"),","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"                DateParser.parseStringToDate(\"03 12 2022 10:15\"));","lastModifiedDate":"2022-09-04"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"        assertEquals(LocalDateTime.parse(\"2022-02-28T00:00:00\"),","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"                DateParser.parseStringToDate(\"28 02 2022\"));","lastModifiedDate":"2022-09-04"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"        assertEquals(LocalDateTime.parse(\"2022-12-03T10:15:00\"),","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"                DateParser.parseStringToDate(\"03-12-2022 10:15\"));","lastModifiedDate":"2022-09-04"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"        assertEquals(LocalDateTime.parse(\"2022-02-28T00:00:00\"),","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"                DateParser.parseStringToDate(\"28-02-2022\"));","lastModifiedDate":"2022-09-04"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"        assertEquals(LocalDateTime.parse(\"2022-12-03T10:15:00\"),","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"                DateParser.parseStringToDate(\"03/12/2022 10:15\"));","lastModifiedDate":"2022-09-04"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"        assertEquals(LocalDateTime.parse(\"2022-02-28T00:00:00\"),","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"                DateParser.parseStringToDate(\"28/02/2022\"));","lastModifiedDate":"2022-09-04"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"    public void display_dateToString_success() throws Exception {","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"        assertEquals(\"Dec 03 2022 10:15\",","lastModifiedDate":"2022-08-23"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"                DateParser.parseDateToString(LocalDateTime.parse(\"2022-12-03T10:15:00\")));","lastModifiedDate":"2022-09-04"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"        assertEquals(\"Feb 28 2022 00:00\",","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"                DateParser.parseDateToString(LocalDateTime.parse(\"2022-02-28T00:00:00\")));","lastModifiedDate":"2022-09-04"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"        assertEquals(\"Aug 08 2023 18:59\",","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"                DateParser.parseDateToString(LocalDateTime.parse(\"2023-08-08T18:59:00\")));","lastModifiedDate":"2022-09-04"},{"lineNumber":38,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":39,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":40,"author":{"gitId":"HowSuen"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":41,"author":{"gitId":"HowSuen"},"content":"    public void display_dateToCommandString_success() throws Exception {","lastModifiedDate":"2022-08-23"},{"lineNumber":42,"author":{"gitId":"HowSuen"},"content":"        assertEquals(\"03 12 2022 10:15\",","lastModifiedDate":"2022-08-23"},{"lineNumber":43,"author":{"gitId":"HowSuen"},"content":"                DateParser.parseDateToCommand(LocalDateTime.parse(\"2022-12-03T10:15:00\")));","lastModifiedDate":"2022-09-04"},{"lineNumber":44,"author":{"gitId":"HowSuen"},"content":"        assertEquals(\"28 02 2022 00:00\",","lastModifiedDate":"2022-08-23"},{"lineNumber":45,"author":{"gitId":"HowSuen"},"content":"                DateParser.parseDateToCommand(LocalDateTime.parse(\"2022-02-28T00:00:00\")));","lastModifiedDate":"2022-09-04"},{"lineNumber":46,"author":{"gitId":"HowSuen"},"content":"        assertEquals(\"08 08 2023 18:59\",","lastModifiedDate":"2022-08-23"},{"lineNumber":47,"author":{"gitId":"HowSuen"},"content":"                DateParser.parseDateToCommand(LocalDateTime.parse(\"2023-08-08T18:59:00\")));","lastModifiedDate":"2022-09-04"},{"lineNumber":48,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":49,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":50,"author":{"gitId":"HowSuen"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":51,"author":{"gitId":"HowSuen"},"content":"    public void parse_stringToDate_exceptionThrown() throws Exception {","lastModifiedDate":"2022-08-23"},{"lineNumber":52,"author":{"gitId":"HowSuen"},"content":"        try {","lastModifiedDate":"2022-08-23"},{"lineNumber":53,"author":{"gitId":"HowSuen"},"content":"            assertEquals(LocalDateTime.parse(\"2000-08-08T07:00:00\"),","lastModifiedDate":"2022-08-23"},{"lineNumber":54,"author":{"gitId":"HowSuen"},"content":"                    DateParser.parseStringToDate(\"08 Aug 2022 0700\"));","lastModifiedDate":"2022-09-04"},{"lineNumber":55,"author":{"gitId":"HowSuen"},"content":"            fail();","lastModifiedDate":"2022-08-23"},{"lineNumber":56,"author":{"gitId":"HowSuen"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2022-08-23"},{"lineNumber":57,"author":{"gitId":"HowSuen"},"content":"            assertEquals(\"Text \u002708 Aug 2022 0700\u0027 could not be parsed, unparsed text found at index 0\",","lastModifiedDate":"2022-08-23"},{"lineNumber":58,"author":{"gitId":"HowSuen"},"content":"                    e.getMessage());","lastModifiedDate":"2022-08-23"},{"lineNumber":59,"author":{"gitId":"HowSuen"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":60,"author":{"gitId":"HowSuen"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":61,"author":{"gitId":"HowSuen"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":62,"author":{"gitId":"HowSuen"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"HowSuen":62}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"HowSuen"},"content":"list","lastModifiedDate":"2022-08-15"},{"lineNumber":2,"author":{"gitId":"HowSuen"},"content":"todo uninstall League of Legends","lastModifiedDate":"2022-08-15"},{"lineNumber":3,"author":{"gitId":"HowSuen"},"content":"deadline MA1521 HW 1 /by 31 April","lastModifiedDate":"2022-08-15"},{"lineNumber":4,"author":{"gitId":"HowSuen"},"content":"deadline MA1521 HW 1 /by 31 04 2022 12:00","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"HowSuen"},"content":"event birthday /at 8 August 00:00","lastModifiedDate":"2022-08-15"},{"lineNumber":6,"author":{"gitId":"HowSuen"},"content":"event birthday /at 08 08 2023","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"HowSuen"},"content":"todo delete this task","lastModifiedDate":"2022-08-15"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"delete","lastModifiedDate":"2022-08-15"},{"lineNumber":9,"author":{"gitId":"HowSuen"},"content":"delete random line","lastModifiedDate":"2022-08-15"},{"lineNumber":10,"author":{"gitId":"HowSuen"},"content":"delete 4","lastModifiedDate":"2022-08-15"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"list","lastModifiedDate":"2022-08-15"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"mark","lastModifiedDate":"2022-08-15"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"unmark","lastModifiedDate":"2022-08-15"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"mark 420","lastModifiedDate":"2022-08-15"},{"lineNumber":15,"author":{"gitId":"HowSuen"},"content":"mark abcdef","lastModifiedDate":"2022-08-15"},{"lineNumber":16,"author":{"gitId":"HowSuen"},"content":"unmark -69","lastModifiedDate":"2022-08-15"},{"lineNumber":17,"author":{"gitId":"HowSuen"},"content":"unmark alalalalalala","lastModifiedDate":"2022-08-15"},{"lineNumber":18,"author":{"gitId":"HowSuen"},"content":"mark 1","lastModifiedDate":"2022-08-15"},{"lineNumber":19,"author":{"gitId":"HowSuen"},"content":"list","lastModifiedDate":"2022-08-15"},{"lineNumber":20,"author":{"gitId":"HowSuen"},"content":"mark 2","lastModifiedDate":"2022-08-15"},{"lineNumber":21,"author":{"gitId":"HowSuen"},"content":"mark 3","lastModifiedDate":"2022-08-15"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"list","lastModifiedDate":"2022-08-15"},{"lineNumber":23,"author":{"gitId":"HowSuen"},"content":"unmark 3","lastModifiedDate":"2022-08-15"},{"lineNumber":24,"author":{"gitId":"HowSuen"},"content":"unmark 2","lastModifiedDate":"2022-08-15"},{"lineNumber":25,"author":{"gitId":"HowSuen"},"content":"list","lastModifiedDate":"2022-08-15"},{"lineNumber":26,"author":{"gitId":"HowSuen"},"content":"find","lastModifiedDate":"2022-08-24"},{"lineNumber":27,"author":{"gitId":"HowSuen"},"content":"find ma1521","lastModifiedDate":"2022-08-24"},{"lineNumber":28,"author":{"gitId":"HowSuen"},"content":"find MA1521","lastModifiedDate":"2022-08-24"},{"lineNumber":29,"author":{"gitId":"HowSuen"},"content":"todo","lastModifiedDate":"2022-08-15"},{"lineNumber":30,"author":{"gitId":"HowSuen"},"content":"deadline","lastModifiedDate":"2022-08-15"},{"lineNumber":31,"author":{"gitId":"HowSuen"},"content":"deadline CS1101S Assignment","lastModifiedDate":"2022-08-15"},{"lineNumber":32,"author":{"gitId":"HowSuen"},"content":"event","lastModifiedDate":"2022-08-15"},{"lineNumber":33,"author":{"gitId":"HowSuen"},"content":"event CS1231S Quiz","lastModifiedDate":"2022-08-15"},{"lineNumber":34,"author":{"gitId":"HowSuen"},"content":"random","lastModifiedDate":"2022-08-15"},{"lineNumber":35,"author":{"gitId":"HowSuen"},"content":"list5","lastModifiedDate":"2022-08-15"},{"lineNumber":36,"author":{"gitId":"HowSuen"},"content":"markkkkk","lastModifiedDate":"2022-08-15"},{"lineNumber":37,"author":{"gitId":"HowSuen"},"content":"bye","lastModifiedDate":"2022-08-15"}],"authorContributionMap":{"HowSuen":37}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"HowSuen"},"content":"if exist data\\duke.txt del data\\duke.txt","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"HowSuen"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"HowSuen"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\command\\*.java","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"HowSuen"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\parser\\*.java","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"HowSuen"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\task\\*.java","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"HowSuen"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":19,"HowSuen":6}}]
