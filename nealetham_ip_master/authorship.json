[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"# duke.Duke project template","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"nealetham":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2022-08-29"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"    implementation \u0027org.junit.jupiter:junit-jupiter:5.7.0\u0027","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"    implementation \u0027org.junit.jupiter:junit-jupiter:5.7.0\u0027","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.7.0\u0027","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.7.0\u0027","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"checkstyle {","lastModifiedDate":"2022-08-28"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-08-28"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-28"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"    mainClassName \u003d \"duke.Main\"","lastModifiedDate":"2022-09-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"nealetham":25,"-":38}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"Duke+ is a ***desktop app for keeping track of and managing various tasks via a Command Line Interface (CLI)***, while still having the benefits of a Graphical User Interface.","lastModifiedDate":"2022-09-13"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"The name Duke+ was chosen in honor of Duke, the Java Mascot.","lastModifiedDate":"2022-09-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"## Quick start","lastModifiedDate":"2022-09-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"1. Ensure you have Java **`11`** or above installed in your Computer.","lastModifiedDate":"2022-09-13"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"2. Download the latest **`Duke.jar`** from [here](https://github.com/nealetham/ip/releases).","lastModifiedDate":"2022-09-13"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"3. Copy the file to the folder you want to use as the home folder for your Duke+.","lastModifiedDate":"2022-09-13"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds.","lastModifiedDate":"2022-09-13"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"![Ui](Ui.png)","lastModifiedDate":"2022-09-13"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"5. Type the command in the command box and press Enter to execute it.  Some example commands you can try:","lastModifiedDate":"2022-09-13"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"    - **`list`** : Lists all tasks.","lastModifiedDate":"2022-09-13"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"    - **`todo Homework`** : Adds a todo item with description **`Homework`** into your current list.","lastModifiedDate":"2022-09-13"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"    - **`deadline Assignment /by 2022-10-12 23:59`** : Adds a deadline item with description **`Assignment`** and due date **`2022-10-12 23:59`**.","lastModifiedDate":"2022-09-13"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"    - **`event Party /at @Keith\u0027s House`** : Adds an event item with description **`Party`** and remark **`@Keith\u0027s House`**. ","lastModifiedDate":"2022-09-13"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"    - **`delete 3`** : Deletes the 3rd item shown in the current list.","lastModifiedDate":"2022-09-13"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"    - **`bye`** : Exits the application. ","lastModifiedDate":"2022-09-13"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"    ","lastModifiedDate":"2022-09-13"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"6. Refer to the [features](#features) below for details of each command.","lastModifiedDate":"2022-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"---","lastModifiedDate":"2022-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"**Notes about the command format:**","lastModifiedDate":"2022-09-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2022-09-13"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"  e.g. in `todo DESCRIPTION`, `DESCRIPTION` is a parameter which can be used as `todo Homework`.","lastModifiedDate":"2022-09-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"* All parameters are compulsory and to be specified by the user. ","lastModifiedDate":"2022-09-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"### Viewing list : `list`","lastModifiedDate":"2022-09-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"Shows a list of all pending tasks in storage.","lastModifiedDate":"2022-09-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"Format: `list`","lastModifiedDate":"2022-09-13"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"* Tasks displayed using `list` are formatted as `INDEX. [TYPE][STATUS] CONTENT`.","lastModifiedDate":"2022-09-13"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"* The `INDEX` is the index of the task within the list. It is one-indexed.","lastModifiedDate":"2022-09-13"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"* The `TYPE` has values `T`, `D` and `E` for todo, deadline and event respectively. ","lastModifiedDate":"2022-09-13"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"* The `STATUS` has values `O` and `X`, indicating that a task has been completed or not respectively.","lastModifiedDate":"2022-09-13"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"Example:","lastModifiedDate":"2022-09-13"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"* `[T][O] Homework` indicates an *uncompleted todo task*, with description *Homework*.","lastModifiedDate":"2022-09-13"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"* `[E][X] Party (at: Today)` indicates a *completed event*, with remark *Today*. ","lastModifiedDate":"2022-09-13"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":52,"author":{"gitId":"nealetham"},"content":"### Adding a todo: `todo`","lastModifiedDate":"2022-09-13"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"Adds a todo item to storage.","lastModifiedDate":"2022-09-13"},{"lineNumber":54,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":55,"author":{"gitId":"nealetham"},"content":"Format: `todo DESCRIPTION`","lastModifiedDate":"2022-09-13"},{"lineNumber":56,"author":{"gitId":"nealetham"},"content":"* Adds a todo task to the task list with description `DESCRIPTION`.","lastModifiedDate":"2022-09-13"},{"lineNumber":57,"author":{"gitId":"nealetham"},"content":"* The `DESCRIPTION` parameter can be a word, or a sentence.","lastModifiedDate":"2022-09-13"},{"lineNumber":58,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":59,"author":{"gitId":"nealetham"},"content":"Examples:","lastModifiedDate":"2022-09-13"},{"lineNumber":60,"author":{"gitId":"nealetham"},"content":"* `todo CS2103T Homework` Adds a todo task with description `CS2103T Homework` to task list.","lastModifiedDate":"2022-09-13"},{"lineNumber":61,"author":{"gitId":"nealetham"},"content":"* `todo House_Chores` Adds a todo task with description `House_Chores` to task list.","lastModifiedDate":"2022-09-13"},{"lineNumber":62,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":63,"author":{"gitId":"nealetham"},"content":"### Adding a deadline: `deadline`","lastModifiedDate":"2022-09-13"},{"lineNumber":64,"author":{"gitId":"nealetham"},"content":"Adds a deadline item to the task list.","lastModifiedDate":"2022-09-13"},{"lineNumber":65,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":66,"author":{"gitId":"nealetham"},"content":"Format: `deadline DESCRIPTION /by DUE_DATE`","lastModifiedDate":"2022-09-13"},{"lineNumber":67,"author":{"gitId":"nealetham"},"content":"* Adds a deadline task to storage with description `DESCRIPTION` and ","lastModifiedDate":"2022-09-13"},{"lineNumber":68,"author":{"gitId":"nealetham"},"content":"  due date `DUE_DATE` to task list.","lastModifiedDate":"2022-09-13"},{"lineNumber":69,"author":{"gitId":"nealetham"},"content":"* The `DESCRIPTION` parameter can be a word, or a sentence.","lastModifiedDate":"2022-09-13"},{"lineNumber":70,"author":{"gitId":"nealetham"},"content":"* The format of the due date is `YYYY-MM-DD HH:MM`.","lastModifiedDate":"2022-09-13"},{"lineNumber":71,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":72,"author":{"gitId":"nealetham"},"content":"Examples:","lastModifiedDate":"2022-09-13"},{"lineNumber":73,"author":{"gitId":"nealetham"},"content":"* `deadline CS2100 Lab Report /by 2022-09-14 23:59` Adds a deadline task with description `CS2100 Lab Report` and due date `2022-09-14 23:59` to task list.","lastModifiedDate":"2022-09-13"},{"lineNumber":74,"author":{"gitId":"nealetham"},"content":"* `deadline Assignment /by 2022-09-18 10:00` Adds a deadline task with description `Assignment` and due date `2022-09-18 10:00` to task list.","lastModifiedDate":"2022-09-13"},{"lineNumber":75,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":76,"author":{"gitId":"nealetham"},"content":"### Adding a event: `event`","lastModifiedDate":"2022-09-13"},{"lineNumber":77,"author":{"gitId":"nealetham"},"content":"Adds an event item to the task list.","lastModifiedDate":"2022-09-13"},{"lineNumber":78,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":79,"author":{"gitId":"nealetham"},"content":"Format: `event DESCRIPTION /at REMARKS`","lastModifiedDate":"2022-09-13"},{"lineNumber":80,"author":{"gitId":"nealetham"},"content":"* Adds an event task to storage with description `DESCRIPTIONS` and additional remarks `REMARKS` to task list.","lastModifiedDate":"2022-09-13"},{"lineNumber":81,"author":{"gitId":"nealetham"},"content":"* The `DESCRIPTION` and `REMARKS` parameter can be a single word, or a sentence.","lastModifiedDate":"2022-09-13"},{"lineNumber":82,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":83,"author":{"gitId":"nealetham"},"content":"Examples:","lastModifiedDate":"2022-09-13"},{"lineNumber":84,"author":{"gitId":"nealetham"},"content":"* `event House Party /at at Keith\u0027s House` Adds an event with description `House Party` and remark `at Keith\u0027s House` to task list.","lastModifiedDate":"2022-09-13"},{"lineNumber":85,"author":{"gitId":"nealetham"},"content":"* `event Clubbing /at at Zouk` Adds an event with description `Clubbing` and remark `at Zouk` to task list. ","lastModifiedDate":"2022-09-13"},{"lineNumber":86,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":87,"author":{"gitId":"nealetham"},"content":"### Deleting a task: `delete`","lastModifiedDate":"2022-09-13"},{"lineNumber":88,"author":{"gitId":"nealetham"},"content":"Deletes an item from storage from the given index.","lastModifiedDate":"2022-09-13"},{"lineNumber":89,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":90,"author":{"gitId":"nealetham"},"content":"Format: `delete INDEX`","lastModifiedDate":"2022-09-13"},{"lineNumber":91,"author":{"gitId":"nealetham"},"content":"* Deletes the task at the specified `INDEX`.","lastModifiedDate":"2022-09-13"},{"lineNumber":92,"author":{"gitId":"nealetham"},"content":"* The index refers to the index number of the task shown in `list`.","lastModifiedDate":"2022-09-13"},{"lineNumber":93,"author":{"gitId":"nealetham"},"content":"* The index must be a positive integer 1, 2, 3, ... and must exist on the list.","lastModifiedDate":"2022-09-13"},{"lineNumber":94,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":95,"author":{"gitId":"nealetham"},"content":"Examples:","lastModifiedDate":"2022-09-13"},{"lineNumber":96,"author":{"gitId":"nealetham"},"content":"* `list` followed by `delete 2` deletes the 2nd task on the list.","lastModifiedDate":"2022-09-13"},{"lineNumber":97,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":98,"author":{"gitId":"nealetham"},"content":"### Checking-off a task: `mark`","lastModifiedDate":"2022-09-13"},{"lineNumber":99,"author":{"gitId":"nealetham"},"content":"Marks an existing task as completed.","lastModifiedDate":"2022-09-13"},{"lineNumber":100,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":101,"author":{"gitId":"nealetham"},"content":"Format: `mark INDEX`","lastModifiedDate":"2022-09-13"},{"lineNumber":102,"author":{"gitId":"nealetham"},"content":"* Marks the task as completed at the specified `INDEX`.","lastModifiedDate":"2022-09-13"},{"lineNumber":103,"author":{"gitId":"nealetham"},"content":"* The index refers to the index number of the task shown in `list`.","lastModifiedDate":"2022-09-13"},{"lineNumber":104,"author":{"gitId":"nealetham"},"content":"* The index must be a positive integer 1, 2, 3, ... and must exist on the list.","lastModifiedDate":"2022-09-13"},{"lineNumber":105,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":106,"author":{"gitId":"nealetham"},"content":"Examples:","lastModifiedDate":"2022-09-13"},{"lineNumber":107,"author":{"gitId":"nealetham"},"content":"* `list` followed by `mark 2` marks the 2nd task on the list as completed.","lastModifiedDate":"2022-09-13"},{"lineNumber":108,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":109,"author":{"gitId":"nealetham"},"content":"### Finding a task with strict querying: `find`","lastModifiedDate":"2022-09-13"},{"lineNumber":110,"author":{"gitId":"nealetham"},"content":"Searches for an item that has strict matching with the given query.","lastModifiedDate":"2022-09-13"},{"lineNumber":111,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":112,"author":{"gitId":"nealetham"},"content":"Format: `find STRICT_QUERY`","lastModifiedDate":"2022-09-13"},{"lineNumber":113,"author":{"gitId":"nealetham"},"content":"* The query is case-sensitive.","lastModifiedDate":"2022-09-13"},{"lineNumber":114,"author":{"gitId":"nealetham"},"content":"* There must be a one-to-one correspondence between the query and an **entire** word of a task in the list.","lastModifiedDate":"2022-09-13"},{"lineNumber":115,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":116,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":117,"author":{"gitId":"nealetham"},"content":"Examples:","lastModifiedDate":"2022-09-13"},{"lineNumber":118,"author":{"gitId":"nealetham"},"content":"* Suppose your list contains `[T][O] Mathematics Homework`.","lastModifiedDate":"2022-09-13"},{"lineNumber":119,"author":{"gitId":"nealetham"},"content":"* `find Math` would return no results, but `find Mathematics` would return the task above.","lastModifiedDate":"2022-09-13"},{"lineNumber":120,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":121,"author":{"gitId":"nealetham"},"content":"### Finding a task with partial querying: `match`","lastModifiedDate":"2022-09-13"},{"lineNumber":122,"author":{"gitId":"nealetham"},"content":"Searches for an item that partially matches with the given query.","lastModifiedDate":"2022-09-13"},{"lineNumber":123,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":124,"author":{"gitId":"nealetham"},"content":"Format: `match PARTIAL_QUERY`","lastModifiedDate":"2022-09-13"},{"lineNumber":125,"author":{"gitId":"nealetham"},"content":"* The query is case-sensitive.","lastModifiedDate":"2022-09-13"},{"lineNumber":126,"author":{"gitId":"nealetham"},"content":"* There must be a one-to-one correspondence between the query and a **portion** of a word of a task in the list. ","lastModifiedDate":"2022-09-13"},{"lineNumber":127,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-13"},{"lineNumber":128,"author":{"gitId":"nealetham"},"content":"Examples:","lastModifiedDate":"2022-09-13"},{"lineNumber":129,"author":{"gitId":"nealetham"},"content":"* Suppose your list contains `[T][O] Mathematics Homework`.","lastModifiedDate":"2022-09-13"},{"lineNumber":130,"author":{"gitId":"nealetham"},"content":"* Both `match Math` and `match Mathematics` would return the task above.","lastModifiedDate":"2022-09-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":132,"author":{"gitId":"nealetham"},"content":"### Exiting the program : `bye`","lastModifiedDate":"2022-09-13"},{"lineNumber":133,"author":{"gitId":"nealetham"},"content":"Exits the program.","lastModifiedDate":"2022-09-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":135,"author":{"gitId":"nealetham"},"content":"Format: `bye`","lastModifiedDate":"2022-09-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":137,"author":{"gitId":"nealetham"},"content":"### Saving the data","lastModifiedDate":"2022-09-13"},{"lineNumber":138,"author":{"gitId":"nealetham"},"content":"Duke+ data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2022-09-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":140,"author":{"gitId":"nealetham"},"content":"---","lastModifiedDate":"2022-09-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":142,"author":{"gitId":"nealetham"},"content":"## FAQ","lastModifiedDate":"2022-09-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":144,"author":{"gitId":"nealetham"},"content":"**Q**: How do I transfer my data to another Computer?","lastModifiedDate":"2022-09-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":146,"author":{"gitId":"nealetham"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Duke+ home folder.","lastModifiedDate":"2022-09-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":148,"author":{"gitId":"nealetham"},"content":"---","lastModifiedDate":"2022-09-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":151,"author":{"gitId":"nealetham"},"content":"## Command summary","lastModifiedDate":"2022-09-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":153,"author":{"gitId":"nealetham"},"content":"Action | Format, Examples","lastModifiedDate":"2022-09-13"},{"lineNumber":154,"author":{"gitId":"nealetham"},"content":"-------|------------------","lastModifiedDate":"2022-09-13"},{"lineNumber":155,"author":{"gitId":"nealetham"},"content":"**List** | `list`","lastModifiedDate":"2022-09-13"},{"lineNumber":156,"author":{"gitId":"nealetham"},"content":"**Todo** | `todo DESCRIPTION`\u003cbr\u003e e.g., `todo CS2103T Homework` ","lastModifiedDate":"2022-09-13"},{"lineNumber":157,"author":{"gitId":"nealetham"},"content":"**Deadline** | `deadline DESCRIPTION /by DUE_DATE`\u003cbr\u003e e.g., `deadline CS2100 Lab Report /by 2022-09-14 23:59`","lastModifiedDate":"2022-09-13"},{"lineNumber":158,"author":{"gitId":"nealetham"},"content":"**Event** | `event DESCRIPTION /at REMARKS`\u003cbr\u003e e.g., `event House Party /at at Keith\u0027s House`","lastModifiedDate":"2022-09-13"},{"lineNumber":159,"author":{"gitId":"nealetham"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2022-09-13"},{"lineNumber":160,"author":{"gitId":"nealetham"},"content":"**Mark** | `mark INDEX`\u003cbr\u003e e.g., `mark 3`","lastModifiedDate":"2022-09-13"},{"lineNumber":161,"author":{"gitId":"nealetham"},"content":"**Find** | `find STRICT_QUERY`\u003cbr\u003e e.g., `find Math`","lastModifiedDate":"2022-09-13"},{"lineNumber":162,"author":{"gitId":"nealetham"},"content":"**Match** | `find PARTIAL_QUERY`\u003cbr\u003e e.g., `find Mathematics`","lastModifiedDate":"2022-09-13"},{"lineNumber":163,"author":{"gitId":"nealetham"},"content":"**Bye** | `bye`","lastModifiedDate":"2022-09-13"}],"authorContributionMap":{"nealetham":137,"-":26}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-22"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-22"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":" * Deadline is a subclass of Task. It allows the user the add an additional input","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":" * parameter which specifies the deadline of the task.","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"    /** The deadline of the task. */","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"     * The class constructor, which utilizes the superclass","lastModifiedDate":"2022-08-17"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"     * constructor.","lastModifiedDate":"2022-08-17"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"     * @param description The description of the task.","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"     * @param by The deadline of the task.","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException if by format is incorrect.","lastModifiedDate":"2022-09-04"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"    public Deadline(String description, String by) throws DukeException {","lastModifiedDate":"2022-08-22"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"        super(description);","lastModifiedDate":"2022-08-17"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"        assert(by !\u003d null);","lastModifiedDate":"2022-09-03"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"        if (!isByCorrectFormat(by)) {","lastModifiedDate":"2022-09-04"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"Invalid Date Format (YYYY-MM-DD HH:MM required).\");","lastModifiedDate":"2022-09-04"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-09-04"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"        this.by \u003d createLocalDateTime(by);","lastModifiedDate":"2022-09-04"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-09-04"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-09-04"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"     * Checks if by is correctly formatted as such YYYY-MM-DD HH:MM.","lastModifiedDate":"2022-09-04"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-09-04"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"     * @param by String representation of the task time.","lastModifiedDate":"2022-09-04"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"     * @return boolean true if it is correctly formatted, false if otherwise.","lastModifiedDate":"2022-09-04"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-09-04"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"    private boolean isByCorrectFormat(String by) {","lastModifiedDate":"2022-09-04"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"        return by.trim().matches(\"(\\\\d{4})-(\\\\d{2})-(\\\\d{2}) (\\\\d{2}):(\\\\d{2})\");","lastModifiedDate":"2022-09-04"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-09-04"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-09-04"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"     * Creates a LocalDateTime object with the by parameter provided.","lastModifiedDate":"2022-09-04"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-09-04"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"     * @param by String representation of the task time.","lastModifiedDate":"2022-09-04"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"     * @return LocalDateTime object.","lastModifiedDate":"2022-09-04"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-09-04"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"    private LocalDateTime createLocalDateTime(String by) {","lastModifiedDate":"2022-09-04"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"        String preDate \u003d by.split(\" \", 2)[0];","lastModifiedDate":"2022-08-22"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"        String preTime \u003d by.split(\" \", 2)[1];","lastModifiedDate":"2022-08-22"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"        String[] dates \u003d preDate.split(\"-\", 3);","lastModifiedDate":"2022-08-22"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"        String[] time \u003d preTime.split(\":\", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":52,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"        return LocalDateTime.of(Integer.parseInt(dates[0]), Integer.parseInt(dates[1]),","lastModifiedDate":"2022-09-04"},{"lineNumber":54,"author":{"gitId":"nealetham"},"content":"                Integer.parseInt(dates[2]), Integer.parseInt(time[0]), Integer.parseInt(time[1]));","lastModifiedDate":"2022-08-22"},{"lineNumber":55,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":56,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":57,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":58,"author":{"gitId":"nealetham"},"content":"     * Returns a string of  deadline to be displayed, formatted","lastModifiedDate":"2022-08-23"},{"lineNumber":59,"author":{"gitId":"nealetham"},"content":"     * as MONTH DATE YEAR i.e. MARCH 19 2022.","lastModifiedDate":"2022-08-23"},{"lineNumber":60,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":61,"author":{"gitId":"nealetham"},"content":"     * @return String of the deadline to be displayed.","lastModifiedDate":"2022-08-22"},{"lineNumber":62,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":63,"author":{"gitId":"nealetham"},"content":"    public String formatTime() {","lastModifiedDate":"2022-08-22"},{"lineNumber":64,"author":{"gitId":"nealetham"},"content":"        return String.format(\"%s %s %s %s:%02d\", this.by.getMonth(), this.by.getDayOfMonth(),","lastModifiedDate":"2022-09-04"},{"lineNumber":65,"author":{"gitId":"nealetham"},"content":"                this.by.getYear(), this.by.getHour(), this.by.getMinute());","lastModifiedDate":"2022-08-22"},{"lineNumber":66,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":67,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":68,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":69,"author":{"gitId":"nealetham"},"content":"     * Returns a string representation of a Deadline object formatted","lastModifiedDate":"2022-08-23"},{"lineNumber":70,"author":{"gitId":"nealetham"},"content":"     * for writing into text file.","lastModifiedDate":"2022-08-23"},{"lineNumber":71,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":72,"author":{"gitId":"nealetham"},"content":"     * @return String of the deadline formatted to save.","lastModifiedDate":"2022-09-03"},{"lineNumber":73,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":74,"author":{"gitId":"nealetham"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":75,"author":{"gitId":"nealetham"},"content":"    public String formatFileText() {","lastModifiedDate":"2022-08-21"},{"lineNumber":76,"author":{"gitId":"nealetham"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2022-08-22"},{"lineNumber":77,"author":{"gitId":"nealetham"},"content":"        return String.format(\"D | %s | %s | %s\\n\", super.getStatusIcon(), this.description, this.by.format(format));","lastModifiedDate":"2022-09-04"},{"lineNumber":78,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":79,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":80,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":81,"author":{"gitId":"nealetham"},"content":"     * Overrides the toString method of the superclass to add","lastModifiedDate":"2022-08-17"},{"lineNumber":82,"author":{"gitId":"nealetham"},"content":"     * the additional [D] tag.","lastModifiedDate":"2022-08-17"},{"lineNumber":83,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":84,"author":{"gitId":"nealetham"},"content":"     * @return String representation of this task.","lastModifiedDate":"2022-08-17"},{"lineNumber":85,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":86,"author":{"gitId":"nealetham"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":87,"author":{"gitId":"nealetham"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":88,"author":{"gitId":"nealetham"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + formatTime() + \")\";","lastModifiedDate":"2022-08-22"},{"lineNumber":89,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":90,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":91,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"nealetham":91}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-29"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-29"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"import java.util.Collections;","lastModifiedDate":"2022-08-29"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-08-29"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-08-29"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-08-29"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-08-29"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2022-08-29"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"import javafx.scene.Node;","lastModifiedDate":"2022-08-29"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":" * containing text from the speaker.","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"    @FXML","lastModifiedDate":"2022-08-29"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"    private Label dialog;","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"    @FXML","lastModifiedDate":"2022-08-29"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2022-08-29"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"     * The class constructor for DialogBox.","lastModifiedDate":"2022-08-29"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"     * @param text of user input or Duke response.","lastModifiedDate":"2022-08-29"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"     * @param img of user or Duke.","lastModifiedDate":"2022-08-29"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2022-08-29"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"        try {","lastModifiedDate":"2022-08-29"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2022-08-29"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2022-08-29"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2022-08-29"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"            fxmlLoader.load();","lastModifiedDate":"2022-08-29"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-29"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-08-29"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-29"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"        dialog.setText(text);","lastModifiedDate":"2022-08-29"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2022-08-29"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2022-08-29"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"    private void flip() {","lastModifiedDate":"2022-08-29"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2022-08-29"},{"lineNumber":52,"author":{"gitId":"nealetham"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2022-08-29"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2022-08-29"},{"lineNumber":54,"author":{"gitId":"nealetham"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2022-08-29"},{"lineNumber":55,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":56,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":57,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":58,"author":{"gitId":"nealetham"},"content":"     * Returns a DialogBox containing the user\u0027s input and image.","lastModifiedDate":"2022-08-29"},{"lineNumber":59,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":60,"author":{"gitId":"nealetham"},"content":"     * @param text of user input.","lastModifiedDate":"2022-08-29"},{"lineNumber":61,"author":{"gitId":"nealetham"},"content":"     * @param img of user.","lastModifiedDate":"2022-08-29"},{"lineNumber":62,"author":{"gitId":"nealetham"},"content":"     * @return DialogBox customized with the user\u0027s input.","lastModifiedDate":"2022-08-29"},{"lineNumber":63,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":64,"author":{"gitId":"nealetham"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2022-08-29"},{"lineNumber":65,"author":{"gitId":"nealetham"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2022-08-29"},{"lineNumber":66,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":67,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":68,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":69,"author":{"gitId":"nealetham"},"content":"     * Returns a DialogBox containing Duke\u0027s response and image. The","lastModifiedDate":"2022-08-29"},{"lineNumber":70,"author":{"gitId":"nealetham"},"content":"     * DialogBox is flipped horizontally.","lastModifiedDate":"2022-08-29"},{"lineNumber":71,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":72,"author":{"gitId":"nealetham"},"content":"     * @param text of Duke\u0027s response.","lastModifiedDate":"2022-08-29"},{"lineNumber":73,"author":{"gitId":"nealetham"},"content":"     * @param img of Duke.","lastModifiedDate":"2022-08-29"},{"lineNumber":74,"author":{"gitId":"nealetham"},"content":"     * @return DialogBox customized with Duke\u0027s response.","lastModifiedDate":"2022-08-29"},{"lineNumber":75,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":76,"author":{"gitId":"nealetham"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2022-08-29"},{"lineNumber":77,"author":{"gitId":"nealetham"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2022-08-29"},{"lineNumber":78,"author":{"gitId":"nealetham"},"content":"        db.flip();","lastModifiedDate":"2022-08-29"},{"lineNumber":79,"author":{"gitId":"nealetham"},"content":"        return db;","lastModifiedDate":"2022-08-29"},{"lineNumber":80,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":81,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-29"}],"authorContributionMap":{"nealetham":81}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":" * The duke.Main class of Duke. Runs the entire program.","lastModifiedDate":"2022-08-29"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"    /** The storage component. */","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"    private final Storage storage;","lastModifiedDate":"2022-09-04"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"    /** The tasks component. */","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"    private final TaskList tasks;","lastModifiedDate":"2022-09-04"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"    /** The parse component. */","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"    private final Parser parser;","lastModifiedDate":"2022-09-04"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"    /** The ui component. */","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"    private final Ui ui;","lastModifiedDate":"2022-09-04"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"     * The class constructor for Duke. Initializes all necessary","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"     * objects for usage. Reads and loads saved tasks if available.","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"     * @param filePath of the file.","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2022-08-22"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2022-08-22"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2022-08-22"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"        this.tasks \u003d storage.loadFile(new TaskList());","lastModifiedDate":"2022-08-22"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"        this.parser \u003d new Parser(tasks);","lastModifiedDate":"2022-08-22"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"     * Initializes the core functionality of Duke. One-half of the decision making","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"     * tree of Duke. Application terminates when it encounters \"bye\".","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-09-04"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"     * @param input of the user.","lastModifiedDate":"2022-09-04"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"     * @return String output of Duke\u0027s response.","lastModifiedDate":"2022-09-04"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"    public String run(String input) {","lastModifiedDate":"2022-08-29"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2022-09-04"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"            storage.writeToFile(\"/data\", this.tasks);","lastModifiedDate":"2022-09-04"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"            System.exit(0);","lastModifiedDate":"2022-09-04"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-09-04"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"        if (input.equals(\"list\")) {","lastModifiedDate":"2022-08-17"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"            return ui.printList(this.tasks);","lastModifiedDate":"2022-08-29"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-09-04"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"        try {","lastModifiedDate":"2022-08-18"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"            String response \u003d this.parser.parse(input);","lastModifiedDate":"2022-08-29"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"            storage.writeToFile(\"./data\", this.tasks);","lastModifiedDate":"2022-08-22"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"            return response;","lastModifiedDate":"2022-08-29"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-08-18"},{"lineNumber":52,"author":{"gitId":"nealetham"},"content":"            return ui.showError(e);","lastModifiedDate":"2022-08-29"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-18"},{"lineNumber":54,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":55,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":56,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":57,"author":{"gitId":"nealetham"},"content":"     * Returns a string where Duke introduces itself to the user.","lastModifiedDate":"2022-08-29"},{"lineNumber":58,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":59,"author":{"gitId":"nealetham"},"content":"     * @return String output of salutation.","lastModifiedDate":"2022-08-29"},{"lineNumber":60,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":61,"author":{"gitId":"nealetham"},"content":"    public String start() {","lastModifiedDate":"2022-08-29"},{"lineNumber":62,"author":{"gitId":"nealetham"},"content":"        return this.ui.start();","lastModifiedDate":"2022-08-29"},{"lineNumber":63,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":64,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":65,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":66,"author":{"gitId":"nealetham"},"content":"     * Returns the response of Duke after parsing the user input.","lastModifiedDate":"2022-08-29"},{"lineNumber":67,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":68,"author":{"gitId":"nealetham"},"content":"     * @param input user input.","lastModifiedDate":"2022-09-18"},{"lineNumber":69,"author":{"gitId":"nealetham"},"content":"     * @return String output of Duke\u0027s response.","lastModifiedDate":"2022-08-29"},{"lineNumber":70,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":71,"author":{"gitId":"nealetham"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2022-08-29"},{"lineNumber":72,"author":{"gitId":"nealetham"},"content":"        return this.run(input.trim());","lastModifiedDate":"2022-09-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":74,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"nealetham":72,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":" * A custom exception class specifically used for exceptions incurred","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":" * by the methods of the class.","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-08-18"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"     * The class constructor for a DukeException.","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"     * @param message description of the error.","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"    public DukeException(String message) {","lastModifiedDate":"2022-08-18"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"        super(message);","lastModifiedDate":"2022-08-18"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-18"}],"authorContributionMap":{"nealetham":18}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":" * Event is a subclass of Task. It allows the user the add an additional input","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":" * parameter which specifies the time or location of the task.","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"public class Event extends Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"    /** The time of the event. */","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"    protected String at;","lastModifiedDate":"2022-08-17"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"     * The class constructor, which utilizes the superclass","lastModifiedDate":"2022-08-17"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"     * constructor.","lastModifiedDate":"2022-08-17"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"     * @param description the description of the task.","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"     * @param at the time of the event.","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2022-08-17"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"        super(description);","lastModifiedDate":"2022-08-17"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"        assert(at !\u003d null);","lastModifiedDate":"2022-09-03"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"        this.at \u003d at;","lastModifiedDate":"2022-08-17"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"     * Returns a string representation of an Event object formatted","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"     * for writing into text file.","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"     * @return String of the Event formatted to saved.","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"    public String formatFileText() {","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"        return String.format(\"E | %s | %s | %s\\n\", super.getStatusIcon(), this.description, this.at);","lastModifiedDate":"2022-09-04"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"     * Overrides the toString method of the superclass to add","lastModifiedDate":"2022-08-17"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"     * the additional [E] tag.","lastModifiedDate":"2022-08-17"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"     * @return String representation of this task.","lastModifiedDate":"2022-08-17"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.at + \")\";","lastModifiedDate":"2022-08-17"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"nealetham":45}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-29"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"import javafx.application.Application;","lastModifiedDate":"2022-08-29"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-29"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"public class Launcher extends Application {","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"    private Duke duke \u003d new Duke(\"data/tasks.txt\");","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"    public static void launch(String[] args) {","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"        Application.launch(Launcher.class, args);","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"        try {","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"            stage.setTitle(\"Duke+\");","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"            stage.setScene(scene);","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"            stage.show();","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-29"}],"authorContributionMap":{"nealetham":35}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-29"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-09-04"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":" * Main driver for the Duke class.","lastModifiedDate":"2022-09-04"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-09-04"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"public class Main {","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"        Launcher.launch();","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-29"}],"authorContributionMap":{"nealetham":13}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-29"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-08-29"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2022-08-29"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2022-08-29"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2022-08-29"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2022-08-29"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2022-08-29"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2022-08-29"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-29"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"    @FXML","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"    @FXML","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"    @FXML","lastModifiedDate":"2022-08-29"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"    private TextField userInput;","lastModifiedDate":"2022-08-29"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"    @FXML","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"    private Button sendButton;","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"    private Duke duke;","lastModifiedDate":"2022-08-29"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Baby_Finn.png\"));","lastModifiedDate":"2022-09-13"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Jake.png\"));","lastModifiedDate":"2022-09-13"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"    @FXML","lastModifiedDate":"2022-08-29"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"    public void initialize() {","lastModifiedDate":"2022-08-29"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2022-08-29"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"     * Sets the Duke for the entire program.","lastModifiedDate":"2022-08-29"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"     * @param d the duke that was initialized.","lastModifiedDate":"2022-08-29"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2022-08-29"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"        duke \u003d d;","lastModifiedDate":"2022-08-29"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-08-29"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"                DialogBox.getDukeDialog(duke.start(), dukeImage)","lastModifiedDate":"2022-08-29"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"        );","lastModifiedDate":"2022-08-29"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-29"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2022-08-29"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2022-08-29"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-29"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"    @FXML","lastModifiedDate":"2022-08-29"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"    private void handleUserInput() {","lastModifiedDate":"2022-08-29"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2022-08-29"},{"lineNumber":52,"author":{"gitId":"nealetham"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2022-08-29"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2022-08-29"},{"lineNumber":54,"author":{"gitId":"nealetham"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2022-08-29"},{"lineNumber":55,"author":{"gitId":"nealetham"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2022-08-29"},{"lineNumber":56,"author":{"gitId":"nealetham"},"content":"        );","lastModifiedDate":"2022-08-29"},{"lineNumber":57,"author":{"gitId":"nealetham"},"content":"        userInput.clear();","lastModifiedDate":"2022-08-29"},{"lineNumber":58,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-29"},{"lineNumber":59,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-29"},{"lineNumber":60,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"}],"authorContributionMap":{"nealetham":60}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-22"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":" * This class handles the parsing of the user input command.","lastModifiedDate":"2022-08-22"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":" * This is the other half of the decision making tree.","lastModifiedDate":"2022-08-22"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-22"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"public class Parser {","lastModifiedDate":"2022-08-22"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"    /** The TaskList where new tasks are added to. */","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"    private final TaskList tasks;","lastModifiedDate":"2022-09-04"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"     * The class constructor for Parser.","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"     * @param tasks where tasks are to be added.","lastModifiedDate":"2022-08-22"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"    public Parser(TaskList tasks) {","lastModifiedDate":"2022-08-22"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2022-08-22"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"     * Handles all input and diverts it to the necessary methods for its","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"     * core functionality.","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"     * @param input String from the user.","lastModifiedDate":"2022-08-22"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"     * @return String of Duke\u0027s response.","lastModifiedDate":"2022-08-29"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException when the input is not known.","lastModifiedDate":"2022-08-22"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"    public String parse(String input) throws DukeException {","lastModifiedDate":"2022-08-29"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"        String[] parts \u003d input.split(\" \");","lastModifiedDate":"2022-08-22"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"        if (parts.length \u003c\u003d 1) {","lastModifiedDate":"2022-09-03"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :(\");","lastModifiedDate":"2022-09-13"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-09-03"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"        String prefix \u003d parts[0];","lastModifiedDate":"2022-09-04"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"        if (prefix.equals(\"mark\")) {","lastModifiedDate":"2022-09-04"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"            return tasks.markTask(parts);","lastModifiedDate":"2022-08-29"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"        } else if (prefix.equals(\"todo\")) {","lastModifiedDate":"2022-09-04"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"            return tasks.createTodo(input);","lastModifiedDate":"2022-08-29"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"        } else if (prefix.equals(\"deadline\")) {","lastModifiedDate":"2022-09-04"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"            return tasks.createDeadline(input);","lastModifiedDate":"2022-08-29"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"        } else if (prefix.equals(\"event\")) {","lastModifiedDate":"2022-09-04"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"            return tasks.createEvent(input);","lastModifiedDate":"2022-08-29"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"        } else if (prefix.equals(\"delete\")) {","lastModifiedDate":"2022-09-04"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"            return tasks.deleteTask(parts);","lastModifiedDate":"2022-08-29"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"        } else if (prefix.equals(\"find\")) {","lastModifiedDate":"2022-09-04"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"            return tasks.findTasks(parts);","lastModifiedDate":"2022-08-29"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"        } else if (prefix.equals(\"match\")) {","lastModifiedDate":"2022-09-04"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"            return tasks.findPartialMatchingTasks(parts);","lastModifiedDate":"2022-09-04"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"        } else {","lastModifiedDate":"2022-08-22"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :(\");","lastModifiedDate":"2022-08-22"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":52,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-22"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"nealetham":53}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import java.io.File;","lastModifiedDate":"2022-08-22"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-08-22"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-08-22"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-22"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-22"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-22"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":" * This class handles loading tasks from the file and saving tasks in the file.","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-22"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"public class Storage {","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"    /** The file where tasks are loaded from and saved to. */","lastModifiedDate":"2022-08-22"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"    protected File file;","lastModifiedDate":"2022-08-22"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"     * The class constructor for Storage.","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"     * @param filePath where tasks are saved to and loaded from.","lastModifiedDate":"2022-08-22"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2022-08-22"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"        this.file \u003d new File(filePath);","lastModifiedDate":"2022-08-22"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"     * Re-initializes a todo object from its string representation","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"     * in the saved file.","lastModifiedDate":"2022-08-22"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"     * @param input String of the task that was parsed.","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"    private void loadTodo(String input, boolean isDone, TaskList list) {","lastModifiedDate":"2022-09-04"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"        assert(input.split(\" \").length !\u003d 0);","lastModifiedDate":"2022-09-03"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"        String[] taskType \u003d input.split(\" \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"        Todo todo \u003d new Todo(taskType[1]);","lastModifiedDate":"2022-08-22"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"        if (isDone) {","lastModifiedDate":"2022-09-04"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"            todo.loadDone();","lastModifiedDate":"2022-09-04"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-09-04"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"        list.add(todo);","lastModifiedDate":"2022-09-04"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"     * Re-initializes a deadline object from its string representation","lastModifiedDate":"2022-08-23"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"     * in the saved file. Exception is never thrown as all deadline tasks that","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"     * is read from the file has been properly formatted.","lastModifiedDate":"2022-08-23"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"     * @param input String of the task that was parsed.","lastModifiedDate":"2022-08-23"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"    private void loadDeadline(String input, boolean isDone, TaskList list) {","lastModifiedDate":"2022-09-04"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"        assert(input.split(\" \").length !\u003d 0);","lastModifiedDate":"2022-09-03"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"        String[] taskType \u003d input.split(\" \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"        String[] taskBy \u003d taskType[1].split(\"/by \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":52,"author":{"gitId":"nealetham"},"content":"        assert(taskBy[1].trim().matches(\"(\\\\d{4})-(\\\\d{2})-(\\\\d{2}) (\\\\d{2}):(\\\\d{2})\") \u003d\u003d true);","lastModifiedDate":"2022-09-03"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"        try {","lastModifiedDate":"2022-08-22"},{"lineNumber":54,"author":{"gitId":"nealetham"},"content":"            Deadline deadline \u003d new Deadline(taskBy[0], taskBy[1]);","lastModifiedDate":"2022-08-22"},{"lineNumber":55,"author":{"gitId":"nealetham"},"content":"            if (isDone) {","lastModifiedDate":"2022-09-04"},{"lineNumber":56,"author":{"gitId":"nealetham"},"content":"                deadline.loadDone();","lastModifiedDate":"2022-09-04"},{"lineNumber":57,"author":{"gitId":"nealetham"},"content":"            }","lastModifiedDate":"2022-09-04"},{"lineNumber":58,"author":{"gitId":"nealetham"},"content":"            list.add(deadline);","lastModifiedDate":"2022-09-04"},{"lineNumber":59,"author":{"gitId":"nealetham"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-08-22"},{"lineNumber":60,"author":{"gitId":"nealetham"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-08-22"},{"lineNumber":61,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":62,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":63,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":64,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":65,"author":{"gitId":"nealetham"},"content":"     * Re-initializes an Event object from its string representation","lastModifiedDate":"2022-08-23"},{"lineNumber":66,"author":{"gitId":"nealetham"},"content":"     * in the saved file.","lastModifiedDate":"2022-08-22"},{"lineNumber":67,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":68,"author":{"gitId":"nealetham"},"content":"     * @param input String of the task that was parsed.","lastModifiedDate":"2022-08-23"},{"lineNumber":69,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":70,"author":{"gitId":"nealetham"},"content":"    private void loadEvent(String input, boolean isDone, TaskList list) {","lastModifiedDate":"2022-09-04"},{"lineNumber":71,"author":{"gitId":"nealetham"},"content":"        assert(input.split(\" \").length !\u003d 0);","lastModifiedDate":"2022-09-03"},{"lineNumber":72,"author":{"gitId":"nealetham"},"content":"        String[] taskType \u003d input.split(\" \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":73,"author":{"gitId":"nealetham"},"content":"        String[] taskBy \u003d taskType[1].split(\"/at \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":74,"author":{"gitId":"nealetham"},"content":"        Event event \u003d new Event(taskBy[0], taskBy[1]);","lastModifiedDate":"2022-08-22"},{"lineNumber":75,"author":{"gitId":"nealetham"},"content":"        if (isDone) {","lastModifiedDate":"2022-09-04"},{"lineNumber":76,"author":{"gitId":"nealetham"},"content":"            event.loadDone();","lastModifiedDate":"2022-09-04"},{"lineNumber":77,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-09-04"},{"lineNumber":78,"author":{"gitId":"nealetham"},"content":"        list.add(event);","lastModifiedDate":"2022-09-04"},{"lineNumber":79,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":80,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":81,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":82,"author":{"gitId":"nealetham"},"content":"     * Reads all tasks in file and adds them to the TaskList. If no previous","lastModifiedDate":"2022-08-23"},{"lineNumber":83,"author":{"gitId":"nealetham"},"content":"     * file has been found, it returns the TaskList provided in param.","lastModifiedDate":"2022-09-04"},{"lineNumber":84,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":85,"author":{"gitId":"nealetham"},"content":"     * @param list an empty TaskList for saved tasks to be re-written to.","lastModifiedDate":"2022-09-04"},{"lineNumber":86,"author":{"gitId":"nealetham"},"content":"     * @return TaskList with all saved tasks added to.","lastModifiedDate":"2022-08-23"},{"lineNumber":87,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":88,"author":{"gitId":"nealetham"},"content":"    public TaskList loadFile(TaskList list) {","lastModifiedDate":"2022-08-22"},{"lineNumber":89,"author":{"gitId":"nealetham"},"content":"        try {","lastModifiedDate":"2022-08-22"},{"lineNumber":90,"author":{"gitId":"nealetham"},"content":"            Scanner s \u003d new Scanner(this.file);","lastModifiedDate":"2022-08-22"},{"lineNumber":91,"author":{"gitId":"nealetham"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2022-08-22"},{"lineNumber":92,"author":{"gitId":"nealetham"},"content":"                String[] task \u003d s.nextLine().split(\" \\\\| \", -1);","lastModifiedDate":"2022-08-22"},{"lineNumber":93,"author":{"gitId":"nealetham"},"content":"                switch (task[0]) {","lastModifiedDate":"2022-08-22"},{"lineNumber":94,"author":{"gitId":"nealetham"},"content":"                case \"T\": // create event task","lastModifiedDate":"2022-08-22"},{"lineNumber":95,"author":{"gitId":"nealetham"},"content":"                    String taskString \u003d String.format(\"todo %s\", task[2]);","lastModifiedDate":"2022-08-22"},{"lineNumber":96,"author":{"gitId":"nealetham"},"content":"                    loadTodo(taskString, isLoadedTaskDone(task[1]), list);","lastModifiedDate":"2022-09-04"},{"lineNumber":97,"author":{"gitId":"nealetham"},"content":"                    break;","lastModifiedDate":"2022-08-22"},{"lineNumber":98,"author":{"gitId":"nealetham"},"content":"                case \"D\": // create deadline task","lastModifiedDate":"2022-08-22"},{"lineNumber":99,"author":{"gitId":"nealetham"},"content":"                    String deadlineString \u003d String.format(\"deadline %s/by %s\", task[2], task[3]);","lastModifiedDate":"2022-08-22"},{"lineNumber":100,"author":{"gitId":"nealetham"},"content":"                    loadDeadline(deadlineString, isLoadedTaskDone(task[1]), list);","lastModifiedDate":"2022-09-04"},{"lineNumber":101,"author":{"gitId":"nealetham"},"content":"                    break;","lastModifiedDate":"2022-08-22"},{"lineNumber":102,"author":{"gitId":"nealetham"},"content":"                case \"E\": // create event task","lastModifiedDate":"2022-08-22"},{"lineNumber":103,"author":{"gitId":"nealetham"},"content":"                    String eventString \u003d String.format(\"event %s/at %s\", task[2], task[3]);","lastModifiedDate":"2022-08-22"},{"lineNumber":104,"author":{"gitId":"nealetham"},"content":"                    loadEvent(eventString, isLoadedTaskDone(task[1]), list);","lastModifiedDate":"2022-09-04"},{"lineNumber":105,"author":{"gitId":"nealetham"},"content":"                    break;","lastModifiedDate":"2022-08-22"},{"lineNumber":106,"author":{"gitId":"nealetham"},"content":"                default:","lastModifiedDate":"2022-08-28"},{"lineNumber":107,"author":{"gitId":"nealetham"},"content":"                }","lastModifiedDate":"2022-08-22"},{"lineNumber":108,"author":{"gitId":"nealetham"},"content":"            }","lastModifiedDate":"2022-08-22"},{"lineNumber":109,"author":{"gitId":"nealetham"},"content":"            return list;","lastModifiedDate":"2022-08-22"},{"lineNumber":110,"author":{"gitId":"nealetham"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-08-22"},{"lineNumber":111,"author":{"gitId":"nealetham"},"content":"            return list;","lastModifiedDate":"2022-08-22"},{"lineNumber":112,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":113,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":114,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":115,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-09-04"},{"lineNumber":116,"author":{"gitId":"nealetham"},"content":"     * Checks if a loaded task has been marked as done.","lastModifiedDate":"2022-09-04"},{"lineNumber":117,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-09-04"},{"lineNumber":118,"author":{"gitId":"nealetham"},"content":"     * @param input the String representation of a loaded task.","lastModifiedDate":"2022-09-04"},{"lineNumber":119,"author":{"gitId":"nealetham"},"content":"     * @return boolean true if it has been marked done. False if otherwise.","lastModifiedDate":"2022-09-04"},{"lineNumber":120,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-09-04"},{"lineNumber":121,"author":{"gitId":"nealetham"},"content":"    private boolean isLoadedTaskDone(String input) {","lastModifiedDate":"2022-09-04"},{"lineNumber":122,"author":{"gitId":"nealetham"},"content":"        return input.trim().equals(\"X\");","lastModifiedDate":"2022-09-04"},{"lineNumber":123,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-09-04"},{"lineNumber":124,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":125,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":126,"author":{"gitId":"nealetham"},"content":"     * Writes all events on the TaskList to a text file. The directory and file","lastModifiedDate":"2022-08-23"},{"lineNumber":127,"author":{"gitId":"nealetham"},"content":"     * is created if it does not yet exist.","lastModifiedDate":"2022-08-23"},{"lineNumber":128,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":129,"author":{"gitId":"nealetham"},"content":"     * @param filePath where tasks are saved to and loaded from.","lastModifiedDate":"2022-08-22"},{"lineNumber":130,"author":{"gitId":"nealetham"},"content":"     * @param inputList the TaskList where all tasks are to be saved.","lastModifiedDate":"2022-08-23"},{"lineNumber":131,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":132,"author":{"gitId":"nealetham"},"content":"    public static void writeToFile(String filePath, TaskList inputList) {","lastModifiedDate":"2022-08-22"},{"lineNumber":133,"author":{"gitId":"nealetham"},"content":"        assert(inputList.isEmpty() \u003d\u003d false);","lastModifiedDate":"2022-09-03"},{"lineNumber":134,"author":{"gitId":"nealetham"},"content":"        try {","lastModifiedDate":"2022-08-22"},{"lineNumber":135,"author":{"gitId":"nealetham"},"content":"            createDirectory(filePath);","lastModifiedDate":"2022-09-04"},{"lineNumber":136,"author":{"gitId":"nealetham"},"content":"            FileWriter fw \u003d createFileWriter(filePath);","lastModifiedDate":"2022-09-04"},{"lineNumber":137,"author":{"gitId":"nealetham"},"content":"            Task[] taskArray \u003d inputList.taskListToArray();","lastModifiedDate":"2022-08-22"},{"lineNumber":138,"author":{"gitId":"nealetham"},"content":"            for (int i \u003d 0; i \u003c taskArray.length; i++) {","lastModifiedDate":"2022-08-22"},{"lineNumber":139,"author":{"gitId":"nealetham"},"content":"                String fileTextInput \u003d taskArray[i].formatFileText();","lastModifiedDate":"2022-08-22"},{"lineNumber":140,"author":{"gitId":"nealetham"},"content":"                fw.write(fileTextInput);","lastModifiedDate":"2022-08-22"},{"lineNumber":141,"author":{"gitId":"nealetham"},"content":"            }","lastModifiedDate":"2022-08-22"},{"lineNumber":142,"author":{"gitId":"nealetham"},"content":"            fw.close();","lastModifiedDate":"2022-08-22"},{"lineNumber":143,"author":{"gitId":"nealetham"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-22"},{"lineNumber":144,"author":{"gitId":"nealetham"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-08-22"},{"lineNumber":145,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":146,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":147,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":148,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-09-04"},{"lineNumber":149,"author":{"gitId":"nealetham"},"content":"     * Creates a directory for the save file if the directory is non-existent.","lastModifiedDate":"2022-09-04"},{"lineNumber":150,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-09-04"},{"lineNumber":151,"author":{"gitId":"nealetham"},"content":"     * @param filePath of the saved file.","lastModifiedDate":"2022-09-04"},{"lineNumber":152,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-09-04"},{"lineNumber":153,"author":{"gitId":"nealetham"},"content":"    private static void createDirectory(String filePath) {","lastModifiedDate":"2022-09-04"},{"lineNumber":154,"author":{"gitId":"nealetham"},"content":"        File dir \u003d new File(filePath);","lastModifiedDate":"2022-09-04"},{"lineNumber":155,"author":{"gitId":"nealetham"},"content":"        if (!dir.exists()) {","lastModifiedDate":"2022-09-04"},{"lineNumber":156,"author":{"gitId":"nealetham"},"content":"            dir.mkdirs();","lastModifiedDate":"2022-09-04"},{"lineNumber":157,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-09-04"},{"lineNumber":158,"author":{"gitId":"nealetham"},"content":"        assert(dir.exists());","lastModifiedDate":"2022-09-04"},{"lineNumber":159,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-09-04"},{"lineNumber":160,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":161,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-09-04"},{"lineNumber":162,"author":{"gitId":"nealetham"},"content":"     * Creates a FileWriter object to write tasks to a file.","lastModifiedDate":"2022-09-04"},{"lineNumber":163,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-09-04"},{"lineNumber":164,"author":{"gitId":"nealetham"},"content":"     * @param filePath of the saved file.","lastModifiedDate":"2022-09-04"},{"lineNumber":165,"author":{"gitId":"nealetham"},"content":"     * @return FileWriter object.","lastModifiedDate":"2022-09-04"},{"lineNumber":166,"author":{"gitId":"nealetham"},"content":"     * @throws IOException when there is insufficient permission to write a file in the directory.","lastModifiedDate":"2022-09-04"},{"lineNumber":167,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-09-04"},{"lineNumber":168,"author":{"gitId":"nealetham"},"content":"    private static FileWriter createFileWriter(String filePath) throws IOException {","lastModifiedDate":"2022-09-04"},{"lineNumber":169,"author":{"gitId":"nealetham"},"content":"        File textFile \u003d new File(filePath + \"/tasks.txt\");","lastModifiedDate":"2022-09-04"},{"lineNumber":170,"author":{"gitId":"nealetham"},"content":"        textFile.createNewFile();","lastModifiedDate":"2022-09-04"},{"lineNumber":171,"author":{"gitId":"nealetham"},"content":"        return new FileWriter(textFile);","lastModifiedDate":"2022-09-04"},{"lineNumber":172,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-09-04"},{"lineNumber":173,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"nealetham":173}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":" * This class is superclass of all task objects that","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":" * can be initialized in Duke.","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"public class Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"    /** The title or description of a task. */","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"    protected String description;","lastModifiedDate":"2022-08-17"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"    /** Indicates if a task is completed or not. */","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-08-17"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"     * The class constructor for a Task.","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"     * @param description of the task","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"    public Task(String description) {","lastModifiedDate":"2022-08-17"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-08-17"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-17"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"     * Outputs the corresponding status icon via a ternary","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"     * operator, according to the isDone field.","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"     * @return String \"X\" if completed, \"O\" if otherwise.","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-08-17"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"        return (isDone ? \"X\" : \"O\"); // mark done task with X","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"     * Sets the isDone field of a Task to true and outputs the","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"     * corresponding formatted text with the task description.","lastModifiedDate":"2022-08-17"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"     * @return String to indicate the task has been marked done.","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"    public String markAsDone() {","lastModifiedDate":"2022-08-17"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"        this.isDone \u003d true; // mark task as true","lastModifiedDate":"2022-08-17"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"        return String.format(\"Nice! I\u0027ve marked this task as done:\\n%s\", this);","lastModifiedDate":"2022-09-04"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"     * Sets the isDone field of a loaded Task to be true. Only used for loading","lastModifiedDate":"2022-08-23"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"     * tasks from a file. No output to prevent spamming the console.","lastModifiedDate":"2022-08-22"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"    public void loadDone() {","lastModifiedDate":"2022-08-22"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-09-04"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":52,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"     * Returns the description of a task.","lastModifiedDate":"2022-08-23"},{"lineNumber":54,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":55,"author":{"gitId":"nealetham"},"content":"     * @return description of task.","lastModifiedDate":"2022-08-17"},{"lineNumber":56,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":57,"author":{"gitId":"nealetham"},"content":"    public String getDescription() {","lastModifiedDate":"2022-08-17"},{"lineNumber":58,"author":{"gitId":"nealetham"},"content":"        return this.description;","lastModifiedDate":"2022-09-04"},{"lineNumber":59,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":60,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":61,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":62,"author":{"gitId":"nealetham"},"content":"     * Returns the formatted string representation of a Task via","lastModifiedDate":"2022-08-23"},{"lineNumber":63,"author":{"gitId":"nealetham"},"content":"     * getStatusIcon() and getDescription().","lastModifiedDate":"2022-08-17"},{"lineNumber":64,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":65,"author":{"gitId":"nealetham"},"content":"     * @return formatted string representation of a Task.","lastModifiedDate":"2022-08-23"},{"lineNumber":66,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":67,"author":{"gitId":"nealetham"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":68,"author":{"gitId":"nealetham"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), getDescription());","lastModifiedDate":"2022-09-04"},{"lineNumber":69,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":70,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":71,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":72,"author":{"gitId":"nealetham"},"content":"     * Returns a string representation of an Task object formatted","lastModifiedDate":"2022-08-23"},{"lineNumber":73,"author":{"gitId":"nealetham"},"content":"     * for writing into text file.","lastModifiedDate":"2022-08-23"},{"lineNumber":74,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":75,"author":{"gitId":"nealetham"},"content":"     * @return String of the Event formatted to saved.","lastModifiedDate":"2022-08-23"},{"lineNumber":76,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":77,"author":{"gitId":"nealetham"},"content":"    public String formatFileText() {","lastModifiedDate":"2022-08-21"},{"lineNumber":78,"author":{"gitId":"nealetham"},"content":"        return String.format(\"duke.Task | %s | %s\", this.getStatusIcon(), this.getDescription());","lastModifiedDate":"2022-09-04"},{"lineNumber":79,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":80,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"nealetham":80}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-22"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-09-04"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-22"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":" * This class handles the manipulation of all tasks, such as marking,","lastModifiedDate":"2022-08-22"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":" * adding, deleting.","lastModifiedDate":"2022-08-22"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-22"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"public class TaskList {","lastModifiedDate":"2022-08-22"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"    /** The collection to maintain our tasks. */","lastModifiedDate":"2022-08-22"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"    protected ArrayList\u003cTask\u003e inputList;","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"     * The class constructor for a TaskList. It is initialized","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"     * with an empty ArrayList, but it is filled progressively, or","lastModifiedDate":"2022-08-22"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"     * loaded from a previous save.","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"    public TaskList() {","lastModifiedDate":"2022-08-22"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"        this.inputList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-09-04"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"     * Adds a task to the ArrayList. Only used for when loading","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"     * from a previously saved list.","lastModifiedDate":"2022-08-22"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"     * @param task to be added.","lastModifiedDate":"2022-08-22"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"    public void add(Task task) {","lastModifiedDate":"2022-08-22"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"        assert(task !\u003d null);","lastModifiedDate":"2022-09-03"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"        this.inputList.add(task);","lastModifiedDate":"2022-08-22"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"     * Checks if the arraylist is empty.","lastModifiedDate":"2022-09-03"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"     * @return boolean","lastModifiedDate":"2022-09-03"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2022-09-03"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"        return this.inputList.isEmpty();","lastModifiedDate":"2022-09-03"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"     * Converts the ArrayList to a Task array for easier manipulation, such as","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"     * outputting its string representation.","lastModifiedDate":"2022-08-23"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"     * @return Task[] an array containing Deadlines, Events and Todos.","lastModifiedDate":"2022-08-23"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"    public Task[] taskListToArray() {","lastModifiedDate":"2022-08-22"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"        return inputList.toArray(new Task[inputList.size()]);","lastModifiedDate":"2022-09-04"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":52,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"     * Marks the task as completed via its index. DukeException is thrown","lastModifiedDate":"2022-08-23"},{"lineNumber":54,"author":{"gitId":"nealetham"},"content":"     * if the task is found to be non-existent.","lastModifiedDate":"2022-08-23"},{"lineNumber":55,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":56,"author":{"gitId":"nealetham"},"content":"     * @param parts sliced String input.","lastModifiedDate":"2022-08-23"},{"lineNumber":57,"author":{"gitId":"nealetham"},"content":"     * @return String confirming the marking ot a task in the list.","lastModifiedDate":"2022-08-29"},{"lineNumber":58,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException thrown if there is no such task.","lastModifiedDate":"2022-08-22"},{"lineNumber":59,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":60,"author":{"gitId":"nealetham"},"content":"    public String markTask(String[] parts) throws DukeException {","lastModifiedDate":"2022-08-29"},{"lineNumber":61,"author":{"gitId":"nealetham"},"content":"        assert(parts.length !\u003d 0);","lastModifiedDate":"2022-09-03"},{"lineNumber":62,"author":{"gitId":"nealetham"},"content":"        if (parts.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-22"},{"lineNumber":63,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"Please specify the index of the task (i.e. mark 2).\");","lastModifiedDate":"2022-08-22"},{"lineNumber":64,"author":{"gitId":"nealetham"},"content":"        } else if (Integer.parseInt(parts[1]) \u003d\u003d 0 || Integer.parseInt(parts[1]) \u003e this.inputList.size()) {","lastModifiedDate":"2022-08-22"},{"lineNumber":65,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"There is no such task!\");","lastModifiedDate":"2022-08-22"},{"lineNumber":66,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-09-04"},{"lineNumber":67,"author":{"gitId":"nealetham"},"content":"        int index \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2022-08-22"},{"lineNumber":68,"author":{"gitId":"nealetham"},"content":"        Task task \u003d inputList.get(index - 1);","lastModifiedDate":"2022-08-22"},{"lineNumber":69,"author":{"gitId":"nealetham"},"content":"        return task.markAsDone();","lastModifiedDate":"2022-08-29"},{"lineNumber":70,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":71,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":72,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":73,"author":{"gitId":"nealetham"},"content":"     * Removes the task from the arraylist. DukeException is thrown","lastModifiedDate":"2022-08-23"},{"lineNumber":74,"author":{"gitId":"nealetham"},"content":"     * if the task is found to be non-existent.","lastModifiedDate":"2022-08-23"},{"lineNumber":75,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":76,"author":{"gitId":"nealetham"},"content":"     * @param parts sliced String input.","lastModifiedDate":"2022-08-23"},{"lineNumber":77,"author":{"gitId":"nealetham"},"content":"     * @return String confirming the deletion of a task from the list.","lastModifiedDate":"2022-08-29"},{"lineNumber":78,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException thrown if there is no such task.","lastModifiedDate":"2022-08-22"},{"lineNumber":79,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":80,"author":{"gitId":"nealetham"},"content":"    public String deleteTask(String[] parts) throws DukeException {","lastModifiedDate":"2022-08-29"},{"lineNumber":81,"author":{"gitId":"nealetham"},"content":"        assert(parts.length !\u003d 0);","lastModifiedDate":"2022-09-03"},{"lineNumber":82,"author":{"gitId":"nealetham"},"content":"        if (parts.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-22"},{"lineNumber":83,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"Please specify the index of the task (i.e. delete 2).\");","lastModifiedDate":"2022-08-22"},{"lineNumber":84,"author":{"gitId":"nealetham"},"content":"        } else if (Integer.parseInt(parts[1]) \u003d\u003d 0 || Integer.parseInt(parts[1]) \u003e inputList.size()) {","lastModifiedDate":"2022-08-22"},{"lineNumber":85,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"There is no such task!\");","lastModifiedDate":"2022-08-22"},{"lineNumber":86,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-09-04"},{"lineNumber":87,"author":{"gitId":"nealetham"},"content":"        int index \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2022-08-22"},{"lineNumber":88,"author":{"gitId":"nealetham"},"content":"        Task task \u003d inputList.get(index - 1);","lastModifiedDate":"2022-08-22"},{"lineNumber":89,"author":{"gitId":"nealetham"},"content":"        inputList.remove(index - 1);","lastModifiedDate":"2022-08-22"},{"lineNumber":90,"author":{"gitId":"nealetham"},"content":"        return printDeleteTask(task);","lastModifiedDate":"2022-09-04"},{"lineNumber":91,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-09-04"},{"lineNumber":92,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":93,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-09-04"},{"lineNumber":94,"author":{"gitId":"nealetham"},"content":"     * Returns the String output for removing a task from the list.","lastModifiedDate":"2022-09-04"},{"lineNumber":95,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-09-04"},{"lineNumber":96,"author":{"gitId":"nealetham"},"content":"     * @param task that is removed.","lastModifiedDate":"2022-09-04"},{"lineNumber":97,"author":{"gitId":"nealetham"},"content":"     * @return String output detailing task removed and number of tasks remaining.","lastModifiedDate":"2022-09-04"},{"lineNumber":98,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-09-04"},{"lineNumber":99,"author":{"gitId":"nealetham"},"content":"    private String printDeleteTask(Task task) {","lastModifiedDate":"2022-09-04"},{"lineNumber":100,"author":{"gitId":"nealetham"},"content":"        return String.format(\"Noted, I\u0027ve removed this task:\\n%s\\nNow you have %s tasks in the list.\",","lastModifiedDate":"2022-09-04"},{"lineNumber":101,"author":{"gitId":"nealetham"},"content":"                task.toString(),","lastModifiedDate":"2022-08-22"},{"lineNumber":102,"author":{"gitId":"nealetham"},"content":"                inputList.size());","lastModifiedDate":"2022-08-22"},{"lineNumber":103,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":104,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":105,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":106,"author":{"gitId":"nealetham"},"content":"     * Adds task to arraylist, and formats a String representation","lastModifiedDate":"2022-08-23"},{"lineNumber":107,"author":{"gitId":"nealetham"},"content":"     * that is to be printed along with the task representation and size of list.","lastModifiedDate":"2022-08-22"},{"lineNumber":108,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":109,"author":{"gitId":"nealetham"},"content":"     * @param task from the TaskList.","lastModifiedDate":"2022-08-23"},{"lineNumber":110,"author":{"gitId":"nealetham"},"content":"     * @return String confirming the addition of the task into the list.","lastModifiedDate":"2022-08-29"},{"lineNumber":111,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":112,"author":{"gitId":"nealetham"},"content":"    public String taskAdd(Task task) {","lastModifiedDate":"2022-08-29"},{"lineNumber":113,"author":{"gitId":"nealetham"},"content":"        assert(task !\u003d null);","lastModifiedDate":"2022-09-03"},{"lineNumber":114,"author":{"gitId":"nealetham"},"content":"        this.inputList.add(task);","lastModifiedDate":"2022-08-22"},{"lineNumber":115,"author":{"gitId":"nealetham"},"content":"        return printAddTask(task);","lastModifiedDate":"2022-09-04"},{"lineNumber":116,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-09-04"},{"lineNumber":117,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":118,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-09-04"},{"lineNumber":119,"author":{"gitId":"nealetham"},"content":"     * Returns the String output for adding a task to the list.","lastModifiedDate":"2022-09-04"},{"lineNumber":120,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-09-04"},{"lineNumber":121,"author":{"gitId":"nealetham"},"content":"     * @param task that is added.","lastModifiedDate":"2022-09-04"},{"lineNumber":122,"author":{"gitId":"nealetham"},"content":"     * @return String output detailing task added and number of tasks remaining.","lastModifiedDate":"2022-09-04"},{"lineNumber":123,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-09-04"},{"lineNumber":124,"author":{"gitId":"nealetham"},"content":"    private String printAddTask(Task task) {","lastModifiedDate":"2022-09-04"},{"lineNumber":125,"author":{"gitId":"nealetham"},"content":"        return String.format(\"Got it. I\u0027ve added this task:\\n%s\\nNow you have %s tasks in the list.\",","lastModifiedDate":"2022-09-04"},{"lineNumber":126,"author":{"gitId":"nealetham"},"content":"                task.toString(),","lastModifiedDate":"2022-08-22"},{"lineNumber":127,"author":{"gitId":"nealetham"},"content":"                inputList.size());","lastModifiedDate":"2022-08-22"},{"lineNumber":128,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":129,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":130,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":131,"author":{"gitId":"nealetham"},"content":"     * Abstracts the creation of a todo object, with exception handling.","lastModifiedDate":"2022-08-22"},{"lineNumber":132,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":133,"author":{"gitId":"nealetham"},"content":"     * @param input from the Parser.","lastModifiedDate":"2022-08-23"},{"lineNumber":134,"author":{"gitId":"nealetham"},"content":"     * @return String representation of the Todo.","lastModifiedDate":"2022-08-29"},{"lineNumber":135,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException thrown if there is no description.","lastModifiedDate":"2022-08-22"},{"lineNumber":136,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":137,"author":{"gitId":"nealetham"},"content":"    public String createTodo(String input) throws DukeException {","lastModifiedDate":"2022-08-29"},{"lineNumber":138,"author":{"gitId":"nealetham"},"content":"        assert(input !\u003d null);","lastModifiedDate":"2022-09-03"},{"lineNumber":139,"author":{"gitId":"nealetham"},"content":"        String[] taskType \u003d input.split(\" \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":140,"author":{"gitId":"nealetham"},"content":"        if (taskType.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-22"},{"lineNumber":141,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2022-08-22"},{"lineNumber":142,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":143,"author":{"gitId":"nealetham"},"content":"        return taskAdd(new Todo(taskType[1]));","lastModifiedDate":"2022-09-04"},{"lineNumber":144,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":145,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":146,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":147,"author":{"gitId":"nealetham"},"content":"     * Abstracts the creation of a Deadline object, with exception handling.","lastModifiedDate":"2022-08-23"},{"lineNumber":148,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":149,"author":{"gitId":"nealetham"},"content":"     * @param input from the Parser.","lastModifiedDate":"2022-08-23"},{"lineNumber":150,"author":{"gitId":"nealetham"},"content":"     * @return String representation of the Deadline.","lastModifiedDate":"2022-08-29"},{"lineNumber":151,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException thrown if there is no description or /by field.","lastModifiedDate":"2022-08-22"},{"lineNumber":152,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":153,"author":{"gitId":"nealetham"},"content":"    public String createDeadline(String input) throws DukeException {","lastModifiedDate":"2022-08-29"},{"lineNumber":154,"author":{"gitId":"nealetham"},"content":"        assert(input !\u003d null);","lastModifiedDate":"2022-09-03"},{"lineNumber":155,"author":{"gitId":"nealetham"},"content":"        String[] taskType \u003d input.split(\" \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":156,"author":{"gitId":"nealetham"},"content":"        if (taskType.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-22"},{"lineNumber":157,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2022-08-22"},{"lineNumber":158,"author":{"gitId":"nealetham"},"content":"        } else if (taskType[1].split(\" /by \", 2).length \u003d\u003d 1) {","lastModifiedDate":"2022-08-22"},{"lineNumber":159,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"The /by field cannot be empty.\");","lastModifiedDate":"2022-08-22"},{"lineNumber":160,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":161,"author":{"gitId":"nealetham"},"content":"        String[] taskBy \u003d taskType[1].split(\" /by \", 2);","lastModifiedDate":"2022-09-04"},{"lineNumber":162,"author":{"gitId":"nealetham"},"content":"        return taskAdd(new Deadline(taskBy[0], taskBy[1]));","lastModifiedDate":"2022-09-04"},{"lineNumber":163,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":164,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":165,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":166,"author":{"gitId":"nealetham"},"content":"     * Abstracts the creation of a Event object, with exception handling.","lastModifiedDate":"2022-08-23"},{"lineNumber":167,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":168,"author":{"gitId":"nealetham"},"content":"     * @param input from the Parser.","lastModifiedDate":"2022-08-29"},{"lineNumber":169,"author":{"gitId":"nealetham"},"content":"     * @return String representation of the Event.","lastModifiedDate":"2022-08-29"},{"lineNumber":170,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException thrown if there is no description or /at field","lastModifiedDate":"2022-08-22"},{"lineNumber":171,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":172,"author":{"gitId":"nealetham"},"content":"    public String createEvent(String input) throws DukeException {","lastModifiedDate":"2022-08-29"},{"lineNumber":173,"author":{"gitId":"nealetham"},"content":"        assert(input !\u003d null);","lastModifiedDate":"2022-09-03"},{"lineNumber":174,"author":{"gitId":"nealetham"},"content":"        String[] taskType \u003d input.split(\" \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":175,"author":{"gitId":"nealetham"},"content":"        if (taskType.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-22"},{"lineNumber":176,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"The description of a event cannot be empty.\");","lastModifiedDate":"2022-08-22"},{"lineNumber":177,"author":{"gitId":"nealetham"},"content":"        } else if (taskType[1].split(\" /at \", 2).length \u003d\u003d 1) {","lastModifiedDate":"2022-08-22"},{"lineNumber":178,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"The /at field cannot be empty.\");","lastModifiedDate":"2022-08-22"},{"lineNumber":179,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":180,"author":{"gitId":"nealetham"},"content":"        String[] taskBy \u003d taskType[1].split(\" /at \", 2);","lastModifiedDate":"2022-09-04"},{"lineNumber":181,"author":{"gitId":"nealetham"},"content":"        return taskAdd(new Event(taskBy[0], taskBy[1]));","lastModifiedDate":"2022-09-04"},{"lineNumber":182,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":183,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":184,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":185,"author":{"gitId":"nealetham"},"content":"     * Returns a single String with the string representation of all tasks","lastModifiedDate":"2022-08-29"},{"lineNumber":186,"author":{"gitId":"nealetham"},"content":"     * that strictly contains the keyword provided by the user.","lastModifiedDate":"2022-09-04"},{"lineNumber":187,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":188,"author":{"gitId":"nealetham"},"content":"     * @param parts sliced String input.","lastModifiedDate":"2022-08-23"},{"lineNumber":189,"author":{"gitId":"nealetham"},"content":"     * @return String output of all tasks found with the given keyword.","lastModifiedDate":"2022-08-29"},{"lineNumber":190,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException thrown if no keyword is given.","lastModifiedDate":"2022-08-23"},{"lineNumber":191,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":192,"author":{"gitId":"nealetham"},"content":"    public String findTasks(String[] parts) throws DukeException {","lastModifiedDate":"2022-08-29"},{"lineNumber":193,"author":{"gitId":"nealetham"},"content":"        if (parts.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-23"},{"lineNumber":194,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"Please enter a keyword (i.e. find book).\");","lastModifiedDate":"2022-08-23"},{"lineNumber":195,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":196,"author":{"gitId":"nealetham"},"content":"        return printStrictMatchingTasks(parts);","lastModifiedDate":"2022-09-04"},{"lineNumber":197,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-09-04"},{"lineNumber":198,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":199,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-09-04"},{"lineNumber":200,"author":{"gitId":"nealetham"},"content":"     * Returns the String output of all tasks found to be strictly matching with the given input.","lastModifiedDate":"2022-09-04"},{"lineNumber":201,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-09-04"},{"lineNumber":202,"author":{"gitId":"nealetham"},"content":"     * @param parts sliced String input.","lastModifiedDate":"2022-09-04"},{"lineNumber":203,"author":{"gitId":"nealetham"},"content":"     * @return String output of all tasks found with the given keyword.","lastModifiedDate":"2022-09-04"},{"lineNumber":204,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-09-04"},{"lineNumber":205,"author":{"gitId":"nealetham"},"content":"    private String printStrictMatchingTasks(String[] parts) {","lastModifiedDate":"2022-09-04"},{"lineNumber":206,"author":{"gitId":"nealetham"},"content":"        ArrayList\u003cTask\u003e match \u003d fillWithStrictMatchingTasks(parts);","lastModifiedDate":"2022-09-04"},{"lineNumber":207,"author":{"gitId":"nealetham"},"content":"        String output \u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2022-09-04"},{"lineNumber":208,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":209,"author":{"gitId":"nealetham"},"content":"        if (match.size() \u003d\u003d 0) {","lastModifiedDate":"2022-09-04"},{"lineNumber":210,"author":{"gitId":"nealetham"},"content":"            return output +\u003d \"You do not have any tasks matching that keyword.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":211,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-09-04"},{"lineNumber":212,"author":{"gitId":"nealetham"},"content":"        for (int i \u003d 0; i \u003c match.size(); i++) {","lastModifiedDate":"2022-08-23"},{"lineNumber":213,"author":{"gitId":"nealetham"},"content":"            String s \u003d String.format(\"%s. %s\\n\", i + 1, match.get(i).toString());","lastModifiedDate":"2022-08-29"},{"lineNumber":214,"author":{"gitId":"nealetham"},"content":"            output +\u003d s;","lastModifiedDate":"2022-08-29"},{"lineNumber":215,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":216,"author":{"gitId":"nealetham"},"content":"        return output;","lastModifiedDate":"2022-09-04"},{"lineNumber":217,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":218,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":219,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-09-04"},{"lineNumber":220,"author":{"gitId":"nealetham"},"content":"     * Fills an ArrayList with all tasks founds to be strictly matching with the given input.","lastModifiedDate":"2022-09-04"},{"lineNumber":221,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-09-04"},{"lineNumber":222,"author":{"gitId":"nealetham"},"content":"     * @param parts sliced String input.","lastModifiedDate":"2022-09-04"},{"lineNumber":223,"author":{"gitId":"nealetham"},"content":"     * @return ArrayList with all matching tasks.","lastModifiedDate":"2022-09-04"},{"lineNumber":224,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-09-04"},{"lineNumber":225,"author":{"gitId":"nealetham"},"content":"    private ArrayList\u003cTask\u003e fillWithStrictMatchingTasks(String[] parts) {","lastModifiedDate":"2022-09-04"},{"lineNumber":226,"author":{"gitId":"nealetham"},"content":"        ArrayList\u003cTask\u003e match \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-09-04"},{"lineNumber":227,"author":{"gitId":"nealetham"},"content":"        inputList.forEach(task -\u003e {","lastModifiedDate":"2022-09-04"},{"lineNumber":228,"author":{"gitId":"nealetham"},"content":"            String[] words \u003d task.getDescription().split(\" \", -1);","lastModifiedDate":"2022-09-04"},{"lineNumber":229,"author":{"gitId":"nealetham"},"content":"            if (Arrays.asList(words).contains(parts[1])) {","lastModifiedDate":"2022-09-04"},{"lineNumber":230,"author":{"gitId":"nealetham"},"content":"                match.add(task);","lastModifiedDate":"2022-09-04"},{"lineNumber":231,"author":{"gitId":"nealetham"},"content":"            }","lastModifiedDate":"2022-09-04"},{"lineNumber":232,"author":{"gitId":"nealetham"},"content":"        });","lastModifiedDate":"2022-09-04"},{"lineNumber":233,"author":{"gitId":"nealetham"},"content":"        return match;","lastModifiedDate":"2022-09-04"},{"lineNumber":234,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-09-04"},{"lineNumber":235,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":236,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-09-04"},{"lineNumber":237,"author":{"gitId":"nealetham"},"content":"     * Returns a single String with the string representation of all tasks","lastModifiedDate":"2022-09-04"},{"lineNumber":238,"author":{"gitId":"nealetham"},"content":"     * that partially contains the keyword provided by the user.","lastModifiedDate":"2022-09-04"},{"lineNumber":239,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-09-04"},{"lineNumber":240,"author":{"gitId":"nealetham"},"content":"     * @param parts sliced String input.","lastModifiedDate":"2022-09-04"},{"lineNumber":241,"author":{"gitId":"nealetham"},"content":"     * @return String output of all tasks found with the given keyword.","lastModifiedDate":"2022-09-04"},{"lineNumber":242,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException thrown if no keyword is given.","lastModifiedDate":"2022-09-04"},{"lineNumber":243,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-09-04"},{"lineNumber":244,"author":{"gitId":"nealetham"},"content":"    public String findPartialMatchingTasks(String[] parts) throws DukeException {","lastModifiedDate":"2022-09-04"},{"lineNumber":245,"author":{"gitId":"nealetham"},"content":"        if (parts.length \u003d\u003d 1) {","lastModifiedDate":"2022-09-04"},{"lineNumber":246,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"Please enter a keyword (i.e. find book).\");","lastModifiedDate":"2022-09-04"},{"lineNumber":247,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-09-04"},{"lineNumber":248,"author":{"gitId":"nealetham"},"content":"        return printPartialMatchingTasks(parts);","lastModifiedDate":"2022-09-04"},{"lineNumber":249,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-09-04"},{"lineNumber":250,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":251,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-09-04"},{"lineNumber":252,"author":{"gitId":"nealetham"},"content":"     * Returns the String output of all tasks found to be partially matching with the given input.","lastModifiedDate":"2022-09-04"},{"lineNumber":253,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-09-04"},{"lineNumber":254,"author":{"gitId":"nealetham"},"content":"     * @param parts sliced String input.","lastModifiedDate":"2022-09-04"},{"lineNumber":255,"author":{"gitId":"nealetham"},"content":"     * @return String output of all tasks found with the given keyword.","lastModifiedDate":"2022-09-04"},{"lineNumber":256,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-09-04"},{"lineNumber":257,"author":{"gitId":"nealetham"},"content":"    private String printPartialMatchingTasks(String[] parts) {","lastModifiedDate":"2022-09-04"},{"lineNumber":258,"author":{"gitId":"nealetham"},"content":"        ArrayList\u003cTask\u003e match \u003d fillWithPartialMatchingTasks(parts);","lastModifiedDate":"2022-09-04"},{"lineNumber":259,"author":{"gitId":"nealetham"},"content":"        String output \u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2022-09-04"},{"lineNumber":260,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":261,"author":{"gitId":"nealetham"},"content":"        if (match.size() \u003d\u003d 0) {","lastModifiedDate":"2022-09-04"},{"lineNumber":262,"author":{"gitId":"nealetham"},"content":"            return output +\u003d \"You do not have any tasks matching that keyword.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":263,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-09-04"},{"lineNumber":264,"author":{"gitId":"nealetham"},"content":"        for (int i \u003d 0; i \u003c match.size(); i++) {","lastModifiedDate":"2022-09-04"},{"lineNumber":265,"author":{"gitId":"nealetham"},"content":"            String s \u003d String.format(\"%s. %s\\n\", i + 1, match.get(i).toString());","lastModifiedDate":"2022-09-04"},{"lineNumber":266,"author":{"gitId":"nealetham"},"content":"            output +\u003d s;","lastModifiedDate":"2022-09-04"},{"lineNumber":267,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-09-04"},{"lineNumber":268,"author":{"gitId":"nealetham"},"content":"        return output;","lastModifiedDate":"2022-09-04"},{"lineNumber":269,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-09-04"},{"lineNumber":270,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":271,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-09-04"},{"lineNumber":272,"author":{"gitId":"nealetham"},"content":"     * Fills an ArrayList with all tasks founds to be partially matching with the given input.","lastModifiedDate":"2022-09-04"},{"lineNumber":273,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-09-04"},{"lineNumber":274,"author":{"gitId":"nealetham"},"content":"     * @param parts sliced String input.","lastModifiedDate":"2022-09-04"},{"lineNumber":275,"author":{"gitId":"nealetham"},"content":"     * @return ArrayList with all matching tasks.","lastModifiedDate":"2022-09-04"},{"lineNumber":276,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-09-04"},{"lineNumber":277,"author":{"gitId":"nealetham"},"content":"    private ArrayList\u003cTask\u003e fillWithPartialMatchingTasks(String[] parts) {","lastModifiedDate":"2022-09-04"},{"lineNumber":278,"author":{"gitId":"nealetham"},"content":"        ArrayList\u003cTask\u003e match \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-09-04"},{"lineNumber":279,"author":{"gitId":"nealetham"},"content":"        inputList.forEach(task -\u003e {","lastModifiedDate":"2022-09-04"},{"lineNumber":280,"author":{"gitId":"nealetham"},"content":"            if (task.getDescription().contains(parts[1])) {","lastModifiedDate":"2022-09-04"},{"lineNumber":281,"author":{"gitId":"nealetham"},"content":"                match.add(task);","lastModifiedDate":"2022-09-04"},{"lineNumber":282,"author":{"gitId":"nealetham"},"content":"            }","lastModifiedDate":"2022-08-23"},{"lineNumber":283,"author":{"gitId":"nealetham"},"content":"        });","lastModifiedDate":"2022-09-04"},{"lineNumber":284,"author":{"gitId":"nealetham"},"content":"        return match;","lastModifiedDate":"2022-09-04"},{"lineNumber":285,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":286,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":287,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":288,"author":{"gitId":"nealetham"},"content":"     * Returns a single String with the string representation of all tasks","lastModifiedDate":"2022-08-29"},{"lineNumber":289,"author":{"gitId":"nealetham"},"content":"     * in the users\u0027 list concatenated together.","lastModifiedDate":"2022-08-29"},{"lineNumber":290,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-29"},{"lineNumber":291,"author":{"gitId":"nealetham"},"content":"     * @return String output of all tasks contained in the list.","lastModifiedDate":"2022-08-29"},{"lineNumber":292,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":293,"author":{"gitId":"nealetham"},"content":"    public String showTasks() {","lastModifiedDate":"2022-08-29"},{"lineNumber":294,"author":{"gitId":"nealetham"},"content":"        String output \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2022-08-29"},{"lineNumber":295,"author":{"gitId":"nealetham"},"content":"        if (inputList.size() \u003d\u003d 0) {","lastModifiedDate":"2022-09-04"},{"lineNumber":296,"author":{"gitId":"nealetham"},"content":"            return output +\u003d \"You have no tasks.\";","lastModifiedDate":"2022-09-04"},{"lineNumber":297,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-09-04"},{"lineNumber":298,"author":{"gitId":"nealetham"},"content":"        for (int i \u003d 0; i \u003c inputList.size(); i++) {","lastModifiedDate":"2022-08-23"},{"lineNumber":299,"author":{"gitId":"nealetham"},"content":"            String s \u003d String.format(\"%s. %s\\n\", i + 1, inputList.get(i).toString());","lastModifiedDate":"2022-08-29"},{"lineNumber":300,"author":{"gitId":"nealetham"},"content":"            output +\u003d s;","lastModifiedDate":"2022-08-29"},{"lineNumber":301,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":302,"author":{"gitId":"nealetham"},"content":"        return output;","lastModifiedDate":"2022-08-29"},{"lineNumber":303,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":304,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":305,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"nealetham":305}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":" * Todo is a subclass of Task. There are no additional parameters","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":" * except the description of a task.","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"     * The class constructor, which utilizes the superclass","lastModifiedDate":"2022-08-17"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"     * constructor.","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"     * @param description the description of the task.","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"    public Todo(String description) {","lastModifiedDate":"2022-08-17"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"        super(description);","lastModifiedDate":"2022-08-17"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"     * Returns a string representation of an Todo object formatted","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"     * for writing into text file.","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"     * @return String of the Todo formatted to saved.","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"    public String formatFileText() {","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"        return String.format(\"T | %s | %s\\n\", super.getStatusIcon(), this.description);","lastModifiedDate":"2022-09-04"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"     * Overrides the toString method of the superclass to add","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"     * the additional [T] tag.","lastModifiedDate":"2022-08-23"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"     * @return String representation of this task.","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-08-17"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"nealetham":40}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-22"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":" * This class handles all main interactions with the user, including","lastModifiedDate":"2022-08-22"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":" * outputting any error messages if any.","lastModifiedDate":"2022-08-22"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-22"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"public class Ui {","lastModifiedDate":"2022-08-22"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"    public Ui() {","lastModifiedDate":"2022-08-22"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"     * Returns a salutation, indicating the programme has started running.","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"     * @return String greetings to the user.","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"    public String start() {","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"        return \"Hello! I\u0027m Duke+\\nWhat can I do for you?\";","lastModifiedDate":"2022-09-13"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"     * Returns a sign-off, indicating the programme has ended.","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"     * @return String salutation to the user.","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"    public String close() {","lastModifiedDate":"2022-08-29"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2022-08-29"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"     * Returns any error message, which briefly describes its origin, and ways","lastModifiedDate":"2022-08-29"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"     * to fix it.","lastModifiedDate":"2022-08-22"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"     * @param e DukeException that was thrown.","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"     * @return String error message wrapped in e.","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"    public String showError(DukeException e) {","lastModifiedDate":"2022-08-29"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"        return e.getMessage();","lastModifiedDate":"2022-08-29"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"     * Returns the string representation of all tasks that has been","lastModifiedDate":"2022-08-29"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"     * added to the arraylist via the toString method.","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"     * @param tasks in the TaskList.","lastModifiedDate":"2022-08-23"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"     * @return String output of all tasks ithin the list.","lastModifiedDate":"2022-09-18"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"    public String printList(TaskList tasks) {","lastModifiedDate":"2022-08-29"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"        return tasks.showTasks();","lastModifiedDate":"2022-08-29"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"nealetham":51}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2022-08-29"}],"authorContributionMap":{"nealetham":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"            \u003c/content\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"    \u003c/children\u003e","lastModifiedDate":"2022-08-29"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2022-08-29"}],"authorContributionMap":{"nealetham":19}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"import duke.Deadline;","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":" * To unit test the Deadline class.","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"public class DeadlineTest {","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"     * Tests the creation of a Deadline object.","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException not thrown.","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"    public void testCreateDeadline() throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"        Deadline deadline \u003d new Deadline(\"test\", \"2000-12-12 12:12\");","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"        String result \u003d \"[D][O] test (by: DECEMBER 12 2000 12:12)\";","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"        assertEquals(result, deadline.toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"     * Tests the save format of an Deadline object.","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException not thrown.","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"    public void testFormatting() throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"        Deadline deadline \u003d new Deadline(\"test\", \"2000-12-12 12:12\");","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"        String result \u003d \"D | O | test | 2000-12-12 12:12\\n\";","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"        assertEquals(result, deadline.formatFileText());","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"     * Tests that an exception is thrown if the \"/by\" param is","lastModifiedDate":"2022-08-23"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"     * in an invalid format.","lastModifiedDate":"2022-08-23"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"    public void testIncorrectDateFormat() {","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"        Throwable exception \u003d assertThrows(Throwable.class, () -\u003e {","lastModifiedDate":"2022-08-23"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"            new Deadline(\"test\", \"tmr\");","lastModifiedDate":"2022-08-23"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"        });","lastModifiedDate":"2022-08-23"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"        assertEquals(\"Invalid Date Format (YYYY-MM-DD HH:MM required).\" , exception.getMessage());","lastModifiedDate":"2022-08-23"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"nealetham":50}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"import duke.Event;","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":" * To unit test the Event class.","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"public class EventTest {","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"     * Tests the creation of an Event object.","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"    public void testCreateEvent() {","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"        Event event \u003d new Event(\"test\", \"tmr\");","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"        String result \u003d \"[E][O] test (at: tmr)\";","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"        assertEquals(result, event.toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"     * Tests the save format of an Event object.","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"    public void testFormatting() {","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"        Event event \u003d new Event(\"test\", \"tmr\");","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"        String result \u003d \"E | O | test | tmr\\n\";","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"        assertEquals(result, event.formatFileText());","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"nealetham":32}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"import duke.Deadline;","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"import duke.Parser;","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"import duke.TaskList;","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"import duke.Todo;","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":" * To unit test the Parser class.","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"public class ParserTest {","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"     * Tests the conditional logic when encountering a todo input.","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException not thrown.","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"    public void testParseTodo() throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"        Parser parser \u003d new Parser(tasklist);","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"        parser.parse(\"todo testtodo\");","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"        Todo todo \u003d new Todo(\"testtodo\");","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"        assertEquals(todo.toString(), tasklist.taskListToArray()[0].toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"     * Tests the conditional logic when encountering a mark input.","lastModifiedDate":"2022-08-23"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException not thrown.","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"    public void testMark() throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2022-08-23"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"        Deadline deadline \u003d new Deadline(\"testdeadline\", \"2012-12-12 12:12\");","lastModifiedDate":"2022-08-23"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"        deadline.markAsDone();","lastModifiedDate":"2022-08-23"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"        tasklist.add(deadline);","lastModifiedDate":"2022-08-23"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"        Parser parser \u003d new Parser(tasklist);","lastModifiedDate":"2022-08-23"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"        parser.parse(\"deadline testdeadline /by 2012-12-12 12:12\");","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"        parser.parse(\"mark 2\");","lastModifiedDate":"2022-08-23"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"        assertEquals(tasklist.taskListToArray()[0].toString(), tasklist.taskListToArray()[1].toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"     * Tests the conditional logic when encountering an invalid input.","lastModifiedDate":"2022-08-23"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":52,"author":{"gitId":"nealetham"},"content":"    public void testInvalidInput() {","lastModifiedDate":"2022-08-23"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"        Parser parser \u003d new Parser(new TaskList());","lastModifiedDate":"2022-08-23"},{"lineNumber":54,"author":{"gitId":"nealetham"},"content":"        Throwable exception \u003d assertThrows(Throwable.class, () -\u003e {","lastModifiedDate":"2022-08-23"},{"lineNumber":55,"author":{"gitId":"nealetham"},"content":"            parser.parse(\"test\");","lastModifiedDate":"2022-08-23"},{"lineNumber":56,"author":{"gitId":"nealetham"},"content":"        });","lastModifiedDate":"2022-08-23"},{"lineNumber":57,"author":{"gitId":"nealetham"},"content":"        assertEquals(\"I\u0027m sorry, but I don\u0027t know what that means :(\" , exception.getMessage());","lastModifiedDate":"2022-08-23"},{"lineNumber":58,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":59,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":60,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"nealetham":60}},{"path":"src/test/java/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"import duke.Storage;","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"import duke.TaskList;","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"import duke.Todo;","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":" * To unit test the Storage class.","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"public class StorageTest {","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"     * Tests the case where the specified filepath does not exist.","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"    public void testLoadEmptyFile() {","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"        Todo todo \u003d new Todo(\"test123\");","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"        tasklist.add(todo);","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"        Storage storage \u003d new Storage(\"fake/\");","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"        TaskList loadedFile \u003d storage.loadFile(tasklist);","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"        assertEquals(tasklist, loadedFile);","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"     * Tests if the saved file has been loaded properly into the tasklist.","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"    public void testLoadSavedFileTodo() {","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"        Storage storage \u003d new Storage(\"src/test/java/test.txt\");","lastModifiedDate":"2022-08-23"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"        TaskList task \u003d storage.loadFile(new TaskList());","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"        String todo \u003d new Todo(\"test\").toString();","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"        assertEquals(todo, task.taskListToArray()[0].toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"     * Tests if the saved file has been loaded properly into the tasklist.","lastModifiedDate":"2022-08-23"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"    public void testLoadSavedFileDeadline() {","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"        Storage storage \u003d new Storage(\"src/test/java/test.txt\");","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"        TaskList task \u003d storage.loadFile(new TaskList());","lastModifiedDate":"2022-08-23"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"        String deadline \u003d \"[D][X] test (by: DECEMBER 12 2022 10:55)\";","lastModifiedDate":"2022-08-23"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"        assertEquals(deadline, task.taskListToArray()[1].toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"nealetham":48}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"import duke.Deadline;","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"import duke.DukeException;","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"import duke.Event;","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"import duke.Task;","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"import duke.TaskList;","lastModifiedDate":"2022-08-28"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"import duke.Todo;","lastModifiedDate":"2022-08-28"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":" * To unit test the TaskList class.","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"public class TaskListTest {","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"     * Tests the creation of a todo object.","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException not thrown.","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"    public void testCreateTodo() throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"        TaskList test \u003d new TaskList();","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"        test.createTodo(\"todo todotest\");","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"        Task[] testArray \u003d test.taskListToArray();","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"        assertEquals(new Todo(\"todotest\").toString(), testArray[0].toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"     * Tests the creation of a deadline object.","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException not thrown.","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"    public void testCreateDeadline() throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"        TaskList test \u003d new TaskList();","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"        test.createDeadline(\"deadline deadlinetest /by 2012-12-12 12:12\");","lastModifiedDate":"2022-08-23"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"        Task[] testArray \u003d test.taskListToArray();","lastModifiedDate":"2022-08-23"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"        assertEquals(new Deadline(\"deadlinetest\", \"2012-12-12 12:12\").toString(), testArray[0].toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"     * Tests the creation of a event object.","lastModifiedDate":"2022-08-23"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException not thrown.","lastModifiedDate":"2022-08-23"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"    public void testCreateEvent() throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"        TaskList test \u003d new TaskList();","lastModifiedDate":"2022-08-23"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"        test.createEvent(\"event eventtest /at tmr\");","lastModifiedDate":"2022-08-23"},{"lineNumber":52,"author":{"gitId":"nealetham"},"content":"        Task[] testArray \u003d test.taskListToArray();","lastModifiedDate":"2022-08-23"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"        assertEquals(new Event(\"eventtest\", \"tmr\").toString(), testArray[0].toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":54,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":55,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"nealetham":55}},{"path":"src/test/java/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-28"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"import duke.Todo;","lastModifiedDate":"2022-08-28"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":" * To unit test the Todo class.","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"public class TodoTest {","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"     * Tests the creation of a todo object.","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"    public void testCreateTodo() {","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"        Todo todo \u003d new Todo(\"test\");","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"        String result \u003d \"[T][O] test\";","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"        assertEquals(result, todo.toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"     * Tests the save format of an Event object.","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"    public void testFormatting() {","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"        Todo todo \u003d new Todo(\"test\");","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"        String result \u003d \"T | O | test\\n\";","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"        assertEquals(result, todo.formatFileText());","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"nealetham":32}},{"path":"src/test/java/test.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"T | O | test","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"D | X | test | 2022-12-12 10:55","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"nealetham":2}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"todo borrow book","lastModifiedDate":"2022-08-18"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"deadline return book /by Sunday","lastModifiedDate":"2022-08-18"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2022-08-18"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"list","lastModifiedDate":"2022-08-18"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"mark 2","lastModifiedDate":"2022-08-18"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2022-08-18"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"mark 1","lastModifiedDate":"2022-08-18"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"bye","lastModifiedDate":"2022-08-18"}],"authorContributionMap":{"nealetham":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"nealetham":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"nealetham":1,"-":37}}]
