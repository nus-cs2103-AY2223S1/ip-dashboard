[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"# duke.Duke project template","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"nealetham":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"    implementation \u0027org.junit.jupiter:junit-jupiter:5.7.0\u0027","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"    implementation \u0027org.junit.jupiter:junit-jupiter:5.7.0\u0027","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.7.0\u0027","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.7.0\u0027","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"nealetham":5,"-":38}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-08-22"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-08-22"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"    /** The deadline of the task. */","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2022-08-22"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"     * The class constructor, which utilizes the superclass","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"     * constructor.","lastModifiedDate":"2022-08-17"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"     * @param description The description of the task.","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"     * @param by The deadline of the task.","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"    public Deadline(String description, String by) throws DukeException {","lastModifiedDate":"2022-08-22"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"        super(description);","lastModifiedDate":"2022-08-17"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"        if (by.trim().matches(\"(\\\\d{4})-(\\\\d{2})-(\\\\d{2}) (\\\\d{2}):(\\\\d{2})\")) {","lastModifiedDate":"2022-08-22"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"            String preDate \u003d by.split(\" \", 2)[0];","lastModifiedDate":"2022-08-22"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"            String preTime \u003d by.split(\" \", 2)[1];","lastModifiedDate":"2022-08-22"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"            String[] dates \u003d preDate.split(\"-\", 3);","lastModifiedDate":"2022-08-22"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"            String[] time \u003d preTime.split(\":\", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"            LocalDateTime deadline \u003d LocalDateTime.of(Integer.parseInt(dates[0]), Integer.parseInt(dates[1]),","lastModifiedDate":"2022-08-22"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"                    Integer.parseInt(dates[2]), Integer.parseInt(time[0]), Integer.parseInt(time[1]));","lastModifiedDate":"2022-08-22"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"            this.by \u003d deadline;","lastModifiedDate":"2022-08-22"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"        } else {","lastModifiedDate":"2022-08-22"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"Invalid Date Format (YYYY-MM-DD HH:MM required).\");","lastModifiedDate":"2022-08-22"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"     * Returns a string of  deadline to be displayed, formatted","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"     * as MONTH DATE YEAR i.e. MARCH 19 2022.","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"     * @return String of the deadline to be displayed.","lastModifiedDate":"2022-08-22"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"    public String formatTime() {","lastModifiedDate":"2022-08-22"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"        if (this.by.getMinute() \u003c 10) {","lastModifiedDate":"2022-08-22"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"            String minute \u003d String.format(\"%02d\", this.by.getMinute());","lastModifiedDate":"2022-08-22"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"            String s \u003d String.format(\"%s %s %s %s:%s\", this.by.getMonth(), this.by.getDayOfMonth(),","lastModifiedDate":"2022-08-22"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"                    this.by.getYear(), this.by.getHour(), minute);","lastModifiedDate":"2022-08-22"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"            return s;","lastModifiedDate":"2022-08-22"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"        String s \u003d String.format(\"%s %s %s %s:%s\", this.by.getMonth(), this.by.getDayOfMonth(),","lastModifiedDate":"2022-08-22"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"                this.by.getYear(), this.by.getHour(), this.by.getMinute());","lastModifiedDate":"2022-08-22"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"        return s;","lastModifiedDate":"2022-08-22"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":52,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"     * Returns a string representation of a Deadline object formatted","lastModifiedDate":"2022-08-23"},{"lineNumber":54,"author":{"gitId":"nealetham"},"content":"     * for writing into text file.","lastModifiedDate":"2022-08-23"},{"lineNumber":55,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":56,"author":{"gitId":"nealetham"},"content":"     * @return String of the deadline formatted to saved.","lastModifiedDate":"2022-08-23"},{"lineNumber":57,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":58,"author":{"gitId":"nealetham"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":59,"author":{"gitId":"nealetham"},"content":"    public String formatFileText() {","lastModifiedDate":"2022-08-21"},{"lineNumber":60,"author":{"gitId":"nealetham"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2022-08-22"},{"lineNumber":61,"author":{"gitId":"nealetham"},"content":"        String s \u003d String.format(\"D | %s | %s | %s\\n\", super.getStatusIcon(), this.description, this.by.format(format));","lastModifiedDate":"2022-08-22"},{"lineNumber":62,"author":{"gitId":"nealetham"},"content":"        return s;","lastModifiedDate":"2022-08-21"},{"lineNumber":63,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":64,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":65,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":66,"author":{"gitId":"nealetham"},"content":"     * Overrides the toString method of the superclass to add","lastModifiedDate":"2022-08-17"},{"lineNumber":67,"author":{"gitId":"nealetham"},"content":"     * the additional [D] tag.","lastModifiedDate":"2022-08-17"},{"lineNumber":68,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":69,"author":{"gitId":"nealetham"},"content":"     * @return String representation of this task.","lastModifiedDate":"2022-08-17"},{"lineNumber":70,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":71,"author":{"gitId":"nealetham"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":72,"author":{"gitId":"nealetham"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":73,"author":{"gitId":"nealetham"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + formatTime() + \")\";","lastModifiedDate":"2022-08-22"},{"lineNumber":74,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":75,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":76,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"nealetham":76}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-17"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"    /** The storage component. */","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"    private Storage storage;","lastModifiedDate":"2022-08-22"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"    /** The tasks component. */","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"    private TaskList tasks;","lastModifiedDate":"2022-08-22"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"    /** The parse component. */","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"    private Parser parser;","lastModifiedDate":"2022-08-22"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"    /** The ui component. */","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"    private Ui ui;","lastModifiedDate":"2022-08-22"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"     * The class constructor for Duke. Initializes all necessary","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"     * objects for usage. Reads and loads saved tasks if available.","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"     * @param filePath of the file.","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2022-08-22"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2022-08-22"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2022-08-22"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"        this.tasks \u003d storage.loadFile(new TaskList());","lastModifiedDate":"2022-08-22"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"        this.parser \u003d new Parser(tasks);","lastModifiedDate":"2022-08-22"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"     * Initializes the core functionality of Duke. One-half of the decision making","lastModifiedDate":"2022-08-23"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"     * tree of Duke. Application terminates when it encounters \"bye\".","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"    public void run() {","lastModifiedDate":"2022-08-22"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"        this.ui.start();","lastModifiedDate":"2022-08-22"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"        Scanner myObj \u003d new Scanner(System.in);","lastModifiedDate":"2022-08-17"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"        String input \u003d myObj.nextLine();","lastModifiedDate":"2022-08-17"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"        while (!input.equals(\"bye\")) {","lastModifiedDate":"2022-08-17"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"            if (input.equals(\"list\")) {","lastModifiedDate":"2022-08-17"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"                ui.printList(this.tasks);","lastModifiedDate":"2022-08-22"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"            } else {","lastModifiedDate":"2022-08-22"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"                try {","lastModifiedDate":"2022-08-18"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"                    this.parser.parse(input);","lastModifiedDate":"2022-08-22"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"                    storage.writeToFile(\"./data\", this.tasks);","lastModifiedDate":"2022-08-22"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2022-08-18"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"                    ui.showError(e);","lastModifiedDate":"2022-08-22"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"                }","lastModifiedDate":"2022-08-18"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"            }","lastModifiedDate":"2022-08-18"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"            input \u003d myObj.nextLine();","lastModifiedDate":"2022-08-17"},{"lineNumber":52,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-17"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":54,"author":{"gitId":"nealetham"},"content":"        this.ui.close();","lastModifiedDate":"2022-08-22"},{"lineNumber":55,"author":{"gitId":"nealetham"},"content":"        myObj.close();","lastModifiedDate":"2022-08-17"},{"lineNumber":56,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":57,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":58,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":59,"author":{"gitId":"nealetham"},"content":"     * Starts the Duke application.","lastModifiedDate":"2022-08-23"},{"lineNumber":60,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":61,"author":{"gitId":"nealetham"},"content":"     * @param args of user input.","lastModifiedDate":"2022-08-23"},{"lineNumber":62,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":63,"author":{"gitId":"nealetham"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-08-22"},{"lineNumber":64,"author":{"gitId":"nealetham"},"content":"        new Duke(\"data/tasks.txt\").run();","lastModifiedDate":"2022-08-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"nealetham":63,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-08-18"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-18"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"     * The class constructor for a DukeException.","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"     * @param message description of the error.","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-18"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"    public DukeException(String message) {","lastModifiedDate":"2022-08-18"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"        super(message);","lastModifiedDate":"2022-08-18"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-18"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-18"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-18"}],"authorContributionMap":{"nealetham":14}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"public class Event extends Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"    /** The time of the event. */","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"    protected String at;","lastModifiedDate":"2022-08-17"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"     * The class constructor, which utilizes the superclass","lastModifiedDate":"2022-08-17"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"     * constructor.","lastModifiedDate":"2022-08-17"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"     * @param description the description of the task.","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"     * @param at the time of the event.","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2022-08-17"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"        super(description);","lastModifiedDate":"2022-08-17"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"        this.at \u003d at;","lastModifiedDate":"2022-08-17"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"     * Returns a string representation of an Event object formatted","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"     * for writing into text file.","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"     * @return String of the Event formatted to saved.","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"    public String formatFileText() {","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"        String s \u003d String.format(\"E | %s | %s | %s\\n\", super.getStatusIcon(), this.description, this.at);","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"        return s;","lastModifiedDate":"2022-08-21"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"     * Overrides the toString method of the superclass to add","lastModifiedDate":"2022-08-17"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"     * the additional [E] tag.","lastModifiedDate":"2022-08-17"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"     * @return String representation of this task.","lastModifiedDate":"2022-08-17"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.at + \")\";","lastModifiedDate":"2022-08-17"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"nealetham":41}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-22"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":" * This class handles the parsing of the user input command.","lastModifiedDate":"2022-08-22"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":" * This is the other half of the decision making tree.","lastModifiedDate":"2022-08-22"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-22"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"public class Parser {","lastModifiedDate":"2022-08-22"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"    /** The TaskList where new tasks are added to. */","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"    private TaskList tasks;","lastModifiedDate":"2022-08-22"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"     * The class constructor for Parser.","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"     * @param tasks where tasks are to be added.","lastModifiedDate":"2022-08-22"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"    public Parser(TaskList tasks) {","lastModifiedDate":"2022-08-22"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2022-08-22"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"     * Handles all input and diverts it to the necessary methods for its","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"     * core functionality.","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"     * @param input String from the user.","lastModifiedDate":"2022-08-22"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException when the input is not known.","lastModifiedDate":"2022-08-22"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"    public void parse(String input) throws DukeException {","lastModifiedDate":"2022-08-22"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"        String[] parts \u003d input.split(\" \");","lastModifiedDate":"2022-08-22"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"        if (parts[0].equals(\"mark\")) {","lastModifiedDate":"2022-08-22"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"            tasks.markTask(parts);","lastModifiedDate":"2022-08-22"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"        } else if (parts[0].equals(\"todo\")) {","lastModifiedDate":"2022-08-22"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"            tasks.createTodo(input);","lastModifiedDate":"2022-08-22"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"        } else if (parts[0].equals(\"deadline\")) {","lastModifiedDate":"2022-08-22"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"            tasks.createDeadline(input);","lastModifiedDate":"2022-08-22"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"        } else if (parts[0].equals(\"event\")) {","lastModifiedDate":"2022-08-22"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"            tasks.createEvent(input);","lastModifiedDate":"2022-08-22"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"        } else if (parts[0].equals(\"delete\")) {","lastModifiedDate":"2022-08-22"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"            tasks.deleteTask(parts);","lastModifiedDate":"2022-08-22"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"        } else if (parts[0].equals(\"find\")) {","lastModifiedDate":"2022-08-23"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"            tasks.findTasks(parts);","lastModifiedDate":"2022-08-23"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"        } else {","lastModifiedDate":"2022-08-22"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :(\");","lastModifiedDate":"2022-08-22"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-22"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"nealetham":46}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import java.io.File;","lastModifiedDate":"2022-08-22"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-08-22"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-08-22"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-22"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-22"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-22"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":" * This class handles loading tasks from the file and saving tasks in the file.","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-22"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"public class Storage {","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"    /** The file where tasks are loaded from and saved to. */","lastModifiedDate":"2022-08-22"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"    protected File file;","lastModifiedDate":"2022-08-22"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"     * The class constructor for Storage.","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"     * @param filePath where tasks are saved to and loaded from.","lastModifiedDate":"2022-08-22"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2022-08-22"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"        this.file \u003d new File(filePath);","lastModifiedDate":"2022-08-22"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"     * Re-initializes a todo object from its string representation","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"     * in the saved file.","lastModifiedDate":"2022-08-22"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"     * @param input String of the task that was parsed.","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"     * @return Todo object.","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"    private Todo loadTodo(String input) {","lastModifiedDate":"2022-08-23"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"        String[] taskType \u003d input.split(\" \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"        Todo todo \u003d new Todo(taskType[1]);","lastModifiedDate":"2022-08-22"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"        return todo;","lastModifiedDate":"2022-08-22"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"     * Re-initializes a deadline object from its string representation","lastModifiedDate":"2022-08-23"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"     * in the saved file. Exception is never thrown as all deadline tasks that","lastModifiedDate":"2022-08-23"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"     * is read from the file has been properly formatted.","lastModifiedDate":"2022-08-23"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"     * @param input String of the task that was parsed.","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"     * @return Deadline object.","lastModifiedDate":"2022-08-23"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"    private Deadline loadDeadline(String input) {","lastModifiedDate":"2022-08-23"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"        String[] taskType \u003d input.split(\" \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"        String[] taskBy \u003d taskType[1].split(\"/by \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"        try {","lastModifiedDate":"2022-08-22"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"            Deadline deadline \u003d new Deadline(taskBy[0], taskBy[1]);","lastModifiedDate":"2022-08-22"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"            return deadline;","lastModifiedDate":"2022-08-22"},{"lineNumber":52,"author":{"gitId":"nealetham"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-08-22"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-08-22"},{"lineNumber":54,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":55,"author":{"gitId":"nealetham"},"content":"        return null;","lastModifiedDate":"2022-08-22"},{"lineNumber":56,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":57,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":58,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":59,"author":{"gitId":"nealetham"},"content":"     * Re-initializes an Event object from its string representation","lastModifiedDate":"2022-08-23"},{"lineNumber":60,"author":{"gitId":"nealetham"},"content":"     * in the saved file.","lastModifiedDate":"2022-08-22"},{"lineNumber":61,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":62,"author":{"gitId":"nealetham"},"content":"     * @param input String of the task that was parsed.","lastModifiedDate":"2022-08-23"},{"lineNumber":63,"author":{"gitId":"nealetham"},"content":"     * @return Event object.","lastModifiedDate":"2022-08-23"},{"lineNumber":64,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":65,"author":{"gitId":"nealetham"},"content":"    private Event loadEvent(String input) {","lastModifiedDate":"2022-08-23"},{"lineNumber":66,"author":{"gitId":"nealetham"},"content":"        String[] taskType \u003d input.split(\" \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":67,"author":{"gitId":"nealetham"},"content":"        String[] taskBy \u003d taskType[1].split(\"/at \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":68,"author":{"gitId":"nealetham"},"content":"        Event event \u003d new Event(taskBy[0], taskBy[1]);","lastModifiedDate":"2022-08-22"},{"lineNumber":69,"author":{"gitId":"nealetham"},"content":"        return event;","lastModifiedDate":"2022-08-22"},{"lineNumber":70,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":71,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":72,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":73,"author":{"gitId":"nealetham"},"content":"     * Reads all tasks in file and adds them to the TaskList. If no previous","lastModifiedDate":"2022-08-23"},{"lineNumber":74,"author":{"gitId":"nealetham"},"content":"     * file has been found, it returns the tasklist provided in param.","lastModifiedDate":"2022-08-23"},{"lineNumber":75,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":76,"author":{"gitId":"nealetham"},"content":"     * @param list an empty tasklist for saved tasks to be re-written to.","lastModifiedDate":"2022-08-23"},{"lineNumber":77,"author":{"gitId":"nealetham"},"content":"     * @return TaskList with all saved tasks added to.","lastModifiedDate":"2022-08-23"},{"lineNumber":78,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":79,"author":{"gitId":"nealetham"},"content":"    public TaskList loadFile(TaskList list) {","lastModifiedDate":"2022-08-22"},{"lineNumber":80,"author":{"gitId":"nealetham"},"content":"        try {","lastModifiedDate":"2022-08-22"},{"lineNumber":81,"author":{"gitId":"nealetham"},"content":"            Scanner s \u003d new Scanner(this.file);","lastModifiedDate":"2022-08-22"},{"lineNumber":82,"author":{"gitId":"nealetham"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2022-08-22"},{"lineNumber":83,"author":{"gitId":"nealetham"},"content":"                String[] task \u003d s.nextLine().split(\" \\\\| \",-1);","lastModifiedDate":"2022-08-22"},{"lineNumber":84,"author":{"gitId":"nealetham"},"content":"                switch (task[0]) {","lastModifiedDate":"2022-08-22"},{"lineNumber":85,"author":{"gitId":"nealetham"},"content":"                case \"T\": // create event task","lastModifiedDate":"2022-08-22"},{"lineNumber":86,"author":{"gitId":"nealetham"},"content":"                    String taskString \u003d String.format(\"todo %s\", task[2]);","lastModifiedDate":"2022-08-22"},{"lineNumber":87,"author":{"gitId":"nealetham"},"content":"                    Todo newTodo \u003d loadTodo(taskString);","lastModifiedDate":"2022-08-22"},{"lineNumber":88,"author":{"gitId":"nealetham"},"content":"                    if (task[1].trim().equals(\"X\")) {","lastModifiedDate":"2022-08-22"},{"lineNumber":89,"author":{"gitId":"nealetham"},"content":"                        newTodo.loadDone();","lastModifiedDate":"2022-08-22"},{"lineNumber":90,"author":{"gitId":"nealetham"},"content":"                    }","lastModifiedDate":"2022-08-22"},{"lineNumber":91,"author":{"gitId":"nealetham"},"content":"                    list.add(newTodo);","lastModifiedDate":"2022-08-22"},{"lineNumber":92,"author":{"gitId":"nealetham"},"content":"                    break;","lastModifiedDate":"2022-08-22"},{"lineNumber":93,"author":{"gitId":"nealetham"},"content":"                case \"D\": // create deadline task","lastModifiedDate":"2022-08-22"},{"lineNumber":94,"author":{"gitId":"nealetham"},"content":"                    String deadlineString \u003d String.format(\"deadline %s/by %s\", task[2], task[3]);","lastModifiedDate":"2022-08-22"},{"lineNumber":95,"author":{"gitId":"nealetham"},"content":"                    Deadline newDeadline \u003d loadDeadline(deadlineString);","lastModifiedDate":"2022-08-22"},{"lineNumber":96,"author":{"gitId":"nealetham"},"content":"                    if (task[1].trim().equals(\"X\")) {","lastModifiedDate":"2022-08-22"},{"lineNumber":97,"author":{"gitId":"nealetham"},"content":"                        newDeadline.loadDone();","lastModifiedDate":"2022-08-22"},{"lineNumber":98,"author":{"gitId":"nealetham"},"content":"                    }","lastModifiedDate":"2022-08-22"},{"lineNumber":99,"author":{"gitId":"nealetham"},"content":"                    list.add(newDeadline);","lastModifiedDate":"2022-08-22"},{"lineNumber":100,"author":{"gitId":"nealetham"},"content":"                    break;","lastModifiedDate":"2022-08-22"},{"lineNumber":101,"author":{"gitId":"nealetham"},"content":"                case \"E\": // create event task","lastModifiedDate":"2022-08-22"},{"lineNumber":102,"author":{"gitId":"nealetham"},"content":"                    String eventString \u003d String.format(\"event %s/at %s\", task[2], task[3]);","lastModifiedDate":"2022-08-22"},{"lineNumber":103,"author":{"gitId":"nealetham"},"content":"                    Event newEvent \u003d loadEvent(eventString);","lastModifiedDate":"2022-08-22"},{"lineNumber":104,"author":{"gitId":"nealetham"},"content":"                    if (task[1].trim().equals(\"X\")) {","lastModifiedDate":"2022-08-22"},{"lineNumber":105,"author":{"gitId":"nealetham"},"content":"                        newEvent.loadDone();","lastModifiedDate":"2022-08-22"},{"lineNumber":106,"author":{"gitId":"nealetham"},"content":"                    }","lastModifiedDate":"2022-08-22"},{"lineNumber":107,"author":{"gitId":"nealetham"},"content":"                    list.add(newEvent);","lastModifiedDate":"2022-08-22"},{"lineNumber":108,"author":{"gitId":"nealetham"},"content":"                    break;","lastModifiedDate":"2022-08-22"},{"lineNumber":109,"author":{"gitId":"nealetham"},"content":"                }","lastModifiedDate":"2022-08-22"},{"lineNumber":110,"author":{"gitId":"nealetham"},"content":"            }","lastModifiedDate":"2022-08-22"},{"lineNumber":111,"author":{"gitId":"nealetham"},"content":"            return list;","lastModifiedDate":"2022-08-22"},{"lineNumber":112,"author":{"gitId":"nealetham"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-08-22"},{"lineNumber":113,"author":{"gitId":"nealetham"},"content":"            return list;","lastModifiedDate":"2022-08-22"},{"lineNumber":114,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":115,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":116,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":117,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":118,"author":{"gitId":"nealetham"},"content":"     * Writes all events on the TaskList to a text file. The directory and file","lastModifiedDate":"2022-08-23"},{"lineNumber":119,"author":{"gitId":"nealetham"},"content":"     * is created if it does not yet exist.","lastModifiedDate":"2022-08-23"},{"lineNumber":120,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":121,"author":{"gitId":"nealetham"},"content":"     * @param filePath where tasks are saved to and loaded from.","lastModifiedDate":"2022-08-22"},{"lineNumber":122,"author":{"gitId":"nealetham"},"content":"     * @param inputList the TaskList where all tasks are to be saved.","lastModifiedDate":"2022-08-23"},{"lineNumber":123,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":124,"author":{"gitId":"nealetham"},"content":"    public static void writeToFile(String filePath, TaskList inputList)  {","lastModifiedDate":"2022-08-22"},{"lineNumber":125,"author":{"gitId":"nealetham"},"content":"        try {","lastModifiedDate":"2022-08-22"},{"lineNumber":126,"author":{"gitId":"nealetham"},"content":"            File dir \u003d new File(filePath);","lastModifiedDate":"2022-08-22"},{"lineNumber":127,"author":{"gitId":"nealetham"},"content":"            if (!dir.exists()) dir.mkdirs();","lastModifiedDate":"2022-08-22"},{"lineNumber":128,"author":{"gitId":"nealetham"},"content":"            File textFile \u003d new File(filePath + \"/tasks.txt\");","lastModifiedDate":"2022-08-22"},{"lineNumber":129,"author":{"gitId":"nealetham"},"content":"            textFile.createNewFile();","lastModifiedDate":"2022-08-22"},{"lineNumber":130,"author":{"gitId":"nealetham"},"content":"            FileWriter fw \u003d new FileWriter(textFile);","lastModifiedDate":"2022-08-22"},{"lineNumber":131,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":132,"author":{"gitId":"nealetham"},"content":"            Task[] taskArray \u003d inputList.taskListToArray();","lastModifiedDate":"2022-08-22"},{"lineNumber":133,"author":{"gitId":"nealetham"},"content":"            for (int i \u003d 0; i \u003c taskArray.length; i++) {","lastModifiedDate":"2022-08-22"},{"lineNumber":134,"author":{"gitId":"nealetham"},"content":"                String fileTextInput \u003d taskArray[i].formatFileText();","lastModifiedDate":"2022-08-22"},{"lineNumber":135,"author":{"gitId":"nealetham"},"content":"                fw.write(fileTextInput);","lastModifiedDate":"2022-08-22"},{"lineNumber":136,"author":{"gitId":"nealetham"},"content":"            }","lastModifiedDate":"2022-08-22"},{"lineNumber":137,"author":{"gitId":"nealetham"},"content":"            fw.close();","lastModifiedDate":"2022-08-22"},{"lineNumber":138,"author":{"gitId":"nealetham"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-08-22"},{"lineNumber":139,"author":{"gitId":"nealetham"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-08-22"},{"lineNumber":140,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":141,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":142,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"nealetham":142}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"public class Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"    /** The title or description of a task. */","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"    protected String description;","lastModifiedDate":"2022-08-17"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"    /** Indicates if a task is completed or not. */","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-08-17"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"     * The class constructor for a Task.","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"     * @param description of the task","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"    public Task(String description) {","lastModifiedDate":"2022-08-17"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-08-17"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-17"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"     * Outputs the corresponding status icon via a ternary","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"     * operator, according to the isDone field.","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"     * @return String \"X\" if completed, \"O\" if otherwise.","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-08-17"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"        return (isDone ? \"X\" : \"O\"); // mark done task with X","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"     * Sets the isDone field of a Task to true and outputs the","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"     * corresponding formatted text with the task description.","lastModifiedDate":"2022-08-17"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"     * @return String to indicate the task has been marked done.","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"    public String markAsDone() {","lastModifiedDate":"2022-08-17"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"        this.isDone \u003d true; // mark task as true","lastModifiedDate":"2022-08-17"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"        String result \u003d String.format(\"Nice! I\u0027ve marked this task as done:\\n%s\", this.toString());","lastModifiedDate":"2022-08-17"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"        return result;","lastModifiedDate":"2022-08-17"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"     * Sets the isDone field of a loaded Task to be true. Only used for loading","lastModifiedDate":"2022-08-23"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"     * tasks from a file. No output to prevent spamming the console.","lastModifiedDate":"2022-08-22"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"    public void loadDone() {","lastModifiedDate":"2022-08-22"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"        this.isDone \u003d true; // mark task as true","lastModifiedDate":"2022-08-22"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"     * Returns the description of a task.","lastModifiedDate":"2022-08-23"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":52,"author":{"gitId":"nealetham"},"content":"     * @return description of task.","lastModifiedDate":"2022-08-17"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":54,"author":{"gitId":"nealetham"},"content":"    public String getDescription() {","lastModifiedDate":"2022-08-17"},{"lineNumber":55,"author":{"gitId":"nealetham"},"content":"        return this.description; // get description of task","lastModifiedDate":"2022-08-17"},{"lineNumber":56,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":57,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":58,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":59,"author":{"gitId":"nealetham"},"content":"     * Returns the formatted string representation of a Task via","lastModifiedDate":"2022-08-23"},{"lineNumber":60,"author":{"gitId":"nealetham"},"content":"     * getStatusIcon() and getDescription().","lastModifiedDate":"2022-08-17"},{"lineNumber":61,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":62,"author":{"gitId":"nealetham"},"content":"     * @return formatted string representation of a Task.","lastModifiedDate":"2022-08-23"},{"lineNumber":63,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":64,"author":{"gitId":"nealetham"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":65,"author":{"gitId":"nealetham"},"content":"        String outputString \u003d String.format(\"[%s] %s\", getStatusIcon(), getDescription());","lastModifiedDate":"2022-08-21"},{"lineNumber":66,"author":{"gitId":"nealetham"},"content":"        return outputString;","lastModifiedDate":"2022-08-17"},{"lineNumber":67,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":68,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":69,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":70,"author":{"gitId":"nealetham"},"content":"     * Returns a string representation of an Task object formatted","lastModifiedDate":"2022-08-23"},{"lineNumber":71,"author":{"gitId":"nealetham"},"content":"     * for writing into text file.","lastModifiedDate":"2022-08-23"},{"lineNumber":72,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":73,"author":{"gitId":"nealetham"},"content":"     * @return String of the Event formatted to saved.","lastModifiedDate":"2022-08-23"},{"lineNumber":74,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":75,"author":{"gitId":"nealetham"},"content":"    public String formatFileText() {","lastModifiedDate":"2022-08-21"},{"lineNumber":76,"author":{"gitId":"nealetham"},"content":"        String s \u003d String.format(\"duke.Task | %s | %s\", this.getStatusIcon(), this.getDescription());","lastModifiedDate":"2022-08-23"},{"lineNumber":77,"author":{"gitId":"nealetham"},"content":"        return s;","lastModifiedDate":"2022-08-21"},{"lineNumber":78,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":79,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"nealetham":79}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-22"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-22"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":" * This class handles the manipulation of all tasks, such as marking,","lastModifiedDate":"2022-08-22"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":" * adding, deleting.","lastModifiedDate":"2022-08-22"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-22"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"public class TaskList {","lastModifiedDate":"2022-08-22"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"    /** The collection to maintain our tasks. */","lastModifiedDate":"2022-08-22"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"    protected ArrayList\u003cTask\u003e inputList;","lastModifiedDate":"2022-08-22"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"     * The class constructor for a TaskList. It is initialized","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"     * with an empty ArrayList, but it is filled progressively, or","lastModifiedDate":"2022-08-22"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"     * loaded from a previous save.","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"    public TaskList() {","lastModifiedDate":"2022-08-22"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"        this.inputList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-08-22"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"     * Adds a task to the ArrayList. Only used for when loading","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"     * from a previously saved list.","lastModifiedDate":"2022-08-22"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"     * @param task to be added.","lastModifiedDate":"2022-08-22"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"    public void add(Task task) {","lastModifiedDate":"2022-08-22"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"        this.inputList.add(task);","lastModifiedDate":"2022-08-22"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"     * Converts the ArrayList to a Task array for easier manipulation, such as","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"     * outputting its string representation.","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"     * @return Task[] an array containing Deadlines, Events and Todos.","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"    public Task[] taskListToArray() {","lastModifiedDate":"2022-08-22"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"        Task[] inputArray \u003d inputList.toArray(new Task[inputList.size()]);","lastModifiedDate":"2022-08-22"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"        return inputArray;","lastModifiedDate":"2022-08-22"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"     * Marks the task as completed via its index. DukeException is thrown","lastModifiedDate":"2022-08-23"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"     * if the task is found to be non-existent.","lastModifiedDate":"2022-08-23"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"     * @param parts sliced String input.","lastModifiedDate":"2022-08-23"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException thrown if there is no such task.","lastModifiedDate":"2022-08-22"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"    public void markTask(String[] parts) throws DukeException {","lastModifiedDate":"2022-08-22"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"        if (parts.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-22"},{"lineNumber":52,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"Please specify the index of the task (i.e. mark 2).\");","lastModifiedDate":"2022-08-22"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"        } else if (Integer.parseInt(parts[1]) \u003d\u003d 0 || Integer.parseInt(parts[1]) \u003e this.inputList.size()) {","lastModifiedDate":"2022-08-22"},{"lineNumber":54,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"There is no such task!\");","lastModifiedDate":"2022-08-22"},{"lineNumber":55,"author":{"gitId":"nealetham"},"content":"        } else {","lastModifiedDate":"2022-08-22"},{"lineNumber":56,"author":{"gitId":"nealetham"},"content":"            int index \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2022-08-22"},{"lineNumber":57,"author":{"gitId":"nealetham"},"content":"            Task task \u003d inputList.get(index - 1);","lastModifiedDate":"2022-08-22"},{"lineNumber":58,"author":{"gitId":"nealetham"},"content":"            System.out.println(task.markAsDone());","lastModifiedDate":"2022-08-22"},{"lineNumber":59,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":60,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":61,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":62,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":63,"author":{"gitId":"nealetham"},"content":"     * Removes the task from the arraylist. DukeException is thrown","lastModifiedDate":"2022-08-23"},{"lineNumber":64,"author":{"gitId":"nealetham"},"content":"     * if the task is found to be non-existent.","lastModifiedDate":"2022-08-23"},{"lineNumber":65,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":66,"author":{"gitId":"nealetham"},"content":"     * @param parts sliced String input.","lastModifiedDate":"2022-08-23"},{"lineNumber":67,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException thrown if there is no such task.","lastModifiedDate":"2022-08-22"},{"lineNumber":68,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":69,"author":{"gitId":"nealetham"},"content":"    public void deleteTask(String[] parts) throws DukeException {","lastModifiedDate":"2022-08-22"},{"lineNumber":70,"author":{"gitId":"nealetham"},"content":"        if (parts.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-22"},{"lineNumber":71,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"Please specify the index of the task (i.e. delete 2).\");","lastModifiedDate":"2022-08-22"},{"lineNumber":72,"author":{"gitId":"nealetham"},"content":"        } else if (Integer.parseInt(parts[1]) \u003d\u003d 0 || Integer.parseInt(parts[1]) \u003e inputList.size()) {","lastModifiedDate":"2022-08-22"},{"lineNumber":73,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"There is no such task!\");","lastModifiedDate":"2022-08-22"},{"lineNumber":74,"author":{"gitId":"nealetham"},"content":"        } else {","lastModifiedDate":"2022-08-22"},{"lineNumber":75,"author":{"gitId":"nealetham"},"content":"            int index \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2022-08-22"},{"lineNumber":76,"author":{"gitId":"nealetham"},"content":"            Task task \u003d inputList.get(index - 1);","lastModifiedDate":"2022-08-22"},{"lineNumber":77,"author":{"gitId":"nealetham"},"content":"            inputList.remove(index - 1);","lastModifiedDate":"2022-08-22"},{"lineNumber":78,"author":{"gitId":"nealetham"},"content":"            String output \u003d String.format(\"Noted, I\u0027ve removed this task:\\n%s\\nNow you have %s tasks in the list.\",","lastModifiedDate":"2022-08-22"},{"lineNumber":79,"author":{"gitId":"nealetham"},"content":"                    task.toString(),","lastModifiedDate":"2022-08-22"},{"lineNumber":80,"author":{"gitId":"nealetham"},"content":"                    inputList.size());","lastModifiedDate":"2022-08-22"},{"lineNumber":81,"author":{"gitId":"nealetham"},"content":"            System.out.println(output);","lastModifiedDate":"2022-08-22"},{"lineNumber":82,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":83,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":84,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":85,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":86,"author":{"gitId":"nealetham"},"content":"     * Adds task to arraylist, and formats a String representation","lastModifiedDate":"2022-08-23"},{"lineNumber":87,"author":{"gitId":"nealetham"},"content":"     * that is to be printed along with the task representation and size of list.","lastModifiedDate":"2022-08-22"},{"lineNumber":88,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":89,"author":{"gitId":"nealetham"},"content":"     * @param task from the TaskList.","lastModifiedDate":"2022-08-23"},{"lineNumber":90,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":91,"author":{"gitId":"nealetham"},"content":"    public void taskAdd(Task task) {","lastModifiedDate":"2022-08-22"},{"lineNumber":92,"author":{"gitId":"nealetham"},"content":"        this.inputList.add(task);","lastModifiedDate":"2022-08-22"},{"lineNumber":93,"author":{"gitId":"nealetham"},"content":"        String output \u003d String.format(\"Got it. I\u0027ve added this task:\\n%s\\nNow you have %s tasks in the list.\",","lastModifiedDate":"2022-08-22"},{"lineNumber":94,"author":{"gitId":"nealetham"},"content":"                task.toString(),","lastModifiedDate":"2022-08-22"},{"lineNumber":95,"author":{"gitId":"nealetham"},"content":"                inputList.size());","lastModifiedDate":"2022-08-22"},{"lineNumber":96,"author":{"gitId":"nealetham"},"content":"        System.out.println(output);","lastModifiedDate":"2022-08-22"},{"lineNumber":97,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":98,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":99,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":100,"author":{"gitId":"nealetham"},"content":"     * Abstracts the creation of a todo object, with exception handling.","lastModifiedDate":"2022-08-22"},{"lineNumber":101,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":102,"author":{"gitId":"nealetham"},"content":"     * @param input from the Parser.","lastModifiedDate":"2022-08-23"},{"lineNumber":103,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException thrown if there is no description.","lastModifiedDate":"2022-08-22"},{"lineNumber":104,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":105,"author":{"gitId":"nealetham"},"content":"    public void createTodo(String input) throws DukeException {","lastModifiedDate":"2022-08-22"},{"lineNumber":106,"author":{"gitId":"nealetham"},"content":"        String[] taskType \u003d input.split(\" \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":107,"author":{"gitId":"nealetham"},"content":"        if (taskType.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-22"},{"lineNumber":108,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2022-08-22"},{"lineNumber":109,"author":{"gitId":"nealetham"},"content":"        } else {","lastModifiedDate":"2022-08-22"},{"lineNumber":110,"author":{"gitId":"nealetham"},"content":"            Todo todo \u003d new Todo(taskType[1]);","lastModifiedDate":"2022-08-22"},{"lineNumber":111,"author":{"gitId":"nealetham"},"content":"            taskAdd(todo);","lastModifiedDate":"2022-08-22"},{"lineNumber":112,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":113,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":114,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":115,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":116,"author":{"gitId":"nealetham"},"content":"     * Abstracts the creation of a Deadline object, with exception handling.","lastModifiedDate":"2022-08-23"},{"lineNumber":117,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":118,"author":{"gitId":"nealetham"},"content":"     * @param input from the Parser.","lastModifiedDate":"2022-08-23"},{"lineNumber":119,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException thrown if there is no description or /by field.","lastModifiedDate":"2022-08-22"},{"lineNumber":120,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":121,"author":{"gitId":"nealetham"},"content":"    public void createDeadline(String input) throws DukeException{","lastModifiedDate":"2022-08-22"},{"lineNumber":122,"author":{"gitId":"nealetham"},"content":"        String[] taskType \u003d input.split(\" \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":123,"author":{"gitId":"nealetham"},"content":"        if (taskType.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-22"},{"lineNumber":124,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2022-08-22"},{"lineNumber":125,"author":{"gitId":"nealetham"},"content":"        } else if (taskType[1].split(\" /by \", 2).length \u003d\u003d 1) {","lastModifiedDate":"2022-08-22"},{"lineNumber":126,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"The /by field cannot be empty.\");","lastModifiedDate":"2022-08-22"},{"lineNumber":127,"author":{"gitId":"nealetham"},"content":"        } else {","lastModifiedDate":"2022-08-22"},{"lineNumber":128,"author":{"gitId":"nealetham"},"content":"            String[] taskBy \u003d taskType[1].split(\" /by \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":129,"author":{"gitId":"nealetham"},"content":"            Deadline deadline \u003d new Deadline(taskBy[0], taskBy[1]);","lastModifiedDate":"2022-08-22"},{"lineNumber":130,"author":{"gitId":"nealetham"},"content":"            taskAdd(deadline);","lastModifiedDate":"2022-08-22"},{"lineNumber":131,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":132,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":133,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":134,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":135,"author":{"gitId":"nealetham"},"content":"     * Abstracts the creation of a Event object, with exception handling.","lastModifiedDate":"2022-08-23"},{"lineNumber":136,"author":{"gitId":"nealetham"},"content":"     * @param input from the Parser.","lastModifiedDate":"2022-08-23"},{"lineNumber":137,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":138,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException thrown if there is no description or /at field","lastModifiedDate":"2022-08-22"},{"lineNumber":139,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":140,"author":{"gitId":"nealetham"},"content":"    public void createEvent(String input) throws DukeException {","lastModifiedDate":"2022-08-22"},{"lineNumber":141,"author":{"gitId":"nealetham"},"content":"        String[] taskType \u003d input.split(\" \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":142,"author":{"gitId":"nealetham"},"content":"        if (taskType.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-22"},{"lineNumber":143,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"The description of a event cannot be empty.\");","lastModifiedDate":"2022-08-22"},{"lineNumber":144,"author":{"gitId":"nealetham"},"content":"        } else if (taskType[1].split(\" /at \", 2).length \u003d\u003d 1) {","lastModifiedDate":"2022-08-22"},{"lineNumber":145,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"The /at field cannot be empty.\");","lastModifiedDate":"2022-08-22"},{"lineNumber":146,"author":{"gitId":"nealetham"},"content":"        } else {","lastModifiedDate":"2022-08-22"},{"lineNumber":147,"author":{"gitId":"nealetham"},"content":"            String[] taskBy \u003d taskType[1].split(\" /at \", 2);","lastModifiedDate":"2022-08-22"},{"lineNumber":148,"author":{"gitId":"nealetham"},"content":"            Event event \u003d new Event(taskBy[0], taskBy[1]);","lastModifiedDate":"2022-08-22"},{"lineNumber":149,"author":{"gitId":"nealetham"},"content":"            taskAdd(event);","lastModifiedDate":"2022-08-22"},{"lineNumber":150,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-22"},{"lineNumber":151,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":152,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":153,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":154,"author":{"gitId":"nealetham"},"content":"     * Outputs a list of all tasks that contains the keyword provided by the user.","lastModifiedDate":"2022-08-23"},{"lineNumber":155,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":156,"author":{"gitId":"nealetham"},"content":"     * @param parts sliced String input.","lastModifiedDate":"2022-08-23"},{"lineNumber":157,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException thrown if no keyword is given.","lastModifiedDate":"2022-08-23"},{"lineNumber":158,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":159,"author":{"gitId":"nealetham"},"content":"    public void findTasks(String[] parts) throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":160,"author":{"gitId":"nealetham"},"content":"        if (parts.length \u003d\u003d 1) {","lastModifiedDate":"2022-08-23"},{"lineNumber":161,"author":{"gitId":"nealetham"},"content":"            throw new DukeException(\"Please enter a keyword (i.e. find book).\");","lastModifiedDate":"2022-08-23"},{"lineNumber":162,"author":{"gitId":"nealetham"},"content":"        } else {","lastModifiedDate":"2022-08-23"},{"lineNumber":163,"author":{"gitId":"nealetham"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2022-08-23"},{"lineNumber":164,"author":{"gitId":"nealetham"},"content":"            ArrayList\u003cTask\u003e match \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-08-23"},{"lineNumber":165,"author":{"gitId":"nealetham"},"content":"            inputList.forEach(task -\u003e {","lastModifiedDate":"2022-08-23"},{"lineNumber":166,"author":{"gitId":"nealetham"},"content":"                if (task.getDescription().contains(parts[1])) {","lastModifiedDate":"2022-08-23"},{"lineNumber":167,"author":{"gitId":"nealetham"},"content":"                    match.add(task);","lastModifiedDate":"2022-08-23"},{"lineNumber":168,"author":{"gitId":"nealetham"},"content":"                }","lastModifiedDate":"2022-08-23"},{"lineNumber":169,"author":{"gitId":"nealetham"},"content":"            });","lastModifiedDate":"2022-08-23"},{"lineNumber":170,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":171,"author":{"gitId":"nealetham"},"content":"            if (match.size() !\u003d 0) {","lastModifiedDate":"2022-08-23"},{"lineNumber":172,"author":{"gitId":"nealetham"},"content":"                for (int i \u003d 0; i \u003c match.size(); i++) {","lastModifiedDate":"2022-08-23"},{"lineNumber":173,"author":{"gitId":"nealetham"},"content":"                    String s \u003d String.format(\"%s. %s\", i + 1, match.get(i).toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":174,"author":{"gitId":"nealetham"},"content":"                    System.out.println(s);","lastModifiedDate":"2022-08-23"},{"lineNumber":175,"author":{"gitId":"nealetham"},"content":"                }","lastModifiedDate":"2022-08-23"},{"lineNumber":176,"author":{"gitId":"nealetham"},"content":"            } else {","lastModifiedDate":"2022-08-23"},{"lineNumber":177,"author":{"gitId":"nealetham"},"content":"                System.out.println(\"You do not have any tasks matching that keyword.\");","lastModifiedDate":"2022-08-23"},{"lineNumber":178,"author":{"gitId":"nealetham"},"content":"            }","lastModifiedDate":"2022-08-23"},{"lineNumber":179,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":180,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":181,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":182,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":183,"author":{"gitId":"nealetham"},"content":"     * Outputs all String representation of tasks in the list.","lastModifiedDate":"2022-08-23"},{"lineNumber":184,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":185,"author":{"gitId":"nealetham"},"content":"    public void showTasks() {","lastModifiedDate":"2022-08-23"},{"lineNumber":186,"author":{"gitId":"nealetham"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2022-08-23"},{"lineNumber":187,"author":{"gitId":"nealetham"},"content":"        if (inputList.size() !\u003d 0) {","lastModifiedDate":"2022-08-23"},{"lineNumber":188,"author":{"gitId":"nealetham"},"content":"            for (int i \u003d 0; i \u003c inputList.size(); i++) {","lastModifiedDate":"2022-08-23"},{"lineNumber":189,"author":{"gitId":"nealetham"},"content":"                String s \u003d String.format (\"%s. %s\", i + 1, inputList.get(i).toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":190,"author":{"gitId":"nealetham"},"content":"                System.out.println(s);","lastModifiedDate":"2022-08-23"},{"lineNumber":191,"author":{"gitId":"nealetham"},"content":"            }","lastModifiedDate":"2022-08-23"},{"lineNumber":192,"author":{"gitId":"nealetham"},"content":"        } else {","lastModifiedDate":"2022-08-23"},{"lineNumber":193,"author":{"gitId":"nealetham"},"content":"            System.out.println(\"You have no tasks.\");","lastModifiedDate":"2022-08-23"},{"lineNumber":194,"author":{"gitId":"nealetham"},"content":"        }","lastModifiedDate":"2022-08-23"},{"lineNumber":195,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":196,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":197,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"nealetham":197}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-08-17"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"     * The class constructor, which utilizes the superclass","lastModifiedDate":"2022-08-17"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"     * constructor.","lastModifiedDate":"2022-08-17"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"     * @param description the description of the task.","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"    public Todo(String description) {","lastModifiedDate":"2022-08-17"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"        super(description);","lastModifiedDate":"2022-08-17"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-17"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-17"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"     * Returns a string representation of an Todo object formatted","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"     * for writing into text file.","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"     * @return String of the Todo formatted to saved.","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-17"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"    @Override","lastModifiedDate":"2022-08-21"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"    public String formatFileText() {","lastModifiedDate":"2022-08-21"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"        String s \u003d String.format(\"T | %s | %s\\n\", super.getStatusIcon(), this.description);","lastModifiedDate":"2022-08-21"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"        return s;","lastModifiedDate":"2022-08-21"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-21"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"     * Overrides the toString method of the superclass to add","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"     * the additional [T] tag.","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"     * @return String representation of this task.","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-21"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"    @Override","lastModifiedDate":"2022-08-17"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"    public String toString() {","lastModifiedDate":"2022-08-17"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-08-17"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-17"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-17"}],"authorContributionMap":{"nealetham":37}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"package duke;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-22"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":" * This class handles all main interactions with the user, including","lastModifiedDate":"2022-08-22"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":" * outputting any error messages if any.","lastModifiedDate":"2022-08-22"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-22"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"public class Ui {","lastModifiedDate":"2022-08-22"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"    public Ui() {","lastModifiedDate":"2022-08-22"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"     * Prints a salutation, indicating the programme has started running.","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"    public void start() {","lastModifiedDate":"2022-08-22"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"     * Prints a sign-off, indicating the programme has ended.","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"    public void close() {","lastModifiedDate":"2022-08-22"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2022-08-22"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"     * Prints any error message, which briefly describes its origin, and ways","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"     * to fix it.","lastModifiedDate":"2022-08-22"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"     * @param e DukeException that was thrown.","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"    public void showError(DukeException e) {","lastModifiedDate":"2022-08-22"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"        System.out.println(e.getMessage());","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-22"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-22"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"     * Prints the string representation of all tasks that has been","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"     * added to the arraylist via the toString method.","lastModifiedDate":"2022-08-23"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"     * @param tasks in the TaskList.","lastModifiedDate":"2022-08-23"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-22"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"    public void printList(TaskList tasks) {","lastModifiedDate":"2022-08-22"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"        tasks.showTasks();","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-22"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-22"}],"authorContributionMap":{"nealetham":45}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"import duke.*;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":" * To unit test the Deadline class.","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"public class DeadlineTest {","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"     * Tests the creation of a Deadline object.","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException not thrown.","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"    public void testCreateDeadline() throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"        Deadline deadline \u003d new Deadline(\"test\", \"2000-12-12 12:12\");","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"        String result \u003d \"[D][O] test (by: DECEMBER 12 2000 12:12)\";","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"        assertEquals(result, deadline.toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"     * Tests the save format of an Deadline object.","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException not thrown.","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"    public void testFormatting() throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"        Deadline deadline \u003d new Deadline(\"test\", \"2000-12-12 12:12\");","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"        String result \u003d \"D | O | test | 2000-12-12 12:12\\n\";","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"        assertEquals(result, deadline.formatFileText());","lastModifiedDate":"2022-08-23"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"     * Tests that an exception is thrown if the \"/by\" param is","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"     * in an invalid format.","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"    public void testIncorrectDateFormat() {","lastModifiedDate":"2022-08-23"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"        Throwable exception \u003d assertThrows(Throwable.class, () -\u003e {","lastModifiedDate":"2022-08-23"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"            new Deadline(\"test\", \"tmr\");","lastModifiedDate":"2022-08-23"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"        });","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"        assertEquals(\"Invalid Date Format (YYYY-MM-DD HH:MM required).\" , exception.getMessage());","lastModifiedDate":"2022-08-23"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"nealetham":47}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"import duke.*;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":" * To unit test the Event class.","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"public class EventTest {","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"     * Tests the creation of an Event object.","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"    public void testCreateEvent() {","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"        Event event \u003d new Event(\"test\", \"tmr\");","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"        String result \u003d \"[E][O] test (at: tmr)\";","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"        assertEquals(result, event.toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"     * Tests the save format of an Event object.","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"    public void testFormatting() {","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"        Event event \u003d new Event(\"test\", \"tmr\");","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"        String result \u003d \"E | O | test | tmr\\n\";","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"        assertEquals(result, event.formatFileText());","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"nealetham":30}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"import duke.*;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":" * To unit test the Parser class.","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"public class ParserTest {","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"     * Tests the conditional logic when encountering a todo input.","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException not thrown.","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"    public void testParseTodo() throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"        Parser parser \u003d new Parser(tasklist);","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"        parser.parse(\"todo testtodo\");","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"        Todo todo \u003d new Todo(\"testtodo\");","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"        assertEquals(todo.toString(), tasklist.taskListToArray()[0].toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"     * Tests the conditional logic when encountering a mark input.","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException not thrown.","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"    public void testMark() throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2022-08-23"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"        Deadline deadline \u003d new Deadline(\"testdeadline\", \"2012-12-12 12:12\");","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"        deadline.markAsDone();","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"        tasklist.add(deadline);","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"        Parser parser \u003d new Parser(tasklist);","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"        parser.parse(\"deadline testdeadline /by 2012-12-12 12:12\");","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"        parser.parse(\"mark 2\");","lastModifiedDate":"2022-08-23"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"        assertEquals(tasklist.taskListToArray()[0].toString(), tasklist.taskListToArray()[1].toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"     * Tests the conditional logic when encountering an invalid input.","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"    public void testInvalidInput() {","lastModifiedDate":"2022-08-23"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"        Parser parser \u003d new Parser(new TaskList());","lastModifiedDate":"2022-08-23"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"        Throwable exception \u003d assertThrows(Throwable.class, () -\u003e {","lastModifiedDate":"2022-08-23"},{"lineNumber":49,"author":{"gitId":"nealetham"},"content":"            parser.parse(\"test\");","lastModifiedDate":"2022-08-23"},{"lineNumber":50,"author":{"gitId":"nealetham"},"content":"        });","lastModifiedDate":"2022-08-23"},{"lineNumber":51,"author":{"gitId":"nealetham"},"content":"        assertEquals(\"I\u0027m sorry, but I don\u0027t know what that means :(\" , exception.getMessage());","lastModifiedDate":"2022-08-23"},{"lineNumber":52,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":53,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":54,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"nealetham":54}},{"path":"src/test/java/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"import duke.*;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":" * To unit test the Storage class.","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"public class StorageTest {","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"     * Tests the case where the specified filepath does not exist.","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"    public void testLoadEmptyFile() {","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"        Todo todo \u003d new Todo(\"test123\");","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"        tasklist.add(todo);","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"        Storage storage \u003d new Storage(\"fake/\");","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"        TaskList loadedFile \u003d storage.loadFile(tasklist);","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"        assertEquals(tasklist, loadedFile);","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"     * Tests if the saved file has been loaded properly into the tasklist.","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"    public void testLoadSavedFile1() {","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"        Storage storage \u003d new Storage(\"src/test/java/test.txt\");","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"        TaskList task \u003d storage.loadFile(new TaskList());","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"        String todo \u003d new Todo(\"test\").toString();","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"        assertEquals(todo, task.taskListToArray()[0].toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"     * Tests if the saved file has been loaded properly into the tasklist.","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"    public void testLoadSavedFile2() {","lastModifiedDate":"2022-08-23"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"        Storage storage \u003d new Storage(\"src/test/java/test.txt\");","lastModifiedDate":"2022-08-23"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"        TaskList task \u003d storage.loadFile(new TaskList());","lastModifiedDate":"2022-08-23"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"        String deadline \u003d \"[D][X] test (by: DECEMBER 12 2022 10:55)\";","lastModifiedDate":"2022-08-23"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"        assertEquals(deadline, task.taskListToArray()[1].toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"nealetham":44}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"import duke.*;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":" * To unit test the TaskList class.","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"public class TaskListTest {","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"     * Tests the creation of a todo object.","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException not thrown.","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"    public void testCreateTodo() throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"        TaskList test \u003d new TaskList();","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"        test.createTodo(\"todo todotest\");","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"        Task[] testArray \u003d test.taskListToArray();","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"        assertEquals(new Todo(\"todotest\").toString(), testArray[0].toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"     * Tests the creation of a deadline object.","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException not thrown.","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"    public void testCreateDeadline() throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":30,"author":{"gitId":"nealetham"},"content":"        TaskList test \u003d new TaskList();","lastModifiedDate":"2022-08-23"},{"lineNumber":31,"author":{"gitId":"nealetham"},"content":"        test.createDeadline(\"deadline deadlinetest /by 2012-12-12 12:12\");","lastModifiedDate":"2022-08-23"},{"lineNumber":32,"author":{"gitId":"nealetham"},"content":"        Task[] testArray \u003d test.taskListToArray();","lastModifiedDate":"2022-08-23"},{"lineNumber":33,"author":{"gitId":"nealetham"},"content":"        assertEquals(new Deadline(\"deadlinetest\", \"2012-12-12 12:12\").toString(), testArray[0].toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":34,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":35,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":36,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":37,"author":{"gitId":"nealetham"},"content":"     * Tests the creation of a event object.","lastModifiedDate":"2022-08-23"},{"lineNumber":38,"author":{"gitId":"nealetham"},"content":"     *","lastModifiedDate":"2022-08-23"},{"lineNumber":39,"author":{"gitId":"nealetham"},"content":"     * @throws DukeException not thrown.","lastModifiedDate":"2022-08-23"},{"lineNumber":40,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":41,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":42,"author":{"gitId":"nealetham"},"content":"    public void testCreateEvent() throws DukeException {","lastModifiedDate":"2022-08-23"},{"lineNumber":43,"author":{"gitId":"nealetham"},"content":"        TaskList test \u003d new TaskList();","lastModifiedDate":"2022-08-23"},{"lineNumber":44,"author":{"gitId":"nealetham"},"content":"        test.createEvent(\"event eventtest /at tmr\");","lastModifiedDate":"2022-08-23"},{"lineNumber":45,"author":{"gitId":"nealetham"},"content":"        Task[] testArray \u003d test.taskListToArray();","lastModifiedDate":"2022-08-23"},{"lineNumber":46,"author":{"gitId":"nealetham"},"content":"        assertEquals(new Event(\"eventtest\", \"tmr\").toString(), testArray[0].toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":47,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":48,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"nealetham":48}},{"path":"src/test/java/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"import duke.*;","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-08-23"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-08-23"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"/**","lastModifiedDate":"2022-08-23"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":" * To unit test the Todo class.","lastModifiedDate":"2022-08-23"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":" */","lastModifiedDate":"2022-08-23"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"public class TodoTest {","lastModifiedDate":"2022-08-23"},{"lineNumber":9,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"nealetham"},"content":"     * Tests the creation of a todo object.","lastModifiedDate":"2022-08-23"},{"lineNumber":12,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":13,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":14,"author":{"gitId":"nealetham"},"content":"    public void testCreateTodo() {","lastModifiedDate":"2022-08-23"},{"lineNumber":15,"author":{"gitId":"nealetham"},"content":"        Todo todo \u003d new Todo(\"test\");","lastModifiedDate":"2022-08-23"},{"lineNumber":16,"author":{"gitId":"nealetham"},"content":"        String result \u003d \"[T][O] test\";","lastModifiedDate":"2022-08-23"},{"lineNumber":17,"author":{"gitId":"nealetham"},"content":"        assertEquals(result, todo.toString());","lastModifiedDate":"2022-08-23"},{"lineNumber":18,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":19,"author":{"gitId":"nealetham"},"content":"","lastModifiedDate":"2022-08-23"},{"lineNumber":20,"author":{"gitId":"nealetham"},"content":"    /**","lastModifiedDate":"2022-08-23"},{"lineNumber":21,"author":{"gitId":"nealetham"},"content":"     * Tests the save format of an Event object.","lastModifiedDate":"2022-08-23"},{"lineNumber":22,"author":{"gitId":"nealetham"},"content":"     */","lastModifiedDate":"2022-08-23"},{"lineNumber":23,"author":{"gitId":"nealetham"},"content":"    @Test","lastModifiedDate":"2022-08-23"},{"lineNumber":24,"author":{"gitId":"nealetham"},"content":"    public void testFormatting() {","lastModifiedDate":"2022-08-23"},{"lineNumber":25,"author":{"gitId":"nealetham"},"content":"        Todo todo \u003d new Todo(\"test\");","lastModifiedDate":"2022-08-23"},{"lineNumber":26,"author":{"gitId":"nealetham"},"content":"        String result \u003d \"T | O | test\\n\";","lastModifiedDate":"2022-08-23"},{"lineNumber":27,"author":{"gitId":"nealetham"},"content":"        assertEquals(result, todo.formatFileText());","lastModifiedDate":"2022-08-23"},{"lineNumber":28,"author":{"gitId":"nealetham"},"content":"    }","lastModifiedDate":"2022-08-23"},{"lineNumber":29,"author":{"gitId":"nealetham"},"content":"}","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"nealetham":29}},{"path":"src/test/java/test.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"T | O | test","lastModifiedDate":"2022-08-23"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"D | X | test | 2022-12-12 10:55","lastModifiedDate":"2022-08-23"}],"authorContributionMap":{"nealetham":2}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nealetham"},"content":"todo borrow book","lastModifiedDate":"2022-08-18"},{"lineNumber":2,"author":{"gitId":"nealetham"},"content":"deadline return book /by Sunday","lastModifiedDate":"2022-08-18"},{"lineNumber":3,"author":{"gitId":"nealetham"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2022-08-18"},{"lineNumber":4,"author":{"gitId":"nealetham"},"content":"list","lastModifiedDate":"2022-08-18"},{"lineNumber":5,"author":{"gitId":"nealetham"},"content":"mark 2","lastModifiedDate":"2022-08-18"},{"lineNumber":6,"author":{"gitId":"nealetham"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2022-08-18"},{"lineNumber":7,"author":{"gitId":"nealetham"},"content":"mark 1","lastModifiedDate":"2022-08-18"},{"lineNumber":8,"author":{"gitId":"nealetham"},"content":"bye","lastModifiedDate":"2022-08-18"}],"authorContributionMap":{"nealetham":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"nealetham"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2022-08-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"nealetham":1,"-":20}}]
